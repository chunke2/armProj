
app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080139c4  080139c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a6c  08013a6c  000151c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013a6c  08013a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a74  08013a74  000151c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a74  08013a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013a78  08013a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08013a7c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000084  08013b00  00015084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000124  08013ba0  00015124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009838  200001c4  08013c40  000151c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200099fc  08013c40  000159fc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000151c4  2**0
                  CONTENTS, READONLY
 14 .comment      00000045  00000000  00000000  000151f4  2**0
                  CONTENTS, READONLY
 15 .debug_info   000406ed  00000000  00000000  00015239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009f59  00000000  00000000  00055926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003448  00000000  00000000  0005f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000282a  00000000  00000000  00062cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b43c  00000000  00000000  000654f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00010bba  00000000  00000000  0009092e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000dd88  00000000  00000000  000a14e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000143  00000000  00000000  000af270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b80c 	b.w	8000200 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f013 f8fe 	bl	80133f0 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__aeabi_idiv0>:
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop

08000204 <deregister_tm_clones>:
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <deregister_tm_clones+0x10>)
 8000206:	4b04      	ldr	r3, [pc, #16]	@ (8000218 <deregister_tm_clones+0x14>)
 8000208:	4283      	cmp	r3, r0
 800020a:	d002      	beq.n	8000212 <deregister_tm_clones+0xe>
 800020c:	4b03      	ldr	r3, [pc, #12]	@ (800021c <deregister_tm_clones+0x18>)
 800020e:	b103      	cbz	r3, 8000212 <deregister_tm_clones+0xe>
 8000210:	4718      	bx	r3
 8000212:	4770      	bx	lr
 8000214:	20000084 	.word	0x20000084
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000

08000220 <register_tm_clones>:
 8000220:	4805      	ldr	r0, [pc, #20]	@ (8000238 <register_tm_clones+0x18>)
 8000222:	4b06      	ldr	r3, [pc, #24]	@ (800023c <register_tm_clones+0x1c>)
 8000224:	1a1b      	subs	r3, r3, r0
 8000226:	0fd9      	lsrs	r1, r3, #31
 8000228:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 800022c:	1049      	asrs	r1, r1, #1
 800022e:	d002      	beq.n	8000236 <register_tm_clones+0x16>
 8000230:	4b03      	ldr	r3, [pc, #12]	@ (8000240 <register_tm_clones+0x20>)
 8000232:	b103      	cbz	r3, 8000236 <register_tm_clones+0x16>
 8000234:	4718      	bx	r3
 8000236:	4770      	bx	lr
 8000238:	20000084 	.word	0x20000084
 800023c:	20000084 	.word	0x20000084
 8000240:	00000000 	.word	0x00000000

08000244 <__do_global_dtors_aux>:
 8000244:	b510      	push	{r4, lr}
 8000246:	4c06      	ldr	r4, [pc, #24]	@ (8000260 <__do_global_dtors_aux+0x1c>)
 8000248:	7823      	ldrb	r3, [r4, #0]
 800024a:	b943      	cbnz	r3, 800025e <__do_global_dtors_aux+0x1a>
 800024c:	f7ff ffda 	bl	8000204 <deregister_tm_clones>
 8000250:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <__do_global_dtors_aux+0x20>)
 8000252:	b113      	cbz	r3, 800025a <__do_global_dtors_aux+0x16>
 8000254:	4804      	ldr	r0, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x24>)
 8000256:	f3af 8000 	nop.w
 800025a:	2301      	movs	r3, #1
 800025c:	7023      	strb	r3, [r4, #0]
 800025e:	bd10      	pop	{r4, pc}
 8000260:	200001c4 	.word	0x200001c4
 8000264:	00000000 	.word	0x00000000
 8000268:	080139ac 	.word	0x080139ac

0800026c <frame_dummy>:
 800026c:	b508      	push	{r3, lr}
 800026e:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <frame_dummy+0x18>)
 8000270:	b11b      	cbz	r3, 800027a <frame_dummy+0xe>
 8000272:	4905      	ldr	r1, [pc, #20]	@ (8000288 <frame_dummy+0x1c>)
 8000274:	4805      	ldr	r0, [pc, #20]	@ (800028c <frame_dummy+0x20>)
 8000276:	f3af 8000 	nop.w
 800027a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800027e:	f7ff bfcf 	b.w	8000220 <register_tm_clones>
 8000282:	bf00      	nop
 8000284:	00000000 	.word	0x00000000
 8000288:	200001c8 	.word	0x200001c8
 800028c:	080139ac 	.word	0x080139ac

08000290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000294:	2003      	movs	r0, #3
 8000296:	f000 fb92 	bl	80009be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800029a:	2000      	movs	r0, #0
 800029c:	f00c ffb6 	bl	800d20c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002a0:	f00c ff8c 	bl	800d1bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b0:	4b06      	ldr	r3, [pc, #24]	@ (80002cc <HAL_IncTick+0x20>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <HAL_IncTick+0x24>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	4a04      	ldr	r2, [pc, #16]	@ (80002d0 <HAL_IncTick+0x24>)
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000004 	.word	0x20000004
 80002d0:	200001e0 	.word	0x200001e0

080002d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b03      	ldr	r3, [pc, #12]	@ (80002e8 <HAL_GetTick+0x14>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	200001e0 	.word	0x200001e0

080002ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f4:	f7ff ffee 	bl	80002d4 <HAL_GetTick>
 80002f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000304:	d005      	beq.n	8000312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000306:	4b0a      	ldr	r3, [pc, #40]	@ (8000330 <HAL_Delay+0x44>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	461a      	mov	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4413      	add	r3, r2
 8000310:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000312:	bf00      	nop
 8000314:	f7ff ffde 	bl	80002d4 <HAL_GetTick>
 8000318:	4602      	mov	r2, r0
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	429a      	cmp	r2, r3
 8000322:	d8f7      	bhi.n	8000314 <HAL_Delay+0x28>
  {
  }
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	3710      	adds	r7, #16
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000004 	.word	0x20000004

08000334 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800033c:	2300      	movs	r3, #0
 800033e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000346:	2301      	movs	r3, #1
 8000348:	e031      	b.n	80003ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034e:	2b00      	cmp	r3, #0
 8000350:	d109      	bne.n	8000366 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000352:	6878      	ldr	r0, [r7, #4]
 8000354:	f00b fad2 	bl	800b8fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2200      	movs	r2, #0
 800035c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2200      	movs	r2, #0
 8000362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800036a:	f003 0310 	and.w	r3, r3, #16
 800036e:	2b00      	cmp	r3, #0
 8000370:	d116      	bne.n	80003a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000376:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <HAL_ADC_Init+0x84>)
 8000378:	4013      	ands	r3, r2
 800037a:	f043 0202 	orr.w	r2, r3, #2
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000382:	6878      	ldr	r0, [r7, #4]
 8000384:	f000 f974 	bl	8000670 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2200      	movs	r2, #0
 800038c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000392:	f023 0303 	bic.w	r3, r3, #3
 8000396:	f043 0201 	orr.w	r2, r3, #1
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	641a      	str	r2, [r3, #64]	@ 0x40
 800039e:	e001      	b.n	80003a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80003a0:	2301      	movs	r3, #1
 80003a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2200      	movs	r2, #0
 80003a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	ffffeefd 	.word	0xffffeefd

080003bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d101      	bne.n	80003d8 <HAL_ADC_ConfigChannel+0x1c>
 80003d4:	2302      	movs	r3, #2
 80003d6:	e13a      	b.n	800064e <HAL_ADC_ConfigChannel+0x292>
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2201      	movs	r2, #1
 80003dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b09      	cmp	r3, #9
 80003e6:	d93a      	bls.n	800045e <HAL_ADC_ConfigChannel+0xa2>
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003f0:	d035      	beq.n	800045e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	68d9      	ldr	r1, [r3, #12]
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	4613      	mov	r3, r2
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	4413      	add	r3, r2
 8000406:	3b1e      	subs	r3, #30
 8000408:	2207      	movs	r2, #7
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	43da      	mvns	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	400a      	ands	r2, r1
 8000416:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a8f      	ldr	r2, [pc, #572]	@ (800065c <HAL_ADC_ConfigChannel+0x2a0>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d10a      	bne.n	8000438 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	68d9      	ldr	r1, [r3, #12]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	061a      	lsls	r2, r3, #24
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	430a      	orrs	r2, r1
 8000434:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000436:	e039      	b.n	80004ac <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68d9      	ldr	r1, [r3, #12]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	689a      	ldr	r2, [r3, #8]
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	b29b      	uxth	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	4603      	mov	r3, r0
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	4403      	add	r3, r0
 8000450:	3b1e      	subs	r3, #30
 8000452:	409a      	lsls	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	430a      	orrs	r2, r1
 800045a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800045c:	e026      	b.n	80004ac <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	6919      	ldr	r1, [r3, #16]
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	b29b      	uxth	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	4613      	mov	r3, r2
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	4413      	add	r3, r2
 8000472:	f003 031f 	and.w	r3, r3, #31
 8000476:	2207      	movs	r2, #7
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	43da      	mvns	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	400a      	ands	r2, r1
 8000484:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	6919      	ldr	r1, [r3, #16]
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	689a      	ldr	r2, [r3, #8]
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	b29b      	uxth	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	4603      	mov	r3, r0
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	4403      	add	r3, r0
 800049e:	f003 031f 	and.w	r3, r3, #31
 80004a2:	409a      	lsls	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	2b06      	cmp	r3, #6
 80004b2:	d824      	bhi.n	80004fe <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	4613      	mov	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	4413      	add	r3, r2
 80004c4:	3b05      	subs	r3, #5
 80004c6:	221f      	movs	r2, #31
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	43da      	mvns	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	400a      	ands	r2, r1
 80004d4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	4618      	mov	r0, r3
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	685a      	ldr	r2, [r3, #4]
 80004e8:	4613      	mov	r3, r2
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	3b05      	subs	r3, #5
 80004f0:	fa00 f203 	lsl.w	r2, r0, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80004fc:	e04c      	b.n	8000598 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	2b0c      	cmp	r3, #12
 8000504:	d824      	bhi.n	8000550 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	4613      	mov	r3, r2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	4413      	add	r3, r2
 8000516:	3b23      	subs	r3, #35	@ 0x23
 8000518:	221f      	movs	r2, #31
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	43da      	mvns	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	b29b      	uxth	r3, r3
 8000534:	4618      	mov	r0, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	4613      	mov	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	4413      	add	r3, r2
 8000540:	3b23      	subs	r3, #35	@ 0x23
 8000542:	fa00 f203 	lsl.w	r2, r0, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	430a      	orrs	r2, r1
 800054c:	631a      	str	r2, [r3, #48]	@ 0x30
 800054e:	e023      	b.n	8000598 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	3b41      	subs	r3, #65	@ 0x41
 8000562:	221f      	movs	r2, #31
 8000564:	fa02 f303 	lsl.w	r3, r2, r3
 8000568:	43da      	mvns	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	400a      	ands	r2, r1
 8000570:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	b29b      	uxth	r3, r3
 800057e:	4618      	mov	r0, r3
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	4613      	mov	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	3b41      	subs	r3, #65	@ 0x41
 800058c:	fa00 f203 	lsl.w	r2, r0, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	430a      	orrs	r2, r1
 8000596:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a30      	ldr	r2, [pc, #192]	@ (8000660 <HAL_ADC_ConfigChannel+0x2a4>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d10a      	bne.n	80005b8 <HAL_ADC_ConfigChannel+0x1fc>
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80005aa:	d105      	bne.n	80005b8 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80005ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 80005b2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80005b6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a28      	ldr	r2, [pc, #160]	@ (8000660 <HAL_ADC_ConfigChannel+0x2a4>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d10f      	bne.n	80005e2 <HAL_ADC_ConfigChannel+0x226>
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b12      	cmp	r3, #18
 80005c8:	d10b      	bne.n	80005e2 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80005ca:	4b26      	ldr	r3, [pc, #152]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	4a25      	ldr	r2, [pc, #148]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 80005d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80005d4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80005d6:	4b23      	ldr	r3, [pc, #140]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	4a22      	ldr	r2, [pc, #136]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 80005dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005e0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <HAL_ADC_ConfigChannel+0x2a4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d12b      	bne.n	8000644 <HAL_ADC_ConfigChannel+0x288>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1a      	ldr	r2, [pc, #104]	@ (800065c <HAL_ADC_ConfigChannel+0x2a0>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d003      	beq.n	80005fe <HAL_ADC_ConfigChannel+0x242>
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b11      	cmp	r3, #17
 80005fc:	d122      	bne.n	8000644 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4a18      	ldr	r2, [pc, #96]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 8000604:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000608:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800060a:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <HAL_ADC_ConfigChannel+0x2a8>)
 8000610:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000614:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <HAL_ADC_ConfigChannel+0x2a0>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d111      	bne.n	8000644 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <HAL_ADC_ConfigChannel+0x2ac>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a11      	ldr	r2, [pc, #68]	@ (800066c <HAL_ADC_ConfigChannel+0x2b0>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	0c9a      	lsrs	r2, r3, #18
 800062c:	4613      	mov	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000636:	e002      	b.n	800063e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3b01      	subs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1f9      	bne.n	8000638 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	10000012 	.word	0x10000012
 8000660:	40012000 	.word	0x40012000
 8000664:	40012300 	.word	0x40012300
 8000668:	20000008 	.word	0x20000008
 800066c:	431bde83 	.word	0x431bde83

08000670 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000678:	4b78      	ldr	r3, [pc, #480]	@ (800085c <ADC_Init+0x1ec>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	4a77      	ldr	r2, [pc, #476]	@ (800085c <ADC_Init+0x1ec>)
 800067e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000682:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000684:	4b75      	ldr	r3, [pc, #468]	@ (800085c <ADC_Init+0x1ec>)
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4973      	ldr	r1, [pc, #460]	@ (800085c <ADC_Init+0x1ec>)
 800068e:	4313      	orrs	r3, r2
 8000690:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80006a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	021a      	lsls	r2, r3, #8
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80006c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6859      	ldr	r1, [r3, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689a      	ldr	r2, [r3, #8]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80006e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6899      	ldr	r1, [r3, #8]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68da      	ldr	r2, [r3, #12]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006fe:	4a58      	ldr	r2, [pc, #352]	@ (8000860 <ADC_Init+0x1f0>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d022      	beq.n	800074a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000712:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6899      	ldr	r1, [r3, #8]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	430a      	orrs	r2, r1
 8000724:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6899      	ldr	r1, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	430a      	orrs	r2, r1
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	e00f      	b.n	800076a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	689a      	ldr	r2, [r3, #8]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000768:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	689a      	ldr	r2, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f022 0202 	bic.w	r2, r2, #2
 8000778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	6899      	ldr	r1, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	005a      	lsls	r2, r3, #1
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	430a      	orrs	r2, r1
 800078c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d01b      	beq.n	80007d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	685a      	ldr	r2, [r3, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80007a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80007b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6859      	ldr	r1, [r3, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007c2:	3b01      	subs	r3, #1
 80007c4:	035a      	lsls	r2, r3, #13
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	e007      	b.n	80007e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80007de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	051a      	lsls	r2, r3, #20
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	430a      	orrs	r2, r1
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6899      	ldr	r1, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000822:	025a      	lsls	r2, r3, #9
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	430a      	orrs	r2, r1
 800082a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800083a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6899      	ldr	r1, [r3, #8]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	029a      	lsls	r2, r3, #10
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	430a      	orrs	r2, r1
 800084e:	609a      	str	r2, [r3, #8]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	40012300 	.word	0x40012300
 8000860:	0f000001 	.word	0x0f000001

08000864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000874:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087a:	68ba      	ldr	r2, [r7, #8]
 800087c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000880:	4013      	ands	r3, r2
 8000882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	4313      	orrs	r3, r2
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	@ (80008a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00
 80008a8:	05fa0000 	.word	0x05fa0000

080008ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <__NVIC_GetPriorityGrouping+0x18>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	f003 0307 	and.w	r3, r3, #7
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db0b      	blt.n	80008f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 021f 	and.w	r2, r3, #31
 80008e0:	4907      	ldr	r1, [pc, #28]	@ (8000900 <__NVIC_EnableIRQ+0x38>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	2001      	movs	r0, #1
 80008ea:	fa00 f202 	lsl.w	r2, r0, r2
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	db0a      	blt.n	800092e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	b2da      	uxtb	r2, r3
 800091c:	490c      	ldr	r1, [pc, #48]	@ (8000950 <__NVIC_SetPriority+0x4c>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	0112      	lsls	r2, r2, #4
 8000924:	b2d2      	uxtb	r2, r2
 8000926:	440b      	add	r3, r1
 8000928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800092c:	e00a      	b.n	8000944 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4908      	ldr	r1, [pc, #32]	@ (8000954 <__NVIC_SetPriority+0x50>)
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 030f 	and.w	r3, r3, #15
 800093a:	3b04      	subs	r3, #4
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	b2d2      	uxtb	r2, r2
 8000940:	440b      	add	r3, r1
 8000942:	761a      	strb	r2, [r3, #24]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	@ 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f1c3 0307 	rsb	r3, r3, #7
 8000972:	2b04      	cmp	r3, #4
 8000974:	bf28      	it	cs
 8000976:	2304      	movcs	r3, #4
 8000978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3304      	adds	r3, #4
 800097e:	2b06      	cmp	r3, #6
 8000980:	d902      	bls.n	8000988 <NVIC_EncodePriority+0x30>
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3b03      	subs	r3, #3
 8000986:	e000      	b.n	800098a <NVIC_EncodePriority+0x32>
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 32ff 	mov.w	r2, #4294967295
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43da      	mvns	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a0:	f04f 31ff 	mov.w	r1, #4294967295
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa01 f303 	lsl.w	r3, r1, r3
 80009aa:	43d9      	mvns	r1, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	4313      	orrs	r3, r2
         );
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	@ 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ff4c 	bl	8000864 <__NVIC_SetPriorityGrouping>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
 80009e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e6:	f7ff ff61 	bl	80008ac <__NVIC_GetPriorityGrouping>
 80009ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	6978      	ldr	r0, [r7, #20]
 80009f2:	f7ff ffb1 	bl	8000958 <NVIC_EncodePriority>
 80009f6:	4602      	mov	r2, r0
 80009f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff80 	bl	8000904 <__NVIC_SetPriority>
}
 8000a04:	bf00      	nop
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff54 	bl	80008c8 <__NVIC_EnableIRQ>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e054      	b.n	8000ae4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7f5b      	ldrb	r3, [r3, #29]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d105      	bne.n	8000a50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f00a ffd2 	bl	800b9f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2202      	movs	r2, #2
 8000a54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	791b      	ldrb	r3, [r3, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10c      	bne.n	8000a78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <HAL_CRC_Init+0xc4>)
 8000a64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0218 	bic.w	r2, r2, #24
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	e00c      	b.n	8000a92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6899      	ldr	r1, [r3, #8]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	461a      	mov	r2, r3
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f834 	bl	8000af0 <HAL_CRCEx_Polynomial_Set>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e028      	b.n	8000ae4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	795b      	ldrb	r3, [r3, #5]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa2:	611a      	str	r2, [r3, #16]
 8000aa4:	e004      	b.n	8000ab0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	6912      	ldr	r2, [r2, #16]
 8000aae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	699a      	ldr	r2, [r3, #24]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	04c11db7 	.word	0x04c11db7

08000af0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000b00:	231f      	movs	r3, #31
 8000b02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	75fb      	strb	r3, [r7, #23]
 8000b12:	e063      	b.n	8000bdc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000b14:	bf00      	nop
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	1e5a      	subs	r2, r3, #1
 8000b1a:	613a      	str	r2, [r7, #16]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d009      	beq.n	8000b34 <HAL_CRCEx_Polynomial_Set+0x44>
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	f003 031f 	and.w	r3, r3, #31
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f0      	beq.n	8000b16 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b18      	cmp	r3, #24
 8000b38:	d846      	bhi.n	8000bc8 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b40 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000bcf 	.word	0x08000bcf
 8000b44:	08000bc9 	.word	0x08000bc9
 8000b48:	08000bc9 	.word	0x08000bc9
 8000b4c:	08000bc9 	.word	0x08000bc9
 8000b50:	08000bc9 	.word	0x08000bc9
 8000b54:	08000bc9 	.word	0x08000bc9
 8000b58:	08000bc9 	.word	0x08000bc9
 8000b5c:	08000bc9 	.word	0x08000bc9
 8000b60:	08000bbd 	.word	0x08000bbd
 8000b64:	08000bc9 	.word	0x08000bc9
 8000b68:	08000bc9 	.word	0x08000bc9
 8000b6c:	08000bc9 	.word	0x08000bc9
 8000b70:	08000bc9 	.word	0x08000bc9
 8000b74:	08000bc9 	.word	0x08000bc9
 8000b78:	08000bc9 	.word	0x08000bc9
 8000b7c:	08000bc9 	.word	0x08000bc9
 8000b80:	08000bb1 	.word	0x08000bb1
 8000b84:	08000bc9 	.word	0x08000bc9
 8000b88:	08000bc9 	.word	0x08000bc9
 8000b8c:	08000bc9 	.word	0x08000bc9
 8000b90:	08000bc9 	.word	0x08000bc9
 8000b94:	08000bc9 	.word	0x08000bc9
 8000b98:	08000bc9 	.word	0x08000bc9
 8000b9c:	08000bc9 	.word	0x08000bc9
 8000ba0:	08000ba5 	.word	0x08000ba5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d913      	bls.n	8000bd2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000bae:	e010      	b.n	8000bd2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2b07      	cmp	r3, #7
 8000bb4:	d90f      	bls.n	8000bd6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000bba:	e00c      	b.n	8000bd6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d90b      	bls.n	8000bda <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000bc6:	e008      	b.n	8000bda <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	75fb      	strb	r3, [r7, #23]
        break;
 8000bcc:	e006      	b.n	8000bdc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000bce:	bf00      	nop
 8000bd0:	e004      	b.n	8000bdc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000bd2:	bf00      	nop
 8000bd4:	e002      	b.n	8000bdc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000bd6:	bf00      	nop
 8000bd8:	e000      	b.n	8000bdc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000bda:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10d      	bne.n	8000bfe <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f023 0118 	bic.w	r1, r3, #24
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	371c      	adds	r7, #28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e069      	b.n	8000cf2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f00a ff36 	bl	800ba9c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2202      	movs	r2, #2
 8000c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6819      	ldr	r1, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <HAL_DCMI_Init+0xf0>)
 8000c52:	400b      	ands	r3, r1
 8000c54:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8000c6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8000c76:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8000c82:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c88:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8000c8e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c94:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8000c9a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b10      	cmp	r3, #16
 8000caa:	d112      	bne.n	8000cd2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	7f1b      	ldrb	r3, [r3, #28]
 8000cb0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	7f5b      	ldrb	r3, [r3, #29]
 8000cb6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000cb8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	7f9b      	ldrb	r3, [r3, #30]
 8000cbe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8000cc0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7fdb      	ldrb	r3, [r3, #31]
 8000cc8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8000cce:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8000cd0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 021e 	orr.w	r2, r2, #30
 8000ce0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	ffe0f007 	.word	0xffe0f007

08000d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
 8000d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <HAL_DMA_Start_IT+0x26>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e048      	b.n	8000db8 <HAL_DMA_Start_IT+0xb8>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d137      	bne.n	8000daa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f000 f842 	bl	8000dd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d58:	223f      	movs	r2, #63	@ 0x3f
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0216 	orr.w	r2, r2, #22
 8000d6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	695a      	ldr	r2, [r3, #20]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d7e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d007      	beq.n	8000d98 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0208 	orr.w	r2, r2, #8
 8000d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0201 	orr.w	r2, r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e005      	b.n	8000db6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000db2:	2302      	movs	r3, #2
 8000db4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000df4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b40      	cmp	r3, #64	@ 0x40
 8000e04:	d108      	bne.n	8000e18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e16:	e007      	b.n	8000e28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	60da      	str	r2, [r3, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e039      	b.n	8000eba <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d106      	bne.n	8000e60 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f00a ff0e 	bl	800bc7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2202      	movs	r2, #2
 8000e64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e84:	f023 0107 	bic.w	r1, r3, #7
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_DMA2D_Init+0x90>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68d1      	ldr	r1, [r2, #12]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	430b      	orrs	r3, r1
 8000ea8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	ffffc000 	.word	0xffffc000

08000ec8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d026      	beq.n	8000f38 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d021      	beq.n	8000f38 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f02:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f08:	f043 0201 	orr.w	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2201      	movs	r2, #1
 8000f16:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0320 	and.w	r3, r3, #32
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d026      	beq.n	8000f90 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000f5a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2220      	movs	r2, #32
 8000f62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f68:	f043 0202 	orr.w	r2, r3, #2
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2204      	movs	r2, #4
 8000f74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d026      	beq.n	8000fe8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d021      	beq.n	8000fe8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2208      	movs	r2, #8
 8000fba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc0:	f043 0204 	orr.w	r2, r3, #4
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2204      	movs	r2, #4
 8000fcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d013      	beq.n	800101a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00e      	beq.n	800101a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800100a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2204      	movs	r2, #4
 8001012:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f853 	bl	80010c0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d024      	beq.n	800106e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800102a:	2b00      	cmp	r3, #0
 800102c:	d01f      	beq.n	800106e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800103c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2202      	movs	r2, #2
 8001044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	2b00      	cmp	r3, #0
 8001076:	d01f      	beq.n	80010b8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01a      	beq.n	80010b8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001090:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2210      	movs	r2, #16
 8001098:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f80e 	bl	80010d4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_DMA2D_ConfigLayer+0x20>
 8001104:	2302      	movs	r3, #2
 8001106:	e079      	b.n	80011fc <HAL_DMA2D_ConfigLayer+0x114>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	3318      	adds	r3, #24
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	4313      	orrs	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001132:	4b35      	ldr	r3, [pc, #212]	@ (8001208 <HAL_DMA2D_ConfigLayer+0x120>)
 8001134:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b0a      	cmp	r3, #10
 800113c:	d003      	beq.n	8001146 <HAL_DMA2D_ConfigLayer+0x5e>
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b09      	cmp	r3, #9
 8001144:	d107      	bne.n	8001156 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	e005      	b.n	8001162 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	061b      	lsls	r3, r3, #24
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	4313      	orrs	r3, r2
 8001160:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d120      	bne.n	80011aa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	ea02 0103 	and.w	r1, r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	430a      	orrs	r2, r1
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d003      	beq.n	800119a <HAL_DMA2D_ConfigLayer+0xb2>
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b09      	cmp	r3, #9
 8001198:	d127      	bne.n	80011ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80011a8:	e01f      	b.n	80011ea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	ea02 0103 	and.w	r1, r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	430a      	orrs	r2, r1
 80011c0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b0a      	cmp	r3, #10
 80011d2:	d003      	beq.n	80011dc <HAL_DMA2D_ConfigLayer+0xf4>
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b09      	cmp	r3, #9
 80011da:	d106      	bne.n	80011ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80011e8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	ff03000f 	.word	0xff03000f

0800120c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e086      	b.n	800132c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2220      	movs	r2, #32
 800122c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f00a fd97 	bl	800bd64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b3f      	ldr	r3, [pc, #252]	@ (8001334 <HAL_ETH_Init+0x128>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a3e      	ldr	r2, [pc, #248]	@ (8001334 <HAL_ETH_Init+0x128>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <HAL_ETH_Init+0x128>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <HAL_ETH_Init+0x12c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a39      	ldr	r2, [pc, #228]	@ (8001338 <HAL_ETH_Init+0x12c>)
 8001254:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001258:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <HAL_ETH_Init+0x12c>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4935      	ldr	r1, [pc, #212]	@ (8001338 <HAL_ETH_Init+0x12c>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001268:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <HAL_ETH_Init+0x12c>)
 800126a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001282:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001284:	f7ff f826 	bl	80002d4 <HAL_GetTick>
 8001288:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800128a:	e011      	b.n	80012b0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800128c:	f7ff f822 	bl	80002d4 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800129a:	d909      	bls.n	80012b0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2204      	movs	r2, #4
 80012a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	22e0      	movs	r2, #224	@ 0xe0
 80012a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e03d      	b.n	800132c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1e4      	bne.n	800128c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f97a 	bl	80015bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fa25 	bl	8001718 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fa7b 	bl	80017ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f9e3 	bl	80016a8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_ETH_Init+0x130>)
 8001300:	430b      	orrs	r3, r1
 8001302:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001316:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2210      	movs	r2, #16
 8001326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	40013800 	.word	0x40013800
 800133c:	00020060 	.word	0x00020060

08001340 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4b53      	ldr	r3, [pc, #332]	@ (80014a4 <ETH_SetMACConfig+0x164>)
 8001356:	4013      	ands	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	7b9b      	ldrb	r3, [r3, #14]
 800135e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	7c12      	ldrb	r2, [r2, #16]
 8001364:	2a00      	cmp	r2, #0
 8001366:	d102      	bne.n	800136e <ETH_SetMACConfig+0x2e>
 8001368:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800136c:	e000      	b.n	8001370 <ETH_SetMACConfig+0x30>
 800136e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001370:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	7c52      	ldrb	r2, [r2, #17]
 8001376:	2a00      	cmp	r2, #0
 8001378:	d102      	bne.n	8001380 <ETH_SetMACConfig+0x40>
 800137a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800137e:	e000      	b.n	8001382 <ETH_SetMACConfig+0x42>
 8001380:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001382:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	7fdb      	ldrb	r3, [r3, #31]
 800138e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001390:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001396:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	7f92      	ldrb	r2, [r2, #30]
 800139c:	2a00      	cmp	r2, #0
 800139e:	d102      	bne.n	80013a6 <ETH_SetMACConfig+0x66>
 80013a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a4:	e000      	b.n	80013a8 <ETH_SetMACConfig+0x68>
 80013a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80013a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	7f1b      	ldrb	r3, [r3, #28]
 80013ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d102      	bne.n	80013d0 <ETH_SetMACConfig+0x90>
 80013ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ce:	e000      	b.n	80013d2 <ETH_SetMACConfig+0x92>
 80013d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	7bdb      	ldrb	r3, [r3, #15]
 80013d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013ea:	4313      	orrs	r3, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001402:	2001      	movs	r0, #1
 8001404:	f7fe ff72 	bl	80002ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001426:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800142e:	2a00      	cmp	r2, #0
 8001430:	d101      	bne.n	8001436 <ETH_SetMACConfig+0xf6>
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	e000      	b.n	8001438 <ETH_SetMACConfig+0xf8>
 8001436:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001438:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800143e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001446:	2a01      	cmp	r2, #1
 8001448:	d101      	bne.n	800144e <ETH_SetMACConfig+0x10e>
 800144a:	2208      	movs	r2, #8
 800144c:	e000      	b.n	8001450 <ETH_SetMACConfig+0x110>
 800144e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001450:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001458:	2a01      	cmp	r2, #1
 800145a:	d101      	bne.n	8001460 <ETH_SetMACConfig+0x120>
 800145c:	2204      	movs	r2, #4
 800145e:	e000      	b.n	8001462 <ETH_SetMACConfig+0x122>
 8001460:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001462:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800146a:	2a01      	cmp	r2, #1
 800146c:	d101      	bne.n	8001472 <ETH_SetMACConfig+0x132>
 800146e:	2202      	movs	r2, #2
 8001470:	e000      	b.n	8001474 <ETH_SetMACConfig+0x134>
 8001472:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001474:	4313      	orrs	r3, r2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148c:	2001      	movs	r0, #1
 800148e:	f7fe ff2d 	bl	80002ec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	fd20810f 	.word	0xfd20810f

080014a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <ETH_SetDMAConfig+0x110>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	7b1b      	ldrb	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <ETH_SetDMAConfig+0x2c>
 80014ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014d2:	e000      	b.n	80014d6 <ETH_SetDMAConfig+0x2e>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	7f52      	ldrb	r2, [r2, #29]
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d102      	bne.n	80014ec <ETH_SetDMAConfig+0x44>
 80014e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014ea:	e000      	b.n	80014ee <ETH_SetDMAConfig+0x46>
 80014ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	7b9b      	ldrb	r3, [r3, #14]
 80014f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	7f1b      	ldrb	r3, [r3, #28]
 8001502:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7f9b      	ldrb	r3, [r3, #30]
 800150a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800150c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001512:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800151a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151c:	4313      	orrs	r3, r2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800153e:	2001      	movs	r0, #1
 8001540:	f7fe fed4 	bl	80002ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800155c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001562:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001568:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001570:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001572:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001578:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800157a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001580:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800158a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800158e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800159c:	2001      	movs	r0, #1
 800159e:	f7fe fea5 	bl	80002ec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	f8de3f23 	.word	0xf8de3f23

080015bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0a6      	sub	sp, #152	@ 0x98
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015fe:	2300      	movs	r3, #0
 8001600:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001608:	2300      	movs	r3, #0
 800160a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001624:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001628:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800162a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800162e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001636:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800163a:	4619      	mov	r1, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fe7f 	bl	8001340 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001642:	2301      	movs	r3, #1
 8001644:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001646:	2301      	movs	r3, #1
 8001648:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001650:	2301      	movs	r3, #1
 8001652:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800166e:	2301      	movs	r3, #1
 8001670:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001672:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001676:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001678:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800167c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800167e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001682:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff05 	bl	80014a8 <ETH_SetDMAConfig>
}
 800169e:	bf00      	nop
 80016a0:	3798      	adds	r7, #152	@ 0x98
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3305      	adds	r3, #5
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	3204      	adds	r2, #4
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <ETH_MACAddressConfig+0x68>)
 80016ca:	4413      	add	r3, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3303      	adds	r3, #3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3302      	adds	r3, #2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	4313      	orrs	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <ETH_MACAddressConfig+0x6c>)
 80016fa:	4413      	add	r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40028040 	.word	0x40028040
 8001714:	40028044 	.word	0x40028044

08001718 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e03e      	b.n	80017a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68d9      	ldr	r1, [r3, #12]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	3206      	adds	r2, #6
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d80c      	bhi.n	8001788 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	e004      	b.n	8001792 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d9bd      	bls.n	8001726 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017bc:	611a      	str	r2, [r3, #16]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e048      	b.n	800186a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6919      	ldr	r1, [r3, #16]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001814:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	3212      	adds	r2, #18
 8001836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d80c      	bhi.n	800185a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6919      	ldr	r1, [r3, #16]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	e004      	b.n	8001864 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d9b3      	bls.n	80017d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691a      	ldr	r2, [r3, #16]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189a:	60da      	str	r2, [r3, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	@ 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e175      	b.n	8001bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8164 	bne.w	8001bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x56>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80be 	beq.w	8001bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b66      	ldr	r3, [pc, #408]	@ (8001bcc <HAL_GPIO_Init+0x324>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	4a65      	ldr	r2, [pc, #404]	@ (8001bcc <HAL_GPIO_Init+0x324>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3e:	4b63      	ldr	r3, [pc, #396]	@ (8001bcc <HAL_GPIO_Init+0x324>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a4a:	4a61      	ldr	r2, [pc, #388]	@ (8001bd0 <HAL_GPIO_Init+0x328>)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a58      	ldr	r2, [pc, #352]	@ (8001bd4 <HAL_GPIO_Init+0x32c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d037      	beq.n	8001ae6 <HAL_GPIO_Init+0x23e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a57      	ldr	r2, [pc, #348]	@ (8001bd8 <HAL_GPIO_Init+0x330>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d031      	beq.n	8001ae2 <HAL_GPIO_Init+0x23a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a56      	ldr	r2, [pc, #344]	@ (8001bdc <HAL_GPIO_Init+0x334>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d02b      	beq.n	8001ade <HAL_GPIO_Init+0x236>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a55      	ldr	r2, [pc, #340]	@ (8001be0 <HAL_GPIO_Init+0x338>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d025      	beq.n	8001ada <HAL_GPIO_Init+0x232>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a54      	ldr	r2, [pc, #336]	@ (8001be4 <HAL_GPIO_Init+0x33c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d01f      	beq.n	8001ad6 <HAL_GPIO_Init+0x22e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a53      	ldr	r2, [pc, #332]	@ (8001be8 <HAL_GPIO_Init+0x340>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x22a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	@ (8001bec <HAL_GPIO_Init+0x344>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x226>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a51      	ldr	r2, [pc, #324]	@ (8001bf0 <HAL_GPIO_Init+0x348>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x222>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a50      	ldr	r2, [pc, #320]	@ (8001bf4 <HAL_GPIO_Init+0x34c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x21e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf8 <HAL_GPIO_Init+0x350>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x21a>
 8001abe:	2309      	movs	r3, #9
 8001ac0:	e012      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	e010      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	e00e      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00c      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x240>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001af8:	4935      	ldr	r1, [pc, #212]	@ (8001bd0 <HAL_GPIO_Init+0x328>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b3d      	ldr	r3, [pc, #244]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a34      	ldr	r2, [pc, #208]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a29      	ldr	r2, [pc, #164]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	@ (8001bfc <HAL_GPIO_Init+0x354>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f ae86 	bls.w	80018c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	40022400 	.word	0x40022400
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af02      	add	r7, sp, #8
 8001c68:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e059      	b.n	8001d28 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f011 f8d6 	bl	8012e40 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ca2:	d102      	bne.n	8001caa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f008 fb45 	bl	800a33e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7c1a      	ldrb	r2, [r3, #16]
 8001cbc:	f88d 2000 	strb.w	r2, [sp]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc4:	f008 fad0 	bl	800a268 <USB_CoreInit>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e026      	b.n	8001d28 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f008 fb3d 	bl	800a360 <USB_SetCurrentMode>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e017      	b.n	8001d28 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7c1a      	ldrb	r2, [r3, #16]
 8001d00:	f88d 2000 	strb.w	r2, [sp]
 8001d04:	3304      	adds	r3, #4
 8001d06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d08:	f008 fce6 	bl	800a6d8 <USB_HostInit>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e004      	b.n	8001d28 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	@ 0x2c
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	4608      	mov	r0, r1
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4603      	mov	r3, r0
 8001d40:	70fb      	strb	r3, [r7, #3]
 8001d42:	460b      	mov	r3, r1
 8001d44:	70bb      	strb	r3, [r7, #2]
 8001d46:	4613      	mov	r3, r2
 8001d48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001d4a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d4c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_HCD_HC_Init+0x2c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e09d      	b.n	8001e98 <HAL_HCD_HC_Init+0x168>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3319      	adds	r3, #25
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d78:	78fa      	ldrb	r2, [r7, #3]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	3314      	adds	r3, #20
 8001d88:	787a      	ldrb	r2, [r7, #1]
 8001d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	3315      	adds	r3, #21
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	1a9b      	subs	r3, r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3326      	adds	r3, #38	@ 0x26
 8001db0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001db4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001dbe:	b2d8      	uxtb	r0, r3
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	3316      	adds	r3, #22
 8001dce:	4602      	mov	r2, r0
 8001dd0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fba4 	bl	8002524 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001ddc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da0a      	bge.n	8001dfa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3317      	adds	r3, #23
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e009      	b.n	8001e0e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3317      	adds	r3, #23
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f008 fdb8 	bl	800a988 <USB_GetHostSpeed>
 8001e18:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d10b      	bne.n	8001e3a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_HCD_HC_Init+0x10a>
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d104      	bne.n	8001e3a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2bbc      	cmp	r3, #188	@ 0xbc
 8001e34:	d901      	bls.n	8001e3a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001e36:	23bc      	movs	r3, #188	@ 0xbc
 8001e38:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	1a9b      	subs	r3, r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3318      	adds	r3, #24
 8001e4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	b298      	uxth	r0, r3
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	3328      	adds	r3, #40	@ 0x28
 8001e64:	4602      	mov	r2, r0
 8001e66:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	787c      	ldrb	r4, [r7, #1]
 8001e72:	78ba      	ldrb	r2, [r7, #2]
 8001e74:	78f9      	ldrb	r1, [r7, #3]
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4623      	mov	r3, r4
 8001e86:	f008 fda7 	bl	800a9d8 <USB_HC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	70fb      	strb	r3, [r7, #3]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	70bb      	strb	r3, [r7, #2]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3317      	adds	r3, #23
 8001eca:	78ba      	ldrb	r2, [r7, #2]
 8001ecc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	3326      	adds	r3, #38	@ 0x26
 8001ede:	787a      	ldrb	r2, [r7, #1]
 8001ee0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ee2:	7c3b      	ldrb	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d114      	bne.n	8001f12 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	332a      	adds	r3, #42	@ 0x2a
 8001ef8:	2203      	movs	r2, #3
 8001efa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	3319      	adds	r3, #25
 8001f0c:	7f3a      	ldrb	r2, [r7, #28]
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e009      	b.n	8001f26 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	332a      	adds	r3, #42	@ 0x2a
 8001f22:	2202      	movs	r2, #2
 8001f24:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f26:	787b      	ldrb	r3, [r7, #1]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	f200 8102 	bhi.w	8002132 <HAL_HCD_HC_SubmitRequest+0x292>
 8001f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f34 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	0800211d 	.word	0x0800211d
 8001f3c:	08002009 	.word	0x08002009
 8001f40:	08002093 	.word	0x08002093
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001f44:	7c3b      	ldrb	r3, [r7, #16]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	f040 80f5 	bne.w	8002136 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001f4c:	78bb      	ldrb	r3, [r7, #2]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d12d      	bne.n	8001fae <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001f52:	8b3b      	ldrh	r3, [r7, #24]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	333d      	adds	r3, #61	@ 0x3d
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	333d      	adds	r3, #61	@ 0x3d
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10a      	bne.n	8001f98 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	332a      	adds	r3, #42	@ 0x2a
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001f96:	e0ce      	b.n	8002136 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	332a      	adds	r3, #42	@ 0x2a
 8001fa8:	2202      	movs	r2, #2
 8001faa:	701a      	strb	r2, [r3, #0]
      break;
 8001fac:	e0c3      	b.n	8002136 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	331a      	adds	r3, #26
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f040 80b8 	bne.w	8002136 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	333c      	adds	r3, #60	@ 0x3c
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	332a      	adds	r3, #42	@ 0x2a
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
      break;
 8001ff0:	e0a1      	b.n	8002136 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	332a      	adds	r3, #42	@ 0x2a
 8002002:	2202      	movs	r2, #2
 8002004:	701a      	strb	r2, [r3, #0]
      break;
 8002006:	e096      	b.n	8002136 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002008:	78bb      	ldrb	r3, [r7, #2]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d120      	bne.n	8002050 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	333d      	adds	r3, #61	@ 0x3d
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	332a      	adds	r3, #42	@ 0x2a
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002038:	e07e      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	332a      	adds	r3, #42	@ 0x2a
 800204a:	2202      	movs	r2, #2
 800204c:	701a      	strb	r2, [r3, #0]
      break;
 800204e:	e073      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	333c      	adds	r3, #60	@ 0x3c
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	332a      	adds	r3, #42	@ 0x2a
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
      break;
 800207a:	e05d      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	332a      	adds	r3, #42	@ 0x2a
 800208c:	2202      	movs	r2, #2
 800208e:	701a      	strb	r2, [r3, #0]
      break;
 8002090:	e052      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002092:	78bb      	ldrb	r3, [r7, #2]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d120      	bne.n	80020da <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	333d      	adds	r3, #61	@ 0x3d
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	332a      	adds	r3, #42	@ 0x2a
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020c2:	e039      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	332a      	adds	r3, #42	@ 0x2a
 80020d4:	2202      	movs	r2, #2
 80020d6:	701a      	strb	r2, [r3, #0]
      break;
 80020d8:	e02e      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	333c      	adds	r3, #60	@ 0x3c
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	332a      	adds	r3, #42	@ 0x2a
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
      break;
 8002104:	e018      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	332a      	adds	r3, #42	@ 0x2a
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
      break;
 800211a:	e00d      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	332a      	adds	r3, #42	@ 0x2a
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
      break;
 8002130:	e002      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002132:	bf00      	nop
 8002134:	e000      	b.n	8002138 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002136:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	332c      	adds	r3, #44	@ 0x2c
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	8b39      	ldrh	r1, [r7, #24]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4403      	add	r3, r0
 800215c:	3334      	adds	r3, #52	@ 0x34
 800215e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	334c      	adds	r3, #76	@ 0x4c
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3338      	adds	r3, #56	@ 0x38
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	3315      	adds	r3, #21
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	334d      	adds	r3, #77	@ 0x4d
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4613      	mov	r3, r2
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	1a9b      	subs	r3, r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	3310      	adds	r3, #16
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	1d19      	adds	r1, r3, #4
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	799b      	ldrb	r3, [r3, #6]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f008 fd30 	bl	800ac30 <USB_HC_StartXfer>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop

080021dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f008 fa2a 	bl	800a64c <USB_GetMode>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f040 80fb 	bne.w	80023f6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f008 f9ed 	bl	800a5e4 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80f1 	beq.w	80023f4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f008 f9e4 	bl	800a5e4 <USB_ReadInterrupts>
 800221c:	4603      	mov	r3, r0
 800221e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002222:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002226:	d104      	bne.n	8002232 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002230:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f008 f9d4 	bl	800a5e4 <USB_ReadInterrupts>
 800223c:	4603      	mov	r3, r0
 800223e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002246:	d104      	bne.n	8002252 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002250:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f008 f9c4 	bl	800a5e4 <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002262:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002266:	d104      	bne.n	8002272 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002270:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f008 f9b4 	bl	800a5e4 <USB_ReadInterrupts>
 800227c:	4603      	mov	r3, r0
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d103      	bne.n	800228e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2202      	movs	r2, #2
 800228c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f008 f9a6 	bl	800a5e4 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800229e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022a2:	d120      	bne.n	80022e6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80022ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d113      	bne.n	80022e6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022be:	2110      	movs	r1, #16
 80022c0:	6938      	ldr	r0, [r7, #16]
 80022c2:	f008 f899 	bl	800a3f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022c6:	6938      	ldr	r0, [r7, #16]
 80022c8:	f008 f8c8 	bl	800a45c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7a5b      	ldrb	r3, [r3, #9]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d105      	bne.n	80022e0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f008 fab4 	bl	800a848 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f010 fe3b 	bl	8012f5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f008 f97a 	bl	800a5e4 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022fa:	d102      	bne.n	8002302 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f001 fd4d 	bl	8003d9c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f008 f96c 	bl	800a5e4 <USB_ReadInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b08      	cmp	r3, #8
 8002314:	d106      	bne.n	8002324 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f010 fe04 	bl	8012f24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2208      	movs	r2, #8
 8002322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f008 f95b 	bl	800a5e4 <USB_ReadInterrupts>
 800232e:	4603      	mov	r3, r0
 8002330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002338:	d139      	bne.n	80023ae <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f008 fef0 	bl	800b124 <USB_HC_ReadInterrupt>
 8002344:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e025      	b.n	8002398 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d018      	beq.n	8002392 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002372:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002376:	d106      	bne.n	8002386 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	4619      	mov	r1, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f905 	bl	800258e <HCD_HC_IN_IRQHandler>
 8002384:	e005      	b.n	8002392 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 ff67 	bl	8003260 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3301      	adds	r3, #1
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	795b      	ldrb	r3, [r3, #5]
 800239c:	461a      	mov	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d3d3      	bcc.n	800234c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f008 f916 	bl	800a5e4 <USB_ReadInterrupts>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d101      	bne.n	80023c6 <HAL_HCD_IRQHandler+0x1ea>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_HCD_IRQHandler+0x1ec>
 80023c6:	2300      	movs	r3, #0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d014      	beq.n	80023f6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699a      	ldr	r2, [r3, #24]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0210 	bic.w	r2, r2, #16
 80023da:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f001 fbfe 	bl	8003bde <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0210 	orr.w	r2, r2, #16
 80023f0:	619a      	str	r2, [r3, #24]
 80023f2:	e000      	b.n	80023f6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80023f4:	bf00      	nop
    }
  }
}
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_HCD_Start+0x16>
 800240e:	2302      	movs	r3, #2
 8002410:	e013      	b.n	800243a <HAL_HCD_Start+0x3e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2101      	movs	r1, #1
 8002420:	4618      	mov	r0, r3
 8002422:	f008 fa78 	bl	800a916 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f007 ff76 	bl	800a31c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_HCD_Stop+0x16>
 8002454:	2302      	movs	r3, #2
 8002456:	e00d      	b.n	8002474 <HAL_HCD_Stop+0x32>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f008 ffcb 	bl	800b400 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f008 fa1a 	bl	800a8c2 <USB_ResetPort>
 800248e:	4603      	mov	r3, r0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	334c      	adds	r3, #76	@ 0x4c
 80024b4:	781b      	ldrb	r3, [r3, #0]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3338      	adds	r3, #56	@ 0x38
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f008 fa5c 	bl	800a9b6 <USB_GetCurrentFrame>
 80024fe:	4603      	mov	r3, r0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f008 fa37 	bl	800a988 <USB_GetHostSpeed>
 800251a:	4603      	mov	r3, r0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	331a      	adds	r3, #26
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	331b      	adds	r3, #27
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3325      	adds	r3, #37	@ 0x25
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3324      	adds	r3, #36	@ 0x24
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f008 f82c 	bl	800a60a <USB_ReadChInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d11a      	bne.n	80025f2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c8:	461a      	mov	r2, r3
 80025ca:	2304      	movs	r3, #4
 80025cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	334d      	adds	r3, #77	@ 0x4d
 80025de:	2207      	movs	r2, #7
 80025e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f008 fdab 	bl	800b146 <USB_HC_Halt>
 80025f0:	e09e      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f008 f805 	bl	800a60a <USB_ReadChInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260a:	d11b      	bne.n	8002644 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800261e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	334d      	adds	r3, #77	@ 0x4d
 8002630:	2208      	movs	r2, #8
 8002632:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f008 fd82 	bl	800b146 <USB_HC_Halt>
 8002642:	e075      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f007 ffdc 	bl	800a60a <USB_ReadChInterrupts>
 8002652:	4603      	mov	r3, r0
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d11a      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002668:	461a      	mov	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	334d      	adds	r3, #77	@ 0x4d
 800267e:	2206      	movs	r2, #6
 8002680:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f008 fd5b 	bl	800b146 <USB_HC_Halt>
 8002690:	e04e      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f007 ffb5 	bl	800a60a <USB_ReadChInterrupts>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026aa:	d11b      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	334d      	adds	r3, #77	@ 0x4d
 80026d0:	2209      	movs	r2, #9
 80026d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f008 fd32 	bl	800b146 <USB_HC_Halt>
 80026e2:	e025      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f007 ff8c 	bl	800a60a <USB_ReadChInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f8:	2b80      	cmp	r3, #128	@ 0x80
 80026fa:	d119      	bne.n	8002730 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002708:	461a      	mov	r2, r3
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	334d      	adds	r3, #77	@ 0x4d
 800271e:	2207      	movs	r2, #7
 8002720:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f008 fd0b 	bl	800b146 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f007 ff66 	bl	800a60a <USB_ReadChInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002748:	d112      	bne.n	8002770 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f008 fcf7 	bl	800b146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800276a:	6093      	str	r3, [r2, #8]
 800276c:	f000 bd75 	b.w	800325a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f007 ff46 	bl	800a60a <USB_ReadChInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	f040 8128 	bne.w	80029da <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	2320      	movs	r3, #32
 800279a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	331b      	adds	r3, #27
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d119      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	331b      	adds	r3, #27
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	0151      	lsls	r1, r2, #5
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	440a      	add	r2, r1
 80027dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	799b      	ldrb	r3, [r3, #6]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01b      	beq.n	8002826 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3330      	adds	r3, #48	@ 0x30
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	1ac9      	subs	r1, r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4403      	add	r3, r0
 8002822:	3338      	adds	r3, #56	@ 0x38
 8002824:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	334d      	adds	r3, #77	@ 0x4d
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3344      	adds	r3, #68	@ 0x44
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	2301      	movs	r3, #1
 800285e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3326      	adds	r3, #38	@ 0x26
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3326      	adds	r3, #38	@ 0x26
 8002886:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002888:	2b02      	cmp	r3, #2
 800288a:	d110      	bne.n	80028ae <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f008 fc56 	bl	800b146 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	2310      	movs	r3, #16
 80028aa:	6093      	str	r3, [r2, #8]
 80028ac:	e03d      	b.n	800292a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	3326      	adds	r3, #38	@ 0x26
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d00a      	beq.n	80028da <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	3326      	adds	r3, #38	@ 0x26
 80028d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d127      	bne.n	800292a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028f8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	334c      	adds	r3, #76	@ 0x4c
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	334c      	adds	r3, #76	@ 0x4c
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f010 fb27 	bl	8012f78 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	799b      	ldrb	r3, [r3, #6]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d13b      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3338      	adds	r3, #56	@ 0x38
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4403      	add	r3, r0
 8002952:	3328      	adds	r3, #40	@ 0x28
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	440b      	add	r3, r1
 8002958:	1e59      	subs	r1, r3, #1
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4403      	add	r3, r0
 8002968:	3328      	adds	r3, #40	@ 0x28
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8470 	beq.w	800325a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	333c      	adds	r3, #60	@ 0x3c
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	f083 0301 	eor.w	r3, r3, #1
 8002992:	b2d8      	uxtb	r0, r3
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	333c      	adds	r3, #60	@ 0x3c
 80029a2:	4602      	mov	r2, r0
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	f000 bc58 	b.w	800325a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	333c      	adds	r3, #60	@ 0x3c
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	f083 0301 	eor.w	r3, r3, #1
 80029c2:	b2d8      	uxtb	r0, r3
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	333c      	adds	r3, #60	@ 0x3c
 80029d2:	4602      	mov	r2, r0
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	f000 bc40 	b.w	800325a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f007 fe11 	bl	800a60a <USB_ReadChInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d131      	bne.n	8002a56 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	2320      	movs	r3, #32
 8002a02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	331a      	adds	r3, #26
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	f040 841f 	bne.w	800325a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	331b      	adds	r3, #27
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334d      	adds	r3, #77	@ 0x4d
 8002a40:	2203      	movs	r2, #3
 8002a42:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f008 fb7a 	bl	800b146 <USB_HC_Halt>
 8002a52:	f000 bc02 	b.w	800325a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f007 fdd3 	bl	800a60a <USB_ReadChInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	f040 8305 	bne.w	800307a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2302      	movs	r3, #2
 8002a80:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	334d      	adds	r3, #77	@ 0x4d
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d114      	bne.n	8002ac2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	334d      	adds	r3, #77	@ 0x4d
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	334c      	adds	r3, #76	@ 0x4c
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e2cc      	b.n	800305c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a9b      	subs	r3, r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	334d      	adds	r3, #77	@ 0x4d
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b06      	cmp	r3, #6
 8002ad6:	d114      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334d      	adds	r3, #77	@ 0x4d
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	334c      	adds	r3, #76	@ 0x4c
 8002afc:	2205      	movs	r2, #5
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	e2ac      	b.n	800305c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	334d      	adds	r3, #77	@ 0x4d
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b07      	cmp	r3, #7
 8002b16:	d00b      	beq.n	8002b30 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	334d      	adds	r3, #77	@ 0x4d
 8002b28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	f040 80a6 	bne.w	8002c7c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	334d      	adds	r3, #77	@ 0x4d
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	3344      	adds	r3, #68	@ 0x44
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4403      	add	r3, r0
 8002b64:	3344      	adds	r3, #68	@ 0x44
 8002b66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3344      	adds	r3, #68	@ 0x44
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d943      	bls.n	8002c06 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3344      	adds	r3, #68	@ 0x44
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	331a      	adds	r3, #26
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d123      	bne.n	8002bf0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	331b      	adds	r3, #27
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	331c      	adds	r3, #28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	0151      	lsls	r1, r2, #5
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	440a      	add	r2, r1
 8002be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bee:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334c      	adds	r3, #76	@ 0x4c
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c04:	e229      	b.n	800305a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	334c      	adds	r3, #76	@ 0x4c
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3326      	adds	r3, #38	@ 0x26
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3326      	adds	r3, #38	@ 0x26
 8002c40:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	f040 8209 	bne.w	800305a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c5e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c66:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c7a:	e1ee      	b.n	800305a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334d      	adds	r3, #77	@ 0x4d
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	f040 80c8 	bne.w	8002e24 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334d      	adds	r3, #77	@ 0x4d
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	331b      	adds	r3, #27
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f040 81ce 	bne.w	800305c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3326      	adds	r3, #38	@ 0x26
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d16b      	bne.n	8002dae <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3348      	adds	r3, #72	@ 0x48
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1c59      	adds	r1, r3, #1
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3348      	adds	r3, #72	@ 0x48
 8002cf8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3348      	adds	r3, #72	@ 0x48
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d943      	bls.n	8002d98 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3348      	adds	r3, #72	@ 0x48
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	331b      	adds	r3, #27
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3344      	adds	r3, #68	@ 0x44
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d809      	bhi.n	8002d62 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	331c      	adds	r3, #28
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d80:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	334c      	adds	r3, #76	@ 0x4c
 8002d92:	2204      	movs	r2, #4
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e014      	b.n	8002dc2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	334c      	adds	r3, #76	@ 0x4c
 8002da8:	2202      	movs	r2, #2
 8002daa:	701a      	strb	r2, [r3, #0]
 8002dac:	e009      	b.n	8002dc2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	334c      	adds	r3, #76	@ 0x4c
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3326      	adds	r3, #38	@ 0x26
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00b      	beq.n	8002df0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3326      	adds	r3, #38	@ 0x26
 8002de8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	f040 8136 	bne.w	800305c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e06:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e0e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e11b      	b.n	800305c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	334d      	adds	r3, #77	@ 0x4d
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	f040 8081 	bne.w	8002f3e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	334d      	adds	r3, #77	@ 0x4d
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	331b      	adds	r3, #27
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	f040 80fa 	bne.w	800305c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	334c      	adds	r3, #76	@ 0x4c
 8002e78:	2202      	movs	r2, #2
 8002e7a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	0151      	lsls	r1, r2, #5
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	440a      	add	r2, r1
 8002e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	0151      	lsls	r1, r2, #5
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eba:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ed6:	f023 0320 	bic.w	r3, r3, #32
 8002eda:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	3326      	adds	r3, #38	@ 0x26
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3326      	adds	r3, #38	@ 0x26
 8002f02:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	f040 80a9 	bne.w	800305c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f20:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f28:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e08e      	b.n	800305c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	334d      	adds	r3, #77	@ 0x4d
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d143      	bne.n	8002fdc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	334d      	adds	r3, #77	@ 0x4d
 8002f64:	2202      	movs	r2, #2
 8002f66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334c      	adds	r3, #76	@ 0x4c
 8002f78:	2202      	movs	r2, #2
 8002f7a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3326      	adds	r3, #38	@ 0x26
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3326      	adds	r3, #38	@ 0x26
 8002fa2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d159      	bne.n	800305c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fbe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fc6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e03f      	b.n	800305c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	334d      	adds	r3, #77	@ 0x4d
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d126      	bne.n	8003040 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	334d      	adds	r3, #77	@ 0x4d
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3344      	adds	r3, #68	@ 0x44
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4403      	add	r3, r0
 8003026:	3344      	adds	r3, #68	@ 0x44
 8003028:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	334c      	adds	r3, #76	@ 0x4c
 800303a:	2204      	movs	r2, #4
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e00d      	b.n	800305c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	334d      	adds	r3, #77	@ 0x4d
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	f000 8100 	beq.w	8003258 <HCD_HC_IN_IRQHandler+0xcca>
 8003058:	e000      	b.n	800305c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800305a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	334c      	adds	r3, #76	@ 0x4c
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	4619      	mov	r1, r3
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f00f ff80 	bl	8012f78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003078:	e0ef      	b.n	800325a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f007 fac1 	bl	800a60a <USB_ReadChInterrupts>
 8003088:	4603      	mov	r3, r0
 800308a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800308e:	2b40      	cmp	r3, #64	@ 0x40
 8003090:	d12f      	bne.n	80030f2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309e:	461a      	mov	r2, r3
 80030a0:	2340      	movs	r3, #64	@ 0x40
 80030a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	334d      	adds	r3, #77	@ 0x4d
 80030b4:	2205      	movs	r2, #5
 80030b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	331a      	adds	r3, #26
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3344      	adds	r3, #68	@ 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f008 f82b 	bl	800b146 <USB_HC_Halt>
 80030f0:	e0b3      	b.n	800325a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f007 fa85 	bl	800a60a <USB_ReadChInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	2b10      	cmp	r3, #16
 8003108:	f040 80a7 	bne.w	800325a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3326      	adds	r3, #38	@ 0x26
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b03      	cmp	r3, #3
 8003120:	d11b      	bne.n	800315a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3344      	adds	r3, #68	@ 0x44
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	334d      	adds	r3, #77	@ 0x4d
 8003146:	2204      	movs	r2, #4
 8003148:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f007 fff7 	bl	800b146 <USB_HC_Halt>
 8003158:	e03f      	b.n	80031da <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3326      	adds	r3, #38	@ 0x26
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3326      	adds	r3, #38	@ 0x26
 8003180:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003182:	2b02      	cmp	r3, #2
 8003184:	d129      	bne.n	80031da <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3344      	adds	r3, #68	@ 0x44
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	799b      	ldrb	r3, [r3, #6]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HCD_HC_IN_IRQHandler+0xc2a>
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	331b      	adds	r3, #27
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d110      	bne.n	80031da <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	334d      	adds	r3, #77	@ 0x4d
 80031c8:	2204      	movs	r2, #4
 80031ca:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f007 ffb6 	bl	800b146 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	331b      	adds	r3, #27
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d129      	bne.n	8003244 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	331b      	adds	r3, #27
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	0151      	lsls	r1, r2, #5
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	440a      	add	r2, r1
 800321a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800321e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003222:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	0151      	lsls	r1, r2, #5
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	440a      	add	r2, r1
 800323a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800323e:	f043 0320 	orr.w	r3, r3, #32
 8003242:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003250:	461a      	mov	r2, r3
 8003252:	2310      	movs	r3, #16
 8003254:	6093      	str	r3, [r2, #8]
 8003256:	e000      	b.n	800325a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003258:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f007 f9c3 	bl	800a60a <USB_ReadChInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b04      	cmp	r3, #4
 800328c:	d11b      	bne.n	80032c6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329a:	461a      	mov	r2, r3
 800329c:	2304      	movs	r3, #4
 800329e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	334d      	adds	r3, #77	@ 0x4d
 80032b0:	2207      	movs	r2, #7
 80032b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f007 ff42 	bl	800b146 <USB_HC_Halt>
 80032c2:	f000 bc89 	b.w	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f007 f99b 	bl	800a60a <USB_ReadChInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b20      	cmp	r3, #32
 80032dc:	f040 8082 	bne.w	80033e4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	2320      	movs	r3, #32
 80032f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3319      	adds	r3, #25
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d124      	bne.n	8003352 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	3319      	adds	r3, #25
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334c      	adds	r3, #76	@ 0x4c
 800332c:	2202      	movs	r2, #2
 800332e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334d      	adds	r3, #77	@ 0x4d
 8003340:	2203      	movs	r2, #3
 8003342:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f007 fefa 	bl	800b146 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	331a      	adds	r3, #26
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 8437 	bne.w	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	331b      	adds	r3, #27
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f040 842b 	bne.w	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3326      	adds	r3, #38	@ 0x26
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d009      	beq.n	80033ac <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	331b      	adds	r3, #27
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	334d      	adds	r3, #77	@ 0x4d
 80033bc:	2203      	movs	r2, #3
 80033be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f007 febc 	bl	800b146 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3344      	adds	r3, #68	@ 0x44
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	e3f9      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f007 f90c 	bl	800a60a <USB_ReadChInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033fc:	d111      	bne.n	8003422 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340a:	461a      	mov	r2, r3
 800340c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003410:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f007 fe93 	bl	800b146 <USB_HC_Halt>
 8003420:	e3da      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f007 f8ed 	bl	800a60a <USB_ReadChInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d168      	bne.n	800350c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3344      	adds	r3, #68	@ 0x44
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f007 f8d7 	bl	800a60a <USB_ReadChInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003462:	2b40      	cmp	r3, #64	@ 0x40
 8003464:	d112      	bne.n	800348c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3319      	adds	r3, #25
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003486:	461a      	mov	r2, r3
 8003488:	2340      	movs	r3, #64	@ 0x40
 800348a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	331b      	adds	r3, #27
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d019      	beq.n	80034d6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	331b      	adds	r3, #27
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e2:	461a      	mov	r2, r3
 80034e4:	2301      	movs	r3, #1
 80034e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	334d      	adds	r3, #77	@ 0x4d
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f007 fe1e 	bl	800b146 <USB_HC_Halt>
 800350a:	e365      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f007 f878 	bl	800a60a <USB_ReadChInterrupts>
 800351a:	4603      	mov	r3, r0
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d139      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334d      	adds	r3, #77	@ 0x4d
 8003534:	2205      	movs	r2, #5
 8003536:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	331a      	adds	r3, #26
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3319      	adds	r3, #25
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3344      	adds	r3, #68	@ 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f007 fde1 	bl	800b146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2340      	movs	r3, #64	@ 0x40
 8003594:	6093      	str	r3, [r2, #8]
 8003596:	e31f      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f007 f832 	bl	800a60a <USB_ReadChInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d11a      	bne.n	80035e6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035bc:	461a      	mov	r2, r3
 80035be:	2308      	movs	r3, #8
 80035c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	334d      	adds	r3, #77	@ 0x4d
 80035d2:	2206      	movs	r2, #6
 80035d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 fdb1 	bl	800b146 <USB_HC_Halt>
 80035e4:	e2f8      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f007 f80b 	bl	800a60a <USB_ReadChInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d144      	bne.n	8003688 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3344      	adds	r3, #68	@ 0x44
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	334d      	adds	r3, #77	@ 0x4d
 8003622:	2204      	movs	r2, #4
 8003624:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3319      	adds	r3, #25
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d114      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3318      	adds	r3, #24
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3319      	adds	r3, #25
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f007 fd69 	bl	800b146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003680:	461a      	mov	r2, r3
 8003682:	2310      	movs	r3, #16
 8003684:	6093      	str	r3, [r2, #8]
 8003686:	e2a7      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f006 ffba 	bl	800a60a <USB_ReadChInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369c:	2b80      	cmp	r3, #128	@ 0x80
 800369e:	f040 8083 	bne.w	80037a8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	799b      	ldrb	r3, [r3, #6]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d111      	bne.n	80036ce <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	334d      	adds	r3, #77	@ 0x4d
 80036ba:	2207      	movs	r2, #7
 80036bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f007 fd3d 	bl	800b146 <USB_HC_Halt>
 80036cc:	e062      	b.n	8003794 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3344      	adds	r3, #68	@ 0x44
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	1c59      	adds	r1, r3, #1
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4403      	add	r3, r0
 80036ee:	3344      	adds	r3, #68	@ 0x44
 80036f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3344      	adds	r3, #68	@ 0x44
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b02      	cmp	r3, #2
 8003706:	d922      	bls.n	800374e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3344      	adds	r3, #68	@ 0x44
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334c      	adds	r3, #76	@ 0x4c
 800372c:	2204      	movs	r2, #4
 800372e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	334c      	adds	r3, #76	@ 0x4c
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f00f fc16 	bl	8012f78 <HAL_HCD_HC_NotifyURBChange_Callback>
 800374c:	e022      	b.n	8003794 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	334c      	adds	r3, #76	@ 0x4c
 800375e:	2202      	movs	r2, #2
 8003760:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003778:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003780:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	015a      	lsls	r2, r3, #5
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4413      	add	r3, r2
 800378a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a0:	461a      	mov	r2, r3
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	e217      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	78fa      	ldrb	r2, [r7, #3]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f006 ff2a 	bl	800a60a <USB_ReadChInterrupts>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c0:	d11b      	bne.n	80037fa <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	334d      	adds	r3, #77	@ 0x4d
 80037d2:	2209      	movs	r2, #9
 80037d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f007 fcb1 	bl	800b146 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f0:	461a      	mov	r2, r3
 80037f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037f6:	6093      	str	r3, [r2, #8]
 80037f8:	e1ee      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f006 ff01 	bl	800a60a <USB_ReadChInterrupts>
 8003808:	4603      	mov	r3, r0
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	f040 81df 	bne.w	8003bd2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	461a      	mov	r2, r3
 8003822:	2302      	movs	r3, #2
 8003824:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	334d      	adds	r3, #77	@ 0x4d
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 8093 	bne.w	8003964 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	334d      	adds	r3, #77	@ 0x4d
 800384e:	2202      	movs	r2, #2
 8003850:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	334c      	adds	r3, #76	@ 0x4c
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3326      	adds	r3, #38	@ 0x26
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d00b      	beq.n	8003894 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3326      	adds	r3, #38	@ 0x26
 800388c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800388e:	2b03      	cmp	r3, #3
 8003890:	f040 8190 	bne.w	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	799b      	ldrb	r3, [r3, #6]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d115      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	333d      	adds	r3, #61	@ 0x3d
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	f083 0301 	eor.w	r3, r3, #1
 80038b4:	b2d8      	uxtb	r0, r3
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	333d      	adds	r3, #61	@ 0x3d
 80038c4:	4602      	mov	r2, r0
 80038c6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	799b      	ldrb	r3, [r3, #6]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	f040 8171 	bne.w	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3334      	adds	r3, #52	@ 0x34
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8165 	beq.w	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3334      	adds	r3, #52	@ 0x34
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4403      	add	r3, r0
 800390a:	3328      	adds	r3, #40	@ 0x28
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	440b      	add	r3, r1
 8003910:	1e59      	subs	r1, r3, #1
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4403      	add	r3, r0
 8003920:	3328      	adds	r3, #40	@ 0x28
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	fbb1 f3f3 	udiv	r3, r1, r3
 8003928:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 813f 	beq.w	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	333d      	adds	r3, #61	@ 0x3d
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	f083 0301 	eor.w	r3, r3, #1
 800394e:	b2d8      	uxtb	r0, r3
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	333d      	adds	r3, #61	@ 0x3d
 800395e:	4602      	mov	r2, r0
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	e127      	b.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	334d      	adds	r3, #77	@ 0x4d
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b03      	cmp	r3, #3
 8003978:	d120      	bne.n	80039bc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	334d      	adds	r3, #77	@ 0x4d
 800398a:	2202      	movs	r2, #2
 800398c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	331b      	adds	r3, #27
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f040 8107 	bne.w	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	334c      	adds	r3, #76	@ 0x4c
 80039b6:	2202      	movs	r2, #2
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e0fb      	b.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334d      	adds	r3, #77	@ 0x4d
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d13a      	bne.n	8003a48 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	334d      	adds	r3, #77	@ 0x4d
 80039e2:	2202      	movs	r2, #2
 80039e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	334c      	adds	r3, #76	@ 0x4c
 80039f6:	2202      	movs	r2, #2
 80039f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	331b      	adds	r3, #27
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	f040 80d1 	bne.w	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	331b      	adds	r3, #27
 8003a22:	2200      	movs	r2, #0
 8003a24:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a44:	6053      	str	r3, [r2, #4]
 8003a46:	e0b5      	b.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	334d      	adds	r3, #77	@ 0x4d
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d114      	bne.n	8003a88 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	334d      	adds	r3, #77	@ 0x4d
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	334c      	adds	r3, #76	@ 0x4c
 8003a82:	2202      	movs	r2, #2
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	e095      	b.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	334d      	adds	r3, #77	@ 0x4d
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d114      	bne.n	8003ac8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	334d      	adds	r3, #77	@ 0x4d
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	334c      	adds	r3, #76	@ 0x4c
 8003ac2:	2205      	movs	r2, #5
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e075      	b.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	334d      	adds	r3, #77	@ 0x4d
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b07      	cmp	r3, #7
 8003adc:	d00a      	beq.n	8003af4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	334d      	adds	r3, #77	@ 0x4d
 8003aee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	d170      	bne.n	8003bd6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	3344      	adds	r3, #68	@ 0x44
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4403      	add	r3, r0
 8003b28:	3344      	adds	r3, #68	@ 0x44
 8003b2a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	3344      	adds	r3, #68	@ 0x44
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d914      	bls.n	8003b6c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3344      	adds	r3, #68	@ 0x44
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	334c      	adds	r3, #76	@ 0x4c
 8003b66:	2204      	movs	r2, #4
 8003b68:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b6a:	e022      	b.n	8003bb2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	334c      	adds	r3, #76	@ 0x4c
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b96:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b9e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bac:	461a      	mov	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bb2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	334c      	adds	r3, #76	@ 0x4c
 8003bc4:	781a      	ldrb	r2, [r3, #0]
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f00f f9d4 	bl	8012f78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bd0:	e002      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003bd6:	bf00      	nop
  }
}
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b08a      	sub	sp, #40	@ 0x28
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	0c5b      	lsrs	r3, r3, #17
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	091b      	lsrs	r3, r3, #4
 8003c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c12:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d004      	beq.n	8003c24 <HCD_RXQLVL_IRQHandler+0x46>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	f000 80b6 	beq.w	8003d8e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c22:	e0b7      	b.n	8003d94 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80b3 	beq.w	8003d92 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	332c      	adds	r3, #44	@ 0x2c
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80a7 	beq.w	8003d92 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3338      	adds	r3, #56	@ 0x38
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	18d1      	adds	r1, r2, r3
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4403      	add	r3, r0
 8003c68:	3334      	adds	r3, #52	@ 0x34
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4299      	cmp	r1, r3
 8003c6e:	f200 8083 	bhi.w	8003d78 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	332c      	adds	r3, #44	@ 0x2c
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f006 fc51 	bl	800a534 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	332c      	adds	r3, #44	@ 0x2c
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	18d1      	adds	r1, r2, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4403      	add	r3, r0
 8003cb6:	332c      	adds	r3, #44	@ 0x2c
 8003cb8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3338      	adds	r3, #56	@ 0x38
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	18d1      	adds	r1, r2, r3
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4403      	add	r3, r0
 8003cde:	3338      	adds	r3, #56	@ 0x38
 8003ce0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	0cdb      	lsrs	r3, r3, #19
 8003cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3328      	adds	r3, #40	@ 0x28
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d13f      	bne.n	8003d92 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d03c      	beq.n	8003d92 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d36:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	333c      	adds	r3, #60	@ 0x3c
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f083 0301 	eor.w	r3, r3, #1
 8003d60:	b2d8      	uxtb	r0, r3
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	333c      	adds	r3, #60	@ 0x3c
 8003d72:	4602      	mov	r2, r0
 8003d74:	701a      	strb	r2, [r3, #0]
      break;
 8003d76:	e00c      	b.n	8003d92 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	334c      	adds	r3, #76	@ 0x4c
 8003d88:	2204      	movs	r2, #4
 8003d8a:	701a      	strb	r2, [r3, #0]
      break;
 8003d8c:	e001      	b.n	8003d92 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003d92:	bf00      	nop
  }
}
 8003d94:	bf00      	nop
 8003d96:	3728      	adds	r7, #40	@ 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003dc8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d10b      	bne.n	8003dec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d102      	bne.n	8003de4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f00f f8ae 	bl	8012f40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d132      	bne.n	8003e5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f043 0308 	orr.w	r3, r3, #8
 8003dfc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d126      	bne.n	8003e56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7a5b      	ldrb	r3, [r3, #9]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d113      	bne.n	8003e38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003e16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e1a:	d106      	bne.n	8003e2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2102      	movs	r1, #2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f006 fd10 	bl	800a848 <USB_InitFSLSPClkSel>
 8003e28:	e011      	b.n	8003e4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	4618      	mov	r0, r3
 8003e32:	f006 fd09 	bl	800a848 <USB_InitFSLSPClkSel>
 8003e36:	e00a      	b.n	8003e4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	79db      	ldrb	r3, [r3, #7]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e46:	461a      	mov	r2, r3
 8003e48:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003e4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f00f f8a4 	bl	8012f9c <HAL_HCD_PortEnabled_Callback>
 8003e54:	e002      	b.n	8003e5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f00f f8ae 	bl	8012fb8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	d103      	bne.n	8003e6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f043 0320 	orr.w	r3, r3, #32
 8003e6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	6013      	str	r3, [r2, #0]
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e08b      	b.n	8003fae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f008 fb1a 	bl	800c4e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	@ 0x24
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f022 0201 	bic.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	e006      	b.n	8003f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d108      	bne.n	8003f26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	e007      	b.n	8003f36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <HAL_I2C_Init+0x134>)
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691a      	ldr	r2, [r3, #16]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69d9      	ldr	r1, [r3, #28]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	02008000 	.word	0x02008000

08003fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d138      	bne.n	8004044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e032      	b.n	8004046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	@ 0x24
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800400e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6819      	ldr	r1, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b20      	cmp	r3, #32
 8004066:	d139      	bne.n	80040dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004072:	2302      	movs	r3, #2
 8004074:	e033      	b.n	80040de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2224      	movs	r2, #36	@ 0x24
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e08f      	b.n	800421c <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f008 fb11 	bl	800c738 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699a      	ldr	r2, [r3, #24]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800412c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6999      	ldr	r1, [r3, #24]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004142:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6999      	ldr	r1, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a19      	ldr	r1, [r3, #32]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	430a      	orrs	r2, r1
 800417c:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	430a      	orrs	r2, r1
 8004192:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80041ba:	041b      	lsls	r3, r3, #16
 80041bc:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80041cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80041e0:	431a      	orrs	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 0206 	orr.w	r2, r2, #6
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0201 	orr.w	r2, r2, #1
 8004208:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d023      	beq.n	800428e <HAL_LTDC_IRQHandler+0x6a>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01e      	beq.n	800428e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2204      	movs	r2, #4
 8004266:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800426e:	f043 0201 	orr.w	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2204      	movs	r2, #4
 800427c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f86f 	bl	800436c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d023      	beq.n	80042e0 <HAL_LTDC_IRQHandler+0xbc>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01e      	beq.n	80042e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0202 	bic.w	r2, r2, #2
 80042b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2202      	movs	r2, #2
 80042b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042c0:	f043 0202 	orr.w	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2204      	movs	r2, #4
 80042ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f846 	bl	800436c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01b      	beq.n	8004322 <HAL_LTDC_IRQHandler+0xfe>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f82f 	bl	8004380 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_LTDC_IRQHandler+0x140>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d016      	beq.n	8004364 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0208 	bic.w	r2, r2, #8
 8004344:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2208      	movs	r2, #8
 800434c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f818 	bl	8004394 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043a8:	b5b0      	push	{r4, r5, r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_LTDC_ConfigLayer+0x1a>
 80043be:	2302      	movs	r3, #2
 80043c0:	e02c      	b.n	800441c <HAL_LTDC_ConfigLayer+0x74>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2134      	movs	r1, #52	@ 0x34
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4614      	mov	r4, r2
 80043e6:	461d      	mov	r5, r3
 80043e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f811 	bl	8004424 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2201      	movs	r2, #1
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bdb0      	pop	{r4, r5, r7, pc}

08004424 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	@ 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	4413      	add	r3, r2
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	4413      	add	r3, r2
 8004452:	3384      	adds	r3, #132	@ 0x84
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	4611      	mov	r1, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	01d2      	lsls	r2, r2, #7
 8004460:	440a      	add	r2, r1
 8004462:	3284      	adds	r2, #132	@ 0x84
 8004464:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004468:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800447a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800447c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4619      	mov	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	01db      	lsls	r3, r3, #7
 8004488:	440b      	add	r3, r1
 800448a:	3384      	adds	r3, #132	@ 0x84
 800448c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004492:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a2:	4413      	add	r3, r2
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	01db      	lsls	r3, r3, #7
 80044b2:	4413      	add	r3, r2
 80044b4:	3384      	adds	r3, #132	@ 0x84
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	4611      	mov	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	01d2      	lsls	r2, r2, #7
 80044c2:	440a      	add	r2, r1
 80044c4:	3284      	adds	r2, #132	@ 0x84
 80044c6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80044ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044da:	4413      	add	r3, r2
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	01db      	lsls	r3, r3, #7
 80044e8:	440b      	add	r3, r1
 80044ea:	3384      	adds	r3, #132	@ 0x84
 80044ec:	4619      	mov	r1, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	01db      	lsls	r3, r3, #7
 80044fe:	4413      	add	r3, r2
 8004500:	3384      	adds	r3, #132	@ 0x84
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	4611      	mov	r1, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	01d2      	lsls	r2, r2, #7
 800450e:	440a      	add	r2, r1
 8004510:	3284      	adds	r2, #132	@ 0x84
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	01db      	lsls	r3, r3, #7
 8004522:	4413      	add	r3, r2
 8004524:	3384      	adds	r3, #132	@ 0x84
 8004526:	461a      	mov	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	061b      	lsls	r3, r3, #24
 8004548:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004550:	461a      	mov	r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	431a      	orrs	r2, r3
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	431a      	orrs	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	440b      	add	r3, r1
 8004566:	3384      	adds	r3, #132	@ 0x84
 8004568:	4619      	mov	r1, r3
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	01db      	lsls	r3, r3, #7
 800457a:	4413      	add	r3, r2
 800457c:	3384      	adds	r3, #132	@ 0x84
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	4611      	mov	r1, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	01d2      	lsls	r2, r2, #7
 800458a:	440a      	add	r2, r1
 800458c:	3284      	adds	r2, #132	@ 0x84
 800458e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004592:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	01db      	lsls	r3, r3, #7
 800459e:	4413      	add	r3, r2
 80045a0:	3384      	adds	r3, #132	@ 0x84
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	01db      	lsls	r3, r3, #7
 80045b4:	4413      	add	r3, r2
 80045b6:	3384      	adds	r3, #132	@ 0x84
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	01db      	lsls	r3, r3, #7
 80045c4:	440b      	add	r3, r1
 80045c6:	3384      	adds	r3, #132	@ 0x84
 80045c8:	4619      	mov	r1, r3
 80045ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004708 <LTDC_SetConfig+0x2e4>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	6809      	ldr	r1, [r1, #0]
 80045dc:	4608      	mov	r0, r1
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	01c9      	lsls	r1, r1, #7
 80045e2:	4401      	add	r1, r0
 80045e4:	3184      	adds	r1, #132	@ 0x84
 80045e6:	4313      	orrs	r3, r2
 80045e8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	01db      	lsls	r3, r3, #7
 80045f4:	4413      	add	r3, r2
 80045f6:	3384      	adds	r3, #132	@ 0x84
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8004608:	2304      	movs	r3, #4
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	e01b      	b.n	8004646 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d102      	bne.n	800461c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8004616:	2303      	movs	r3, #3
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e014      	b.n	8004646 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	2b04      	cmp	r3, #4
 8004622:	d00b      	beq.n	800463c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004628:	2b02      	cmp	r3, #2
 800462a:	d007      	beq.n	800463c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004630:	2b03      	cmp	r3, #3
 8004632:	d003      	beq.n	800463c <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004638:	2b07      	cmp	r3, #7
 800463a:	d102      	bne.n	8004642 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800463c:	2302      	movs	r3, #2
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	e001      	b.n	8004646 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8004642:	2301      	movs	r3, #1
 8004644:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	01db      	lsls	r3, r3, #7
 8004650:	4413      	add	r3, r2
 8004652:	3384      	adds	r3, #132	@ 0x84
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	4611      	mov	r1, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	01d2      	lsls	r2, r2, #7
 8004660:	440a      	add	r2, r1
 8004662:	3284      	adds	r2, #132	@ 0x84
 8004664:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004668:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	fb02 f303 	mul.w	r3, r2, r3
 8004674:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	1acb      	subs	r3, r1, r3
 8004680:	69f9      	ldr	r1, [r7, #28]
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	6809      	ldr	r1, [r1, #0]
 800468c:	4608      	mov	r0, r1
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	01c9      	lsls	r1, r1, #7
 8004692:	4401      	add	r1, r0
 8004694:	3184      	adds	r1, #132	@ 0x84
 8004696:	4313      	orrs	r3, r2
 8004698:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	01db      	lsls	r3, r3, #7
 80046a4:	4413      	add	r3, r2
 80046a6:	3384      	adds	r3, #132	@ 0x84
 80046a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	01db      	lsls	r3, r3, #7
 80046b4:	440b      	add	r3, r1
 80046b6:	3384      	adds	r3, #132	@ 0x84
 80046b8:	4619      	mov	r1, r3
 80046ba:	4b14      	ldr	r3, [pc, #80]	@ (800470c <LTDC_SetConfig+0x2e8>)
 80046bc:	4013      	ands	r3, r2
 80046be:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	01db      	lsls	r3, r3, #7
 80046ca:	4413      	add	r3, r2
 80046cc:	3384      	adds	r3, #132	@ 0x84
 80046ce:	461a      	mov	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	4413      	add	r3, r2
 80046e2:	3384      	adds	r3, #132	@ 0x84
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	4611      	mov	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	01d2      	lsls	r2, r2, #7
 80046f0:	440a      	add	r2, r1
 80046f2:	3284      	adds	r2, #132	@ 0x84
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6013      	str	r3, [r2, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	@ 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	fffff8f8 	.word	0xfffff8f8
 800470c:	fffff800 	.word	0xfffff800

08004710 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004718:	f7fb fddc 	bl	80002d4 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e067      	b.n	80047f8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f008 f8ef 	bl	800c920 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004742:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f85e 	bl	8004808 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	3b01      	subs	r3, #1
 800475c:	021a      	lsls	r2, r3, #8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	2120      	movs	r1, #32
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f856 	bl	8004824 <QSPI_WaitFlagStateUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800477c:	7afb      	ldrb	r3, [r7, #11]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d135      	bne.n	80047ee <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b1d      	ldr	r3, [pc, #116]	@ (8004800 <HAL_QSPI_Init+0xf0>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6852      	ldr	r2, [r2, #4]
 8004790:	0611      	lsls	r1, r2, #24
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68d2      	ldr	r2, [r2, #12]
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	69d2      	ldr	r2, [r2, #28]
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6a12      	ldr	r2, [r2, #32]
 80047a2:	4311      	orrs	r1, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4b14      	ldr	r3, [pc, #80]	@ (8004804 <HAL_QSPI_Init+0xf4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6912      	ldr	r2, [r2, #16]
 80047ba:	0411      	lsls	r1, r2, #16
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6952      	ldr	r2, [r2, #20]
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6992      	ldr	r2, [r2, #24]
 80047c6:	4311      	orrs	r1, r2
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 80047f6:	7afb      	ldrb	r3, [r7, #11]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	00ffff2f 	.word	0x00ffff2f
 8004804:	ffe0f8fe 	.word	0xffe0f8fe

08004808 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004834:	e01a      	b.n	800486c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d016      	beq.n	800486c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483e:	f7fb fd49 	bl	80002d4 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2204      	movs	r2, #4
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e00e      	b.n	800488a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf14      	ite	ne
 800487a:	2301      	movne	r3, #1
 800487c:	2300      	moveq	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	429a      	cmp	r2, r3
 8004886:	d1d6      	bne.n	8004836 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e291      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8087 	beq.w	80049c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048b8:	4b96      	ldr	r3, [pc, #600]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d00c      	beq.n	80048de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c4:	4b93      	ldr	r3, [pc, #588]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d112      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
 80048d0:	4b90      	ldr	r3, [pc, #576]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048dc:	d10b      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048de:	4b8d      	ldr	r3, [pc, #564]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <HAL_RCC_OscConfig+0x130>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d168      	bne.n	80049c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e26b      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x7a>
 8004900:	4b84      	ldr	r3, [pc, #528]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a83      	ldr	r2, [pc, #524]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e02e      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x9c>
 8004916:	4b7f      	ldr	r3, [pc, #508]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 800491c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b7c      	ldr	r3, [pc, #496]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7b      	ldr	r2, [pc, #492]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e01d      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0xc0>
 800493a:	4b76      	ldr	r3, [pc, #472]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a75      	ldr	r2, [pc, #468]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b73      	ldr	r3, [pc, #460]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a72      	ldr	r2, [pc, #456]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 800494c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0xd8>
 8004954:	4b6f      	ldr	r3, [pc, #444]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a6e      	ldr	r2, [pc, #440]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 800495a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b6c      	ldr	r3, [pc, #432]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6b      	ldr	r2, [pc, #428]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800496a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d013      	beq.n	800499c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fb fcae 	bl	80002d4 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800497c:	f7fb fcaa 	bl	80002d4 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	@ 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e21f      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b61      	ldr	r3, [pc, #388]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0xe8>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fb fc9a 	bl	80002d4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fb fc96 	bl	80002d4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e20b      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	4b57      	ldr	r3, [pc, #348]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x110>
 80049c2:	e000      	b.n	80049c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d069      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d2:	4b50      	ldr	r3, [pc, #320]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b4d      	ldr	r3, [pc, #308]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x190>
 80049ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d116      	bne.n	8004a24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	4b47      	ldr	r3, [pc, #284]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x17a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d001      	beq.n	8004a0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e1df      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	493d      	ldr	r1, [pc, #244]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a22:	e040      	b.n	8004aa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d023      	beq.n	8004a74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a2c:	4b39      	ldr	r3, [pc, #228]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a38      	ldr	r2, [pc, #224]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fb fc4c 	bl	80002d4 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fb fc48 	bl	80002d4 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1bd      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a52:	4b30      	ldr	r3, [pc, #192]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4929      	ldr	r1, [pc, #164]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
 8004a72:	e018      	b.n	8004aa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a74:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a26      	ldr	r2, [pc, #152]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fb fc28 	bl	80002d4 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a88:	f7fb fc24 	bl	80002d4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e199      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d038      	beq.n	8004b24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d019      	beq.n	8004aee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b16      	ldr	r3, [pc, #88]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac6:	f7fb fc05 	bl	80002d4 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fb fc01 	bl	80002d4 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e176      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x23a>
 8004aec:	e01a      	b.n	8004b24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aee:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af2:	4a08      	ldr	r2, [pc, #32]	@ (8004b14 <HAL_RCC_OscConfig+0x280>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afa:	f7fb fbeb 	bl	80002d4 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b02:	f7fb fbe7 	bl	80002d4 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d903      	bls.n	8004b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e15c      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
 8004b14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b91      	ldr	r3, [pc, #580]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ee      	bne.n	8004b02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80a4 	beq.w	8004c7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b32:	4b8b      	ldr	r3, [pc, #556]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	4b88      	ldr	r3, [pc, #544]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	4a87      	ldr	r2, [pc, #540]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b4a:	4b85      	ldr	r3, [pc, #532]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b52:	60bb      	str	r3, [r7, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b56:	2301      	movs	r3, #1
 8004b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5a:	4b82      	ldr	r3, [pc, #520]	@ (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d118      	bne.n	8004b98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b66:	4b7f      	ldr	r3, [pc, #508]	@ (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b72:	f7fb fbaf 	bl	80002d4 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7a:	f7fb fbab 	bl	80002d4 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b64      	cmp	r3, #100	@ 0x64
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e120      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8c:	4b75      	ldr	r3, [pc, #468]	@ (8004d64 <HAL_RCC_OscConfig+0x4d0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0f0      	beq.n	8004b7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d106      	bne.n	8004bae <HAL_RCC_OscConfig+0x31a>
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bac:	e02d      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x33c>
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bba:	4a69      	ldr	r2, [pc, #420]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc2:	4b67      	ldr	r3, [pc, #412]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc6:	4a66      	ldr	r2, [pc, #408]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bce:	e01c      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d10c      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x35e>
 8004bd8:	4b61      	ldr	r3, [pc, #388]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bdc:	4a60      	ldr	r2, [pc, #384]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be4:	4b5e      	ldr	r3, [pc, #376]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf0:	e00b      	b.n	8004c0a <HAL_RCC_OscConfig+0x376>
 8004bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	4a5a      	ldr	r2, [pc, #360]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004bf8:	f023 0301 	bic.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfe:	4b58      	ldr	r3, [pc, #352]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	4a57      	ldr	r2, [pc, #348]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	f023 0304 	bic.w	r3, r3, #4
 8004c08:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d015      	beq.n	8004c3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fb fb5f 	bl	80002d4 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fb fb5b 	bl	80002d4 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0ce      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	4b4b      	ldr	r3, [pc, #300]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RCC_OscConfig+0x386>
 8004c3c:	e014      	b.n	8004c68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3e:	f7fb fb49 	bl	80002d4 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fb fb45 	bl	80002d4 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0b8      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5c:	4b40      	ldr	r3, [pc, #256]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ee      	bne.n	8004c46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d105      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	4a3b      	ldr	r2, [pc, #236]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80a4 	beq.w	8004dcc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c84:	4b36      	ldr	r3, [pc, #216]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d06b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d149      	bne.n	8004d2c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c98:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a30      	ldr	r2, [pc, #192]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca4:	f7fb fb16 	bl	80002d4 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cac:	f7fb fb12 	bl	80002d4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e087      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	4b28      	ldr	r3, [pc, #160]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	019b      	lsls	r3, r3, #6
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	085b      	lsrs	r3, r3, #1
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cf2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004cf6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf8:	4b19      	ldr	r3, [pc, #100]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fb fae6 	bl	80002d4 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fb fae2 	bl	80002d4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e057      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1e:	4b10      	ldr	r3, [pc, #64]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x478>
 8004d2a:	e04f      	b.n	8004dcc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a0b      	ldr	r2, [pc, #44]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fb facc 	bl	80002d4 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fb fac8 	bl	80002d4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e03d      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d52:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <HAL_RCC_OscConfig+0x4cc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x4ac>
 8004d5e:	e035      	b.n	8004dcc <HAL_RCC_OscConfig+0x538>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d68:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd8 <HAL_RCC_OscConfig+0x544>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d028      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d121      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d11a      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d111      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	3b01      	subs	r3, #1
 8004db2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d107      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0d0      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d910      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b67      	ldr	r3, [pc, #412]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 020f 	bic.w	r2, r3, #15
 8004e0a:	4965      	ldr	r1, [pc, #404]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b63      	ldr	r3, [pc, #396]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0b8      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d020      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e3c:	4b59      	ldr	r3, [pc, #356]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a58      	ldr	r2, [pc, #352]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e54:	4b53      	ldr	r3, [pc, #332]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a52      	ldr	r2, [pc, #328]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e60:	4b50      	ldr	r3, [pc, #320]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	494d      	ldr	r1, [pc, #308]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d040      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b47      	ldr	r3, [pc, #284]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d115      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e07f      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	4b41      	ldr	r3, [pc, #260]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e073      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eae:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06b      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ebe:	4b39      	ldr	r3, [pc, #228]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4936      	ldr	r1, [pc, #216]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fb fa00 	bl	80002d4 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fb f9fc 	bl	80002d4 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e053      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 020c 	and.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d1eb      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f00:	4b27      	ldr	r3, [pc, #156]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d210      	bcs.n	8004f30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f0e:	4b24      	ldr	r3, [pc, #144]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 020f 	bic.w	r2, r3, #15
 8004f16:	4922      	ldr	r1, [pc, #136]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b20      	ldr	r3, [pc, #128]	@ (8004fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e032      	b.n	8004f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f3c:	4b19      	ldr	r3, [pc, #100]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4916      	ldr	r1, [pc, #88]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f5a:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	490e      	ldr	r1, [pc, #56]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f6e:	f000 f821 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8004f72:	4602      	mov	r2, r0
 8004f74:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	490a      	ldr	r1, [pc, #40]	@ (8004fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8004f80:	5ccb      	ldrb	r3, [r1, r3]
 8004f82:	fa22 f303 	lsr.w	r3, r2, r3
 8004f86:	4a09      	ldr	r2, [pc, #36]	@ (8004fac <HAL_RCC_ClockConfig+0x1d0>)
 8004f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f8a:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f008 f93c 	bl	800d20c <HAL_InitTick>

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40023c00 	.word	0x40023c00
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	08013a40 	.word	0x08013a40
 8004fac:	20000008 	.word	0x20000008
 8004fb0:	20000000 	.word	0x20000000

08004fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb8:	b090      	sub	sp, #64	@ 0x40
 8004fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fcc:	4b58      	ldr	r3, [pc, #352]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d00d      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	f200 80a0 	bhi.w	800511e <HAL_RCC_GetSysClockFreq+0x16a>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0x3a>
 8004fe6:	e09a      	b.n	800511e <HAL_RCC_GetSysClockFreq+0x16a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b52      	ldr	r3, [pc, #328]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fec:	e09a      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x170>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fee:	4b52      	ldr	r3, [pc, #328]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ff2:	e097      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x170>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d027      	beq.n	800505a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500a:	4b49      	ldr	r3, [pc, #292]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x17c>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	2200      	movs	r2, #0
 8005012:	623b      	str	r3, [r7, #32]
 8005014:	627a      	str	r2, [r7, #36]	@ 0x24
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800501c:	2100      	movs	r1, #0
 800501e:	4b46      	ldr	r3, [pc, #280]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x184>)
 8005020:	fb03 f201 	mul.w	r2, r3, r1
 8005024:	2300      	movs	r3, #0
 8005026:	fb00 f303 	mul.w	r3, r0, r3
 800502a:	4413      	add	r3, r2
 800502c:	4a42      	ldr	r2, [pc, #264]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x184>)
 800502e:	fba0 2102 	umull	r2, r1, r0, r2
 8005032:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005034:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005038:	4413      	add	r3, r2
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800503e:	2200      	movs	r2, #0
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	61fa      	str	r2, [r7, #28]
 8005044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005048:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800504c:	f7fb f8c0 	bl	80001d0 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4613      	mov	r3, r2
 8005056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005058:	e053      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x14e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505a:	4b35      	ldr	r3, [pc, #212]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x17c>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	099b      	lsrs	r3, r3, #6
 8005060:	2200      	movs	r2, #0
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	617a      	str	r2, [r7, #20]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800506c:	f04f 0b00 	mov.w	fp, #0
 8005070:	4652      	mov	r2, sl
 8005072:	465b      	mov	r3, fp
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	0159      	lsls	r1, r3, #5
 800507e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005082:	0150      	lsls	r0, r2, #5
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	ebb2 080a 	subs.w	r8, r2, sl
 800508c:	eb63 090b 	sbc.w	r9, r3, fp
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800509c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050a0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050a4:	ebb2 0408 	subs.w	r4, r2, r8
 80050a8:	eb63 0509 	sbc.w	r5, r3, r9
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	00eb      	lsls	r3, r5, #3
 80050b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ba:	00e2      	lsls	r2, r4, #3
 80050bc:	4614      	mov	r4, r2
 80050be:	461d      	mov	r5, r3
 80050c0:	eb14 030a 	adds.w	r3, r4, sl
 80050c4:	603b      	str	r3, [r7, #0]
 80050c6:	eb45 030b 	adc.w	r3, r5, fp
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	f04f 0300 	mov.w	r3, #0
 80050d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050d8:	4629      	mov	r1, r5
 80050da:	028b      	lsls	r3, r1, #10
 80050dc:	4621      	mov	r1, r4
 80050de:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050e2:	4621      	mov	r1, r4
 80050e4:	028a      	lsls	r2, r1, #10
 80050e6:	4610      	mov	r0, r2
 80050e8:	4619      	mov	r1, r3
 80050ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ec:	2200      	movs	r2, #0
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	60fa      	str	r2, [r7, #12]
 80050f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f6:	f7fb f86b 	bl	80001d0 <__aeabi_uldivmod>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4613      	mov	r3, r2
 8005100:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005102:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x17c>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	3301      	adds	r3, #1
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005112:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800511c:	e002      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x170>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800511e:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x180>)
 8005120:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005126:	4618      	mov	r0, r3
 8005128:	3740      	adds	r7, #64	@ 0x40
 800512a:	46bd      	mov	sp, r7
 800512c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005130:	40023800 	.word	0x40023800
 8005134:	00f42400 	.word	0x00f42400
 8005138:	017d7840 	.word	0x017d7840

0800513c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005140:	4b03      	ldr	r3, [pc, #12]	@ (8005150 <HAL_RCC_GetHCLKFreq+0x14>)
 8005142:	681b      	ldr	r3, [r3, #0]
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	20000008 	.word	0x20000008

08005154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005158:	f7ff fff0 	bl	800513c <HAL_RCC_GetHCLKFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	0a9b      	lsrs	r3, r3, #10
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4903      	ldr	r1, [pc, #12]	@ (8005178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40023800 	.word	0x40023800
 8005178:	08013a50 	.word	0x08013a50

0800517c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005180:	f7ff ffdc 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8005184:	4602      	mov	r2, r0
 8005186:	4b05      	ldr	r3, [pc, #20]	@ (800519c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	0b5b      	lsrs	r3, r3, #13
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	4903      	ldr	r1, [pc, #12]	@ (80051a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005192:	5ccb      	ldrb	r3, [r1, r3]
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40023800 	.word	0x40023800
 80051a0:	08013a50 	.word	0x08013a50

080051a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	220f      	movs	r2, #15
 80051b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051b4:	4b12      	ldr	r3, [pc, #72]	@ (8005200 <HAL_RCC_GetClockConfig+0x5c>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0203 	and.w	r2, r3, #3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <HAL_RCC_GetClockConfig+0x5c>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <HAL_RCC_GetClockConfig+0x5c>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80051d8:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <HAL_RCC_GetClockConfig+0x5c>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051e6:	4b07      	ldr	r3, [pc, #28]	@ (8005204 <HAL_RCC_GetClockConfig+0x60>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 020f 	and.w	r2, r3, #15
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	601a      	str	r2, [r3, #0]
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	40023c00 	.word	0x40023c00

08005208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005220:	2300      	movs	r3, #0
 8005222:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d012      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005230:	4b69      	ldr	r3, [pc, #420]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	4a68      	ldr	r2, [pc, #416]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005236:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800523a:	6093      	str	r3, [r2, #8]
 800523c:	4b66      	ldr	r3, [pc, #408]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005244:	4964      	ldr	r1, [pc, #400]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d017      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005262:	4b5d      	ldr	r3, [pc, #372]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005268:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005270:	4959      	ldr	r1, [pc, #356]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005280:	d101      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005282:	2301      	movs	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800528e:	2301      	movs	r3, #1
 8005290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d017      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800529e:	4b4e      	ldr	r3, [pc, #312]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	494a      	ldr	r1, [pc, #296]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052bc:	d101      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052be:	2301      	movs	r3, #1
 80052c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052da:	2301      	movs	r3, #1
 80052dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 808b 	beq.w	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052ec:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	4a39      	ldr	r2, [pc, #228]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80052f8:	4b37      	ldr	r3, [pc, #220]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005304:	4b35      	ldr	r3, [pc, #212]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a34      	ldr	r2, [pc, #208]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800530a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005310:	f7fa ffe0 	bl	80002d4 <HAL_GetTick>
 8005314:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005316:	e008      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005318:	f7fa ffdc 	bl	80002d4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	@ 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e357      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800532a:	4b2c      	ldr	r3, [pc, #176]	@ (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005336:	4b28      	ldr	r3, [pc, #160]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d035      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d02e      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005354:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800535e:	4b1e      	ldr	r3, [pc, #120]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005368:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800536a:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	4a1a      	ldr	r2, [pc, #104]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005374:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005376:	4a18      	ldr	r2, [pc, #96]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800537c:	4b16      	ldr	r3, [pc, #88]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d114      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fa ffa4 	bl	80002d4 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538e:	e00a      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005390:	f7fa ffa0 	bl	80002d4 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539e:	4293      	cmp	r3, r2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e319      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a6:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ee      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053be:	d111      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053c0:	4b05      	ldr	r3, [pc, #20]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053cc:	4b04      	ldr	r3, [pc, #16]	@ (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053ce:	400b      	ands	r3, r1
 80053d0:	4901      	ldr	r1, [pc, #4]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	608b      	str	r3, [r1, #8]
 80053d6:	e00b      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40007000 	.word	0x40007000
 80053e0:	0ffffcff 	.word	0x0ffffcff
 80053e4:	4baa      	ldr	r3, [pc, #680]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4aa9      	ldr	r2, [pc, #676]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80053ee:	6093      	str	r3, [r2, #8]
 80053f0:	4ba7      	ldr	r3, [pc, #668]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053fc:	49a4      	ldr	r1, [pc, #656]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800540e:	4ba0      	ldr	r3, [pc, #640]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005414:	4a9e      	ldr	r2, [pc, #632]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800541a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800541e:	4b9c      	ldr	r3, [pc, #624]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005420:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	4999      	ldr	r1, [pc, #612]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800543c:	4b94      	ldr	r3, [pc, #592]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005442:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800544a:	4991      	ldr	r1, [pc, #580]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800545e:	4b8c      	ldr	r3, [pc, #560]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005464:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800546c:	4988      	ldr	r1, [pc, #544]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00a      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005480:	4b83      	ldr	r3, [pc, #524]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800548e:	4980      	ldr	r1, [pc, #512]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b0:	4977      	ldr	r1, [pc, #476]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054c4:	4b72      	ldr	r3, [pc, #456]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ca:	f023 0203 	bic.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	496f      	ldr	r1, [pc, #444]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ec:	f023 020c 	bic.w	r2, r3, #12
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f4:	4966      	ldr	r1, [pc, #408]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005508:	4b61      	ldr	r3, [pc, #388]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005516:	495e      	ldr	r1, [pc, #376]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800552a:	4b59      	ldr	r3, [pc, #356]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005530:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005538:	4955      	ldr	r1, [pc, #340]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800554c:	4b50      	ldr	r3, [pc, #320]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005552:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555a:	494d      	ldr	r1, [pc, #308]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800556e:	4b48      	ldr	r3, [pc, #288]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005574:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557c:	4944      	ldr	r1, [pc, #272]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005590:	4b3f      	ldr	r3, [pc, #252]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005596:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559e:	493c      	ldr	r1, [pc, #240]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055b2:	4b37      	ldr	r3, [pc, #220]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c0:	4933      	ldr	r1, [pc, #204]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055da:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055e2:	492b      	ldr	r1, [pc, #172]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d011      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055f6:	4b26      	ldr	r3, [pc, #152]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005604:	4922      	ldr	r1, [pc, #136]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005614:	d101      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005616:	2301      	movs	r3, #1
 8005618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005626:	2301      	movs	r3, #1
 8005628:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005636:	4b16      	ldr	r3, [pc, #88]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005644:	4912      	ldr	r1, [pc, #72]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00b      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005658:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005668:	4909      	ldr	r1, [pc, #36]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d006      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80d9 	beq.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005684:	4b02      	ldr	r3, [pc, #8]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a01      	ldr	r2, [pc, #4]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800568e:	e001      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005690:	40023800 	.word	0x40023800
 8005694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005696:	f7fa fe1d 	bl	80002d4 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800569e:	f7fa fe19 	bl	80002d4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b64      	cmp	r3, #100	@ 0x64
 80056aa:	d901      	bls.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e194      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1f0      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d021      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11d      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056d0:	4b64      	ldr	r3, [pc, #400]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d6:	0c1b      	lsrs	r3, r3, #16
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056de:	4b61      	ldr	r3, [pc, #388]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	019a      	lsls	r2, r3, #6
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	061b      	lsls	r3, r3, #24
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	071b      	lsls	r3, r3, #28
 8005704:	4957      	ldr	r1, [pc, #348]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02e      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005736:	d129      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005738:	4b4a      	ldr	r3, [pc, #296]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005746:	4b47      	ldr	r3, [pc, #284]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574c:	0f1b      	lsrs	r3, r3, #28
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	019a      	lsls	r2, r3, #6
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	061b      	lsls	r3, r3, #24
 8005766:	431a      	orrs	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	071b      	lsls	r3, r3, #28
 800576c:	493d      	ldr	r1, [pc, #244]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005774:	4b3b      	ldr	r3, [pc, #236]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800577a:	f023 021f 	bic.w	r2, r3, #31
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	3b01      	subs	r3, #1
 8005784:	4937      	ldr	r1, [pc, #220]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01d      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005798:	4b32      	ldr	r3, [pc, #200]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800579e:	0e1b      	lsrs	r3, r3, #24
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ac:	0f1b      	lsrs	r3, r3, #28
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	019a      	lsls	r2, r3, #6
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	041b      	lsls	r3, r3, #16
 80057c0:	431a      	orrs	r2, r3
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	431a      	orrs	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	071b      	lsls	r3, r3, #28
 80057cc:	4925      	ldr	r1, [pc, #148]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d011      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	019a      	lsls	r2, r3, #6
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	061b      	lsls	r3, r3, #24
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	071b      	lsls	r3, r3, #28
 80057fc:	4919      	ldr	r1, [pc, #100]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005804:	4b17      	ldr	r3, [pc, #92]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a16      	ldr	r2, [pc, #88]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800580a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800580e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fa fd60 	bl	80002d4 <HAL_GetTick>
 8005814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005816:	e008      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005818:	f7fa fd5c 	bl	80002d4 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	@ 0x64
 8005824:	d901      	bls.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e0d7      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800582a:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b01      	cmp	r3, #1
 800583a:	f040 80cd 	bne.w	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800583e:	4b09      	ldr	r3, [pc, #36]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a08      	ldr	r2, [pc, #32]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800584a:	f7fa fd43 	bl	80002d4 <HAL_GetTick>
 800584e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005850:	e00a      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005852:	f7fa fd3f 	bl	80002d4 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b64      	cmp	r3, #100	@ 0x64
 800585e:	d903      	bls.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e0ba      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005864:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005868:	4b5e      	ldr	r3, [pc, #376]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005874:	d0ed      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005892:	2b00      	cmp	r3, #0
 8005894:	d02e      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d12a      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800589e:	4b51      	ldr	r3, [pc, #324]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058ac:	4b4d      	ldr	r3, [pc, #308]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b2:	0f1b      	lsrs	r3, r3, #28
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	019a      	lsls	r2, r3, #6
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	431a      	orrs	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	071b      	lsls	r3, r3, #28
 80058d2:	4944      	ldr	r1, [pc, #272]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058da:	4b42      	ldr	r3, [pc, #264]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	3b01      	subs	r3, #1
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	493d      	ldr	r1, [pc, #244]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d022      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005908:	d11d      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800590a:	4b36      	ldr	r3, [pc, #216]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005918:	4b32      	ldr	r3, [pc, #200]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	0f1b      	lsrs	r3, r3, #28
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	019a      	lsls	r2, r3, #6
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	431a      	orrs	r2, r3
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	061b      	lsls	r3, r3, #24
 8005938:	431a      	orrs	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	071b      	lsls	r3, r3, #28
 800593e:	4929      	ldr	r1, [pc, #164]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d028      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005952:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005958:	0e1b      	lsrs	r3, r3, #24
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005960:	4b20      	ldr	r3, [pc, #128]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	019a      	lsls	r2, r3, #6
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	431a      	orrs	r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	061b      	lsls	r3, r3, #24
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	071b      	lsls	r3, r3, #28
 8005986:	4917      	ldr	r1, [pc, #92]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800598e:	4b15      	ldr	r3, [pc, #84]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005990:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005994:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	4911      	ldr	r1, [pc, #68]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80059a4:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a0e      	ldr	r2, [pc, #56]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b0:	f7fa fc90 	bl	80002d4 <HAL_GetTick>
 80059b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059b6:	e008      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059b8:	f7fa fc8c 	bl	80002d4 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b64      	cmp	r3, #100	@ 0x64
 80059c4:	d901      	bls.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e007      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ca:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059d6:	d1ef      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800

080059e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a06:	f040 808d 	bne.w	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005a0a:	4b93      	ldr	r3, [pc, #588]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a10:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005a18:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a20:	d07c      	beq.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a28:	d87b      	bhi.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a36:	d039      	beq.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005a38:	e073      	b.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a3a:	4b87      	ldr	r3, [pc, #540]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d108      	bne.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a46:	4b84      	ldr	r3, [pc, #528]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a4e:	4a83      	ldr	r2, [pc, #524]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	e007      	b.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005a58:	4b7f      	ldr	r3, [pc, #508]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a60:	4a7f      	ldr	r2, [pc, #508]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a66:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005a68:	4b7b      	ldr	r3, [pc, #492]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6e:	0e1b      	lsrs	r3, r3, #24
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005a76:	4b78      	ldr	r3, [pc, #480]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7c:	099b      	lsrs	r3, r3, #6
 8005a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	fb03 f202 	mul.w	r2, r3, r2
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005a90:	4b71      	ldr	r3, [pc, #452]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
        break;
 8005aaa:	e03b      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005aac:	4b6a      	ldr	r3, [pc, #424]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d108      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ab8:	4b67      	ldr	r3, [pc, #412]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ac0:	4a66      	ldr	r2, [pc, #408]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	e007      	b.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005aca:	4b63      	ldr	r3, [pc, #396]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad2:	4a63      	ldr	r2, [pc, #396]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005ada:	4b5f      	ldr	r3, [pc, #380]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ae0:	0e1b      	lsrs	r3, r3, #24
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005ae8:	4b5b      	ldr	r3, [pc, #364]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aee:	099b      	lsrs	r3, r3, #6
 8005af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	fb03 f202 	mul.w	r2, r3, r2
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005b02:	4b55      	ldr	r3, [pc, #340]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]
        break;
 8005b1a:	e003      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b1c:	4b51      	ldr	r3, [pc, #324]	@ (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005b1e:	617b      	str	r3, [r7, #20]
        break;
 8005b20:	e000      	b.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8005b22:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b2a:	f040 808d 	bne.w	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b34:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005b3c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b44:	d07c      	beq.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b4c:	d87b      	bhi.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b5a:	d039      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005b5c:	e073      	b.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d108      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b72:	4a3a      	ldr	r2, [pc, #232]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	e007      	b.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005b7c:	4b36      	ldr	r3, [pc, #216]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b84:	4a36      	ldr	r2, [pc, #216]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005b8c:	4b32      	ldr	r3, [pc, #200]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b92:	0e1b      	lsrs	r3, r3, #24
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba0:	099b      	lsrs	r3, r3, #6
 8005ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	fb03 f202 	mul.w	r2, r3, r2
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005bb4:	4b28      	ldr	r3, [pc, #160]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]
        break;
 8005bce:	e03b      	b.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005bd0:	4b21      	ldr	r3, [pc, #132]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d108      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	e007      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005bee:	4b1a      	ldr	r3, [pc, #104]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005bfe:	4b16      	ldr	r3, [pc, #88]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c04:	0e1b      	lsrs	r3, r3, #24
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005c0c:	4b12      	ldr	r3, [pc, #72]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c12:	099b      	lsrs	r3, r3, #6
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	fb03 f202 	mul.w	r2, r3, r2
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005c26:	4b0c      	ldr	r3, [pc, #48]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]
        break;
 8005c3e:	e003      	b.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c40:	4b08      	ldr	r3, [pc, #32]	@ (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005c42:	617b      	str	r3, [r7, #20]
        break;
 8005c44:	e000      	b.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8005c46:	bf00      	nop
      }
    }
  }

  return frequency;
 8005c48:	697b      	ldr	r3, [r7, #20]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	00f42400 	.word	0x00f42400
 8005c60:	017d7840 	.word	0x017d7840
 8005c64:	00bb8000 	.word	0x00bb8000

08005c68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e071      	b.n	8005d5e <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7f5b      	ldrb	r3, [r3, #29]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d105      	bne.n	8005c90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f006 ff7c 	bl	800cb88 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d053      	beq.n	8005d4c <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	22ca      	movs	r2, #202	@ 0xca
 8005caa:	625a      	str	r2, [r3, #36]	@ 0x24
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2253      	movs	r2, #83	@ 0x53
 8005cb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fac7 	bl	8006248 <RTC_EnterInitMode>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d12a      	bne.n	8005d1a <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6899      	ldr	r1, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b26      	ldr	r3, [pc, #152]	@ (8005d68 <HAL_RTC_Init+0x100>)
 8005cd0:	400b      	ands	r3, r1
 8005cd2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6899      	ldr	r1, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68d2      	ldr	r2, [r2, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6919      	ldr	r1, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	041a      	lsls	r2, r3, #16
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fad0 	bl	80062b6 <RTC_ExitInitMode>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d110      	bne.n	8005d42 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0208 	bic.w	r2, r2, #8
 8005d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	22ff      	movs	r2, #255	@ 0xff
 8005d48:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d4a:	e001      	b.n	8005d50 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	ff8fffbf 	.word	0xff8fffbf

08005d6c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	7f1b      	ldrb	r3, [r3, #28]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_RTC_SetTime+0x1c>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e085      	b.n	8005e94 <HAL_RTC_SetTime+0x128>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2202      	movs	r2, #2
 8005d92:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d126      	bne.n	8005de8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d102      	bne.n	8005dae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2200      	movs	r2, #0
 8005dac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 faa4 	bl	8006300 <RTC_ByteToBcd2>
 8005db8:	4603      	mov	r3, r0
 8005dba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	785b      	ldrb	r3, [r3, #1]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fa9d 	bl	8006300 <RTC_ByteToBcd2>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005dca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	789b      	ldrb	r3, [r3, #2]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fa95 	bl	8006300 <RTC_ByteToBcd2>
 8005dd6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005dd8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	78db      	ldrb	r3, [r3, #3]
 8005de0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e018      	b.n	8005e1a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d102      	bne.n	8005dfc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	785b      	ldrb	r3, [r3, #1]
 8005e06:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e08:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e0e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	78db      	ldrb	r3, [r3, #3]
 8005e14:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	22ca      	movs	r2, #202	@ 0xca
 8005e20:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2253      	movs	r2, #83	@ 0x53
 8005e28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fa0c 	bl	8006248 <RTC_EnterInitMode>
 8005e30:	4603      	mov	r3, r0
 8005e32:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005e34:	7cfb      	ldrb	r3, [r7, #19]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d11e      	bne.n	8005e78 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	6979      	ldr	r1, [r7, #20]
 8005e40:	4b16      	ldr	r3, [pc, #88]	@ (8005e9c <HAL_RTC_SetTime+0x130>)
 8005e42:	400b      	ands	r3, r1
 8005e44:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6899      	ldr	r1, [r3, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fa21 	bl	80062b6 <RTC_ExitInitMode>
 8005e74:	4603      	mov	r3, r0
 8005e76:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e78:	7cfb      	ldrb	r3, [r7, #19]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	22ff      	movs	r2, #255	@ 0xff
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	771a      	strb	r2, [r3, #28]

  return status;
 8005e92:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd90      	pop	{r4, r7, pc}
 8005e9c:	007f7f7f 	.word	0x007f7f7f

08005ea0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ea0:	b590      	push	{r4, r7, lr}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	7f1b      	ldrb	r3, [r3, #28]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_RTC_SetDate+0x1c>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e06f      	b.n	8005f9c <HAL_RTC_SetDate+0xfc>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10e      	bne.n	8005eec <HAL_RTC_SetDate+0x4c>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	f023 0310 	bic.w	r3, r3, #16
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	330a      	adds	r3, #10
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d11c      	bne.n	8005f2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	78db      	ldrb	r3, [r3, #3]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fa02 	bl	8006300 <RTC_ByteToBcd2>
 8005efc:	4603      	mov	r3, r0
 8005efe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 f9fb 	bl	8006300 <RTC_ByteToBcd2>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	789b      	ldrb	r3, [r3, #2]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f9f3 	bl	8006300 <RTC_ByteToBcd2>
 8005f1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005f1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e00e      	b.n	8005f4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	785b      	ldrb	r3, [r3, #1]
 8005f36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f38:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005f3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	22ca      	movs	r2, #202	@ 0xca
 8005f50:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2253      	movs	r2, #83	@ 0x53
 8005f58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f974 	bl	8006248 <RTC_EnterInitMode>
 8005f60:	4603      	mov	r3, r0
 8005f62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005f64:	7cfb      	ldrb	r3, [r7, #19]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	6979      	ldr	r1, [r7, #20]
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <HAL_RTC_SetDate+0x104>)
 8005f72:	400b      	ands	r3, r1
 8005f74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f99d 	bl	80062b6 <RTC_ExitInitMode>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005f80:	7cfb      	ldrb	r3, [r7, #19]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	22ff      	movs	r2, #255	@ 0xff
 8005f92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	771a      	strb	r2, [r3, #28]

  return status;
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd90      	pop	{r4, r7, pc}
 8005fa4:	00ffff3f 	.word	0x00ffff3f

08005fa8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b089      	sub	sp, #36	@ 0x24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	7f1b      	ldrb	r3, [r3, #28]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_RTC_SetAlarm+0x24>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e113      	b.n	80061f4 <HAL_RTC_SetAlarm+0x24c>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d137      	bne.n	800604e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d102      	bne.n	8005ff2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f982 	bl	8006300 <RTC_ByteToBcd2>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	4618      	mov	r0, r3
 8006006:	f000 f97b 	bl	8006300 <RTC_ByteToBcd2>
 800600a:	4603      	mov	r3, r0
 800600c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800600e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	789b      	ldrb	r3, [r3, #2]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 f973 	bl	8006300 <RTC_ByteToBcd2>
 800601a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800601c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	78db      	ldrb	r3, [r3, #3]
 8006024:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006026:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006030:	4618      	mov	r0, r3
 8006032:	f000 f965 	bl	8006300 <RTC_ByteToBcd2>
 8006036:	4603      	mov	r3, r0
 8006038:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800603a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006042:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006048:	4313      	orrs	r3, r2
 800604a:	61fb      	str	r3, [r7, #28]
 800604c:	e023      	b.n	8006096 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800606e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006074:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	78db      	ldrb	r3, [r3, #3]
 800607a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800607c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006084:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006086:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800608c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006092:	4313      	orrs	r3, r2
 8006094:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	22ca      	movs	r2, #202	@ 0xca
 80060a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2253      	movs	r2, #83	@ 0x53
 80060b0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060ba:	d148      	bne.n	800614e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060ca:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80060da:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80060ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060ee:	f7fa f8f1 	bl	80002d4 <HAL_GetTick>
 80060f2:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80060f4:	e013      	b.n	800611e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060f6:	f7fa f8ed 	bl	80002d4 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006104:	d90b      	bls.n	800611e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	22ff      	movs	r2, #255	@ 0xff
 800610c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2203      	movs	r2, #3
 8006112:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e06a      	b.n	80061f4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0e4      	beq.n	80060f6 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800614a:	609a      	str	r2, [r3, #8]
 800614c:	e047      	b.n	80061de <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800615c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800616c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800617e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006180:	f7fa f8a8 	bl	80002d4 <HAL_GetTick>
 8006184:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006186:	e013      	b.n	80061b0 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006188:	f7fa f8a4 	bl	80002d4 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006196:	d90b      	bls.n	80061b0 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	22ff      	movs	r2, #255	@ 0xff
 800619e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2203      	movs	r2, #3
 80061a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e021      	b.n	80061f4 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0e4      	beq.n	8006188 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	22ff      	movs	r2, #255	@ 0xff
 80061e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3724      	adds	r7, #36	@ 0x24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd90      	pop	{r4, r7, pc}

080061fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a0d      	ldr	r2, [pc, #52]	@ (8006244 <HAL_RTC_WaitForSynchro+0x48>)
 800620e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006210:	f7fa f860 	bl	80002d4 <HAL_GetTick>
 8006214:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006216:	e009      	b.n	800622c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006218:	f7fa f85c 	bl	80002d4 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006226:	d901      	bls.n	800622c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e007      	b.n	800623c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0ee      	beq.n	8006218 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	0001ff5f 	.word	0x0001ff5f

08006248 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d122      	bne.n	80062ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006274:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006276:	f7fa f82d 	bl	80002d4 <HAL_GetTick>
 800627a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800627c:	e00c      	b.n	8006298 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800627e:	f7fa f829 	bl	80002d4 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800628c:	d904      	bls.n	8006298 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2204      	movs	r2, #4
 8006292:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <RTC_EnterInitMode+0x64>
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d1e8      	bne.n	800627e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b084      	sub	sp, #16
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff8b 	bl	80061fc <HAL_RTC_WaitForSynchro>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2204      	movs	r2, #4
 80062f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	4603      	mov	r3, r0
 8006308:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800630e:	e005      	b.n	800631c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	3b0a      	subs	r3, #10
 800631a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800631c:	79fb      	ldrb	r3, [r7, #7]
 800631e:	2b09      	cmp	r3, #9
 8006320:	d8f6      	bhi.n	8006310 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	b2da      	uxtb	r2, r3
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	4313      	orrs	r3, r2
 800632e:	b2db      	uxtb	r3, r3
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	7f1b      	ldrb	r3, [r3, #28]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_RTCEx_SetTimeStamp+0x1c>
 8006354:	2302      	movs	r3, #2
 8006356:	e050      	b.n	80063fa <HAL_RTCEx_SetTimeStamp+0xbe>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2202      	movs	r2, #2
 8006362:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0206 	bic.w	r2, r2, #6
 8006372:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	430a      	orrs	r2, r1
 8006382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	4b1f      	ldr	r3, [pc, #124]	@ (8006408 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800638c:	4013      	ands	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	22ca      	movs	r2, #202	@ 0xca
 800639e:	625a      	str	r2, [r3, #36]	@ 0x24
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2253      	movs	r2, #83	@ 0x53
 80063a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80063c0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80063d2:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	22ff      	movs	r2, #255	@ 0xff
 80063ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	fffff7f7 	.word	0xfffff7f7

0800640c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e156      	b.n	80066d8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f006 fc78 	bl	800cd34 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f95b 	bl	8006708 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d00c      	beq.n	8006474 <HAL_SAI_Init+0x68>
 800645a:	2b02      	cmp	r3, #2
 800645c:	d80d      	bhi.n	800647a <HAL_SAI_Init+0x6e>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_SAI_Init+0x5c>
 8006462:	2b01      	cmp	r3, #1
 8006464:	d003      	beq.n	800646e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8006466:	e008      	b.n	800647a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	61fb      	str	r3, [r7, #28]
      break;
 800646c:	e006      	b.n	800647c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800646e:	2310      	movs	r3, #16
 8006470:	61fb      	str	r3, [r7, #28]
      break;
 8006472:	e003      	b.n	800647c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006474:	2320      	movs	r3, #32
 8006476:	61fb      	str	r3, [r7, #28]
      break;
 8006478:	e000      	b.n	800647c <HAL_SAI_Init+0x70>
      break;
 800647a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d81e      	bhi.n	80064c2 <HAL_SAI_Init+0xb6>
 8006484:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <HAL_SAI_Init+0x80>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	0800649d 	.word	0x0800649d
 8006490:	080064a3 	.word	0x080064a3
 8006494:	080064ab 	.word	0x080064ab
 8006498:	080064b3 	.word	0x080064b3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
    }
    break;
 80064a0:	e010      	b.n	80064c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80064a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064a6:	617b      	str	r3, [r7, #20]
    }
    break;
 80064a8:	e00c      	b.n	80064c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80064ae:	617b      	str	r3, [r7, #20]
    }
    break;
 80064b0:	e008      	b.n	80064c4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80064b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80064b6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
    }
    break;
 80064c0:	e000      	b.n	80064c4 <HAL_SAI_Init+0xb8>
    default:
      break;
 80064c2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a85      	ldr	r2, [pc, #532]	@ (80066e0 <HAL_SAI_Init+0x2d4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_SAI_Init+0xcc>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a84      	ldr	r2, [pc, #528]	@ (80066e4 <HAL_SAI_Init+0x2d8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d103      	bne.n	80064e0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80064d8:	4a83      	ldr	r2, [pc, #524]	@ (80066e8 <HAL_SAI_Init+0x2dc>)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e002      	b.n	80064e6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80064e0:	4a82      	ldr	r2, [pc, #520]	@ (80066ec <HAL_SAI_Init+0x2e0>)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d04c      	beq.n	8006588 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a7a      	ldr	r2, [pc, #488]	@ (80066e0 <HAL_SAI_Init+0x2d4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d004      	beq.n	8006506 <HAL_SAI_Init+0xfa>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a78      	ldr	r2, [pc, #480]	@ (80066e4 <HAL_SAI_Init+0x2d8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d104      	bne.n	8006510 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006506:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800650a:	f7ff fa6d 	bl	80059e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800650e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a76      	ldr	r2, [pc, #472]	@ (80066f0 <HAL_SAI_Init+0x2e4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_SAI_Init+0x118>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a75      	ldr	r2, [pc, #468]	@ (80066f4 <HAL_SAI_Init+0x2e8>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d104      	bne.n	800652e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006524:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006528:	f7ff fa5e 	bl	80059e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800652c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	461a      	mov	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	025b      	lsls	r3, r3, #9
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a6b      	ldr	r2, [pc, #428]	@ (80066f8 <HAL_SAI_Init+0x2ec>)
 800654a:	fba2 2303 	umull	r2, r3, r2, r3
 800654e:	08da      	lsrs	r2, r3, #3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8006554:	68f9      	ldr	r1, [r7, #12]
 8006556:	4b68      	ldr	r3, [pc, #416]	@ (80066f8 <HAL_SAI_Init+0x2ec>)
 8006558:	fba3 2301 	umull	r2, r3, r3, r1
 800655c:	08da      	lsrs	r2, r3, #3
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	1aca      	subs	r2, r1, r3
 8006568:	2a08      	cmp	r2, #8
 800656a:	d904      	bls.n	8006576 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657a:	2b04      	cmp	r3, #4
 800657c:	d104      	bne.n	8006588 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	085a      	lsrs	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_SAI_Init+0x18c>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d109      	bne.n	80065ac <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_SAI_Init+0x198>
 80065a0:	2300      	movs	r3, #0
 80065a2:	e001      	b.n	80065a8 <HAL_SAI_Init+0x19c>
 80065a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	e008      	b.n	80065be <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d102      	bne.n	80065ba <HAL_SAI_Init+0x1ae>
 80065b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065b8:	e000      	b.n	80065bc <HAL_SAI_Init+0x1b0>
 80065ba:	2300      	movs	r3, #0
 80065bc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	4b4c      	ldr	r3, [pc, #304]	@ (80066fc <HAL_SAI_Init+0x2f0>)
 80065ca:	400b      	ands	r3, r1
 80065cc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6819      	ldr	r1, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80065e2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	431a      	orrs	r2, r3
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 80065f6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006602:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	051b      	lsls	r3, r3, #20
 800660a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6859      	ldr	r1, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b38      	ldr	r3, [pc, #224]	@ (8006700 <HAL_SAI_Init+0x2f4>)
 8006620:	400b      	ands	r3, r1
 8006622:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6859      	ldr	r1, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6899      	ldr	r1, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	4b2d      	ldr	r3, [pc, #180]	@ (8006704 <HAL_SAI_Init+0x2f8>)
 800664e:	400b      	ands	r3, r1
 8006650:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6899      	ldr	r1, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006662:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8006668:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800666e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006674:	3b01      	subs	r3, #1
 8006676:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006678:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68d9      	ldr	r1, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8006690:	400b      	ands	r3, r1
 8006692:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68d9      	ldr	r1, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066a8:	041b      	lsls	r3, r3, #16
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b0:	3b01      	subs	r3, #1
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	40015804 	.word	0x40015804
 80066e4:	40015824 	.word	0x40015824
 80066e8:	40015800 	.word	0x40015800
 80066ec:	40015c00 	.word	0x40015c00
 80066f0:	40015c04 	.word	0x40015c04
 80066f4:	40015c24 	.word	0x40015c24
 80066f8:	cccccccd 	.word	0xcccccccd
 80066fc:	ff05c010 	.word	0xff05c010
 8006700:	ffff1ff0 	.word	0xffff1ff0
 8006704:	fff88000 	.word	0xfff88000

08006708 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006710:	4b17      	ldr	r3, [pc, #92]	@ (8006770 <SAI_Disable+0x68>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a17      	ldr	r2, [pc, #92]	@ (8006774 <SAI_Disable+0x6c>)
 8006716:	fba2 2303 	umull	r2, r3, r2, r3
 800671a:	0b1b      	lsrs	r3, r3, #12
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006732:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	1e5a      	subs	r2, r3, #1
 8006738:	60fa      	str	r2, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006744:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	72fb      	strb	r3, [r7, #11]
      break;
 8006752:	e006      	b.n	8006762 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e8      	bne.n	8006734 <SAI_Disable+0x2c>

  return status;
 8006762:	7afb      	ldrb	r3, [r7, #11]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20000008 	.word	0x20000008
 8006774:	95cbec1b 	.word	0x95cbec1b

08006778 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e022      	b.n	80067d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f006 fb53 	bl	800ce48 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2203      	movs	r2, #3
 80067a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f814 	bl	80067d8 <HAL_SD_InitCard>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e00a      	b.n	80067d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067d8:	b5b0      	push	{r4, r5, r7, lr}
 80067da:	b08e      	sub	sp, #56	@ 0x38
 80067dc:	af04      	add	r7, sp, #16
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80067f4:	2376      	movs	r3, #118	@ 0x76
 80067f6:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681d      	ldr	r5, [r3, #0]
 80067fc:	466c      	mov	r4, sp
 80067fe:	f107 0318 	add.w	r3, r7, #24
 8006802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800680a:	f107 030c 	add.w	r3, r7, #12
 800680e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006810:	4628      	mov	r0, r5
 8006812:	f002 ffc3 	bl	800979c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006824:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f002 ffef 	bl	800980e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800683e:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006840:	2002      	movs	r0, #2
 8006842:	f7f9 fd53 	bl	80002ec <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fe10 	bl	800746c <SD_PowerON>
 800684c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00b      	beq.n	800686c <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e02e      	b.n	80068ca <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fd2f 	bl	80072d0 <SD_InitCard>
 8006872:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e01b      	b.n	80068ca <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800689a:	4618      	mov	r0, r3
 800689c:	f003 f84a 	bl	8009934 <SDMMC_CmdBlockLength>
 80068a0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00f      	beq.n	80068c8 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a09      	ldr	r2, [pc, #36]	@ (80068d4 <HAL_SD_InitCard+0xfc>)
 80068ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3728      	adds	r7, #40	@ 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bdb0      	pop	{r4, r5, r7, pc}
 80068d2:	bf00      	nop
 80068d4:	004005ff 	.word	0x004005ff

080068d8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	@ 0x30
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d107      	bne.n	8006900 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e0c3      	b.n	8006a88 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	f040 80bc 	bne.w	8006a86 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	441a      	add	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800691e:	429a      	cmp	r2, r3
 8006920:	d907      	bls.n	8006932 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e0aa      	b.n	8006a88 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2203      	movs	r2, #3
 8006936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2200      	movs	r2, #0
 8006940:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8006950:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006956:	4a4e      	ldr	r2, [pc, #312]	@ (8006a90 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006958:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695e:	4a4d      	ldr	r2, [pc, #308]	@ (8006a94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006960:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006966:	2200      	movs	r2, #0
 8006968:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3380      	adds	r3, #128	@ 0x80
 8006998:	4619      	mov	r1, r3
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	025b      	lsls	r3, r3, #9
 80069a0:	089b      	lsrs	r3, r3, #2
 80069a2:	f7fa f9ad 	bl	8000d00 <HAL_DMA_Start_IT>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d017      	beq.n	80069dc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80069ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a35      	ldr	r2, [pc, #212]	@ (8006a98 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80069c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e055      	b.n	8006a88 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0208 	orr.w	r2, r2, #8
 80069ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d002      	beq.n	80069fa <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	025b      	lsls	r3, r3, #9
 80069f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069fa:	f04f 33ff 	mov.w	r3, #4294967295
 80069fe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	025b      	lsls	r3, r3, #9
 8006a04:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006a06:	2390      	movs	r3, #144	@ 0x90
 8006a08:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f107 0210 	add.w	r2, r7, #16
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f002 ff5b 	bl	80098dc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d90a      	bls.n	8006a42 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2282      	movs	r2, #130	@ 0x82
 8006a30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f002 ffbf 	bl	80099bc <SDMMC_CmdReadMultiBlock>
 8006a3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006a40:	e009      	b.n	8006a56 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2281      	movs	r2, #129	@ 0x81
 8006a46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f002 ff92 	bl	8009978 <SDMMC_CmdReadSingleBlock>
 8006a54:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d012      	beq.n	8006a82 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0d      	ldr	r2, [pc, #52]	@ (8006a98 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006a62:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e002      	b.n	8006a88 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e000      	b.n	8006a88 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
  }
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3730      	adds	r7, #48	@ 0x30
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	080071bb 	.word	0x080071bb
 8006a94:	0800722d 	.word	0x0800722d
 8006a98:	004005ff 	.word	0x004005ff

08006a9c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08c      	sub	sp, #48	@ 0x30
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0c6      	b.n	8006c52 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	f040 80bf 	bne.w	8006c50 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	441a      	add	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d907      	bls.n	8006af6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e0ad      	b.n	8006c52 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2203      	movs	r2, #3
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 021a 	orr.w	r2, r2, #26
 8006b14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b1a:	4a50      	ldr	r2, [pc, #320]	@ (8006c5c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b22:	4a4f      	ldr	r2, [pc, #316]	@ (8006c60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006b24:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d002      	beq.n	8006b3c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	025b      	lsls	r3, r3, #9
 8006b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d90a      	bls.n	8006b58 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	22a0      	movs	r2, #160	@ 0xa0
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f002 ff78 	bl	8009a44 <SDMMC_CmdWriteMultiBlock>
 8006b54:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006b56:	e009      	b.n	8006b6c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2290      	movs	r2, #144	@ 0x90
 8006b5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b64:	4618      	mov	r0, r3
 8006b66:	f002 ff4b 	bl	8009a00 <SDMMC_CmdWriteSingleBlock>
 8006b6a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d012      	beq.n	8006b98 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a3b      	ldr	r2, [pc, #236]	@ (8006c64 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006b78:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e05c      	b.n	8006c52 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0208 	orr.w	r2, r2, #8
 8006ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	2240      	movs	r2, #64	@ 0x40
 8006bae:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3380      	adds	r3, #128	@ 0x80
 8006bd8:	461a      	mov	r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	025b      	lsls	r3, r3, #9
 8006bde:	089b      	lsrs	r3, r3, #2
 8006be0:	f7fa f88e 	bl	8000d00 <HAL_DMA_Start_IT>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01a      	beq.n	8006c20 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 021a 	bic.w	r2, r2, #26
 8006bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a19      	ldr	r2, [pc, #100]	@ (8006c64 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006c00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c06:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e018      	b.n	8006c52 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c20:	f04f 33ff 	mov.w	r3, #4294967295
 8006c24:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	025b      	lsls	r3, r3, #9
 8006c2a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c2c:	2390      	movs	r3, #144	@ 0x90
 8006c2e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f107 0210 	add.w	r2, r7, #16
 8006c44:	4611      	mov	r1, r2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f002 fe48 	bl	80098dc <SDMMC_ConfigData>

      return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3730      	adds	r7, #48	@ 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08007191 	.word	0x08007191
 8006c60:	0800722d 	.word	0x0800722d
 8006c64:	004005ff 	.word	0x004005ff

08006c68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c8a:	0f9b      	lsrs	r3, r3, #30
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c96:	0e9b      	lsrs	r3, r3, #26
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ca8:	0e1b      	lsrs	r3, r3, #24
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cba:	0c1b      	lsrs	r3, r3, #16
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cdc:	0d1b      	lsrs	r3, r3, #20
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cfa:	0bdb      	lsrs	r3, r3, #15
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d0c:	0b9b      	lsrs	r3, r3, #14
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d1e:	0b5b      	lsrs	r3, r3, #13
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d30:	0b1b      	lsrs	r3, r3, #12
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2200      	movs	r2, #0
 8006d42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d163      	bne.n	8006e14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d50:	009a      	lsls	r2, r3, #2
 8006d52:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d56:	4013      	ands	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006d5c:	0f92      	lsrs	r2, r2, #30
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d68:	0edb      	lsrs	r3, r3, #27
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d7a:	0e1b      	lsrs	r3, r3, #24
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d8c:	0d5b      	lsrs	r3, r3, #21
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d9e:	0c9b      	lsrs	r3, r3, #18
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006db0:	0bdb      	lsrs	r3, r3, #15
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	7e1b      	ldrb	r3, [r3, #24]
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	3302      	adds	r3, #2
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006dde:	fb03 f202 	mul.w	r2, r3, r2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	7a1b      	ldrb	r3, [r3, #8]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	2201      	movs	r2, #1
 8006df2:	409a      	lsls	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006e00:	0a52      	lsrs	r2, r2, #9
 8006e02:	fb03 f202 	mul.w	r2, r3, r2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e10:	661a      	str	r2, [r3, #96]	@ 0x60
 8006e12:	e031      	b.n	8006e78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d11d      	bne.n	8006e58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e2a:	0c1b      	lsrs	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	3301      	adds	r3, #1
 8006e38:	029a      	lsls	r2, r3, #10
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e4c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	661a      	str	r2, [r3, #96]	@ 0x60
 8006e56:	e00f      	b.n	8006e78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a58      	ldr	r2, [pc, #352]	@ (8006fc0 <HAL_SD_GetCardCSD+0x344>)
 8006e5e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e09d      	b.n	8006fb4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e7c:	0b9b      	lsrs	r3, r3, #14
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e8e:	09db      	lsrs	r3, r3, #7
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb0:	0fdb      	lsrs	r3, r3, #31
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebc:	0f5b      	lsrs	r3, r3, #29
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ece:	0e9b      	lsrs	r3, r3, #26
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee0:	0d9b      	lsrs	r3, r3, #22
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef2:	0d5b      	lsrs	r3, r3, #21
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f003 0301 	and.w	r3, r3, #1
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f0e:	0c1b      	lsrs	r3, r3, #16
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f22:	0bdb      	lsrs	r3, r3, #15
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f36:	0b9b      	lsrs	r3, r3, #14
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4a:	0b5b      	lsrs	r3, r3, #13
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f5e:	0b1b      	lsrs	r3, r3, #12
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f72:	0a9b      	lsrs	r3, r3, #10
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	004005ff 	.word	0x004005ff

08006fc4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800701c:	b5b0      	push	{r4, r5, r7, lr}
 800701e:	b08e      	sub	sp, #56	@ 0x38
 8007020:	af04      	add	r7, sp, #16
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2203      	movs	r2, #3
 8007030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007038:	2b03      	cmp	r3, #3
 800703a:	d02e      	beq.n	800709a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007042:	d106      	bne.n	8007052 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007048:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007050:	e029      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007058:	d10a      	bne.n	8007070 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fabc 	bl	80075d8 <SD_WideBus_Enable>
 8007060:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	639a      	str	r2, [r3, #56]	@ 0x38
 800706e:	e01a      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 faf9 	bl	800766e <SD_WideBus_Disable>
 800707c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	639a      	str	r2, [r3, #56]	@ 0x38
 800708a:	e00c      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007090:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
 8007098:	e005      	b.n	80070a6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a26      	ldr	r2, [pc, #152]	@ (800714c <HAL_SD_ConfigWideBusOperation+0x130>)
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80070c4:	e01f      	b.n	8007106 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681d      	ldr	r5, [r3, #0]
 80070ec:	466c      	mov	r4, sp
 80070ee:	f107 0314 	add.w	r3, r7, #20
 80070f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070fa:	f107 0308 	add.w	r3, r7, #8
 80070fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007100:	4628      	mov	r0, r5
 8007102:	f002 fb4b 	bl	800979c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800710e:	4618      	mov	r0, r3
 8007110:	f002 fc10 	bl	8009934 <SDMMC_CmdBlockLength>
 8007114:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00c      	beq.n	8007136 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a0a      	ldr	r2, [pc, #40]	@ (800714c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007122:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800713e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007142:	4618      	mov	r0, r3
 8007144:	3728      	adds	r7, #40	@ 0x28
 8007146:	46bd      	mov	sp, r7
 8007148:	bdb0      	pop	{r4, r5, r7, pc}
 800714a:	bf00      	nop
 800714c:	004005ff 	.word	0x004005ff

08007150 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800715c:	f107 030c 	add.w	r3, r7, #12
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa10 	bl	8007588 <SD_SendStatus>
 8007168:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	0a5b      	lsrs	r3, r3, #9
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007186:	693b      	ldr	r3, [r7, #16]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071cc:	2b82      	cmp	r3, #130	@ 0x82
 80071ce:	d111      	bne.n	80071f4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f002 fc57 	bl	8009a88 <SDMMC_CmdStopTransfer>
 80071da:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fd3a 	bl	8006c68 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0208 	bic.w	r2, r2, #8
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f240 523a 	movw	r2, #1338	@ 0x53a
 800720c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f009 fbbb 	bl	8010998 <HAL_SD_RxCpltCallback>
#endif
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7f9 fdc0 	bl	8000dc0 <HAL_DMA_GetError>
 8007240:	4603      	mov	r3, r0
 8007242:	2b02      	cmp	r3, #2
 8007244:	d03e      	beq.n	80072c4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800724c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007254:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d002      	beq.n	8007262 <SD_DMAError+0x36>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d12d      	bne.n	80072be <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a19      	ldr	r2, [pc, #100]	@ (80072cc <SD_DMAError+0xa0>)
 8007268:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8007278:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007286:	6978      	ldr	r0, [r7, #20]
 8007288:	f7ff ff62 	bl	8007150 <HAL_SD_GetCardState>
 800728c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b06      	cmp	r3, #6
 8007292:	d002      	beq.n	800729a <SD_DMAError+0x6e>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b05      	cmp	r3, #5
 8007298:	d10a      	bne.n	80072b0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f002 fbf2 	bl	8009a88 <SDMMC_CmdStopTransfer>
 80072a4:	4602      	mov	r2, r0
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	431a      	orrs	r2, r3
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2200      	movs	r2, #0
 80072bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80072be:	6978      	ldr	r0, [r7, #20]
 80072c0:	f7ff fcd2 	bl	8006c68 <HAL_SD_ErrorCallback>
#endif
  }
}
 80072c4:	bf00      	nop
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	004005ff 	.word	0x004005ff

080072d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80072d0:	b5b0      	push	{r4, r5, r7, lr}
 80072d2:	b094      	sub	sp, #80	@ 0x50
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80072d8:	2301      	movs	r3, #1
 80072da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f002 faa2 	bl	800982a <SDMMC_GetPowerState>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80072f0:	e0b8      	b.n	8007464 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d02f      	beq.n	800735a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f002 fccd 	bl	8009c9e <SDMMC_CmdSendCID>
 8007304:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <SD_InitCard+0x40>
    {
      return errorstate;
 800730c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730e:	e0a9      	b.n	8007464 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2100      	movs	r1, #0
 8007316:	4618      	mov	r0, r3
 8007318:	f002 facd 	bl	80098b6 <SDMMC_GetResponse>
 800731c:	4602      	mov	r2, r0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2104      	movs	r1, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f002 fac4 	bl	80098b6 <SDMMC_GetResponse>
 800732e:	4602      	mov	r2, r0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2108      	movs	r1, #8
 800733a:	4618      	mov	r0, r3
 800733c:	f002 fabb 	bl	80098b6 <SDMMC_GetResponse>
 8007340:	4602      	mov	r2, r0
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	210c      	movs	r1, #12
 800734c:	4618      	mov	r0, r3
 800734e:	f002 fab2 	bl	80098b6 <SDMMC_GetResponse>
 8007352:	4602      	mov	r2, r0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800735e:	2b03      	cmp	r3, #3
 8007360:	d00d      	beq.n	800737e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f107 020e 	add.w	r2, r7, #14
 800736a:	4611      	mov	r1, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f002 fcd3 	bl	8009d18 <SDMMC_CmdSetRelAdd>
 8007372:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <SD_InitCard+0xae>
    {
      return errorstate;
 800737a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800737c:	e072      	b.n	8007464 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	2b03      	cmp	r3, #3
 8007384:	d036      	beq.n	80073f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007386:	89fb      	ldrh	r3, [r7, #14]
 8007388:	461a      	mov	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	4619      	mov	r1, r3
 800739a:	4610      	mov	r0, r2
 800739c:	f002 fc9d 	bl	8009cda <SDMMC_CmdSendCSD>
 80073a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80073a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073aa:	e05b      	b.n	8007464 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f002 fa7f 	bl	80098b6 <SDMMC_GetResponse>
 80073b8:	4602      	mov	r2, r0
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2104      	movs	r1, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f002 fa76 	bl	80098b6 <SDMMC_GetResponse>
 80073ca:	4602      	mov	r2, r0
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2108      	movs	r1, #8
 80073d6:	4618      	mov	r0, r3
 80073d8:	f002 fa6d 	bl	80098b6 <SDMMC_GetResponse>
 80073dc:	4602      	mov	r2, r0
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	210c      	movs	r1, #12
 80073e8:	4618      	mov	r0, r3
 80073ea:	f002 fa64 	bl	80098b6 <SDMMC_GetResponse>
 80073ee:	4602      	mov	r2, r0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2104      	movs	r1, #4
 80073fa:	4618      	mov	r0, r3
 80073fc:	f002 fa5b 	bl	80098b6 <SDMMC_GetResponse>
 8007400:	4603      	mov	r3, r0
 8007402:	0d1a      	lsrs	r2, r3, #20
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007408:	f107 0310 	add.w	r3, r7, #16
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff fc34 	bl	8006c7c <HAL_SD_GetCardCSD>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800741a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800741e:	e021      	b.n	8007464 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6819      	ldr	r1, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007428:	041b      	lsls	r3, r3, #16
 800742a:	2200      	movs	r2, #0
 800742c:	461c      	mov	r4, r3
 800742e:	4615      	mov	r5, r2
 8007430:	4622      	mov	r2, r4
 8007432:	462b      	mov	r3, r5
 8007434:	4608      	mov	r0, r1
 8007436:	f002 fb49 	bl	8009acc <SDMMC_CmdSelDesel>
 800743a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800743c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <SD_InitCard+0x176>
  {
    return errorstate;
 8007442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007444:	e00e      	b.n	8007464 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681d      	ldr	r5, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	466c      	mov	r4, sp
 800744e:	f103 0210 	add.w	r2, r3, #16
 8007452:	ca07      	ldmia	r2, {r0, r1, r2}
 8007454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007458:	3304      	adds	r3, #4
 800745a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800745c:	4628      	mov	r0, r5
 800745e:	f002 f99d 	bl	800979c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3740      	adds	r7, #64	@ 0x40
 8007468:	46bd      	mov	sp, r7
 800746a:	bdb0      	pop	{r4, r5, r7, pc}

0800746c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	617b      	str	r3, [r7, #20]
 800747c:	2300      	movs	r3, #0
 800747e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f002 fb44 	bl	8009b12 <SDMMC_CmdGoIdleState>
 800748a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	e072      	b.n	800757c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f002 fb57 	bl	8009b4e <SDMMC_CmdOperCond>
 80074a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00d      	beq.n	80074c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f002 fb2d 	bl	8009b12 <SDMMC_CmdGoIdleState>
 80074b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d004      	beq.n	80074ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	e05b      	b.n	800757c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d137      	bne.n	8007542 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2100      	movs	r1, #0
 80074d8:	4618      	mov	r0, r3
 80074da:	f002 fb57 	bl	8009b8c <SDMMC_CmdAppCommand>
 80074de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d02d      	beq.n	8007542 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80074ea:	e047      	b.n	800757c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f002 fb4a 	bl	8009b8c <SDMMC_CmdAppCommand>
 80074f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <SD_PowerON+0x98>
    {
      return errorstate;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	e03b      	b.n	800757c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	491e      	ldr	r1, [pc, #120]	@ (8007584 <SD_PowerON+0x118>)
 800750a:	4618      	mov	r0, r3
 800750c:	f002 fb60 	bl	8009bd0 <SDMMC_CmdAppOperCommand>
 8007510:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007518:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800751c:	e02e      	b.n	800757c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f002 f9c6 	bl	80098b6 <SDMMC_GetResponse>
 800752a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	0fdb      	lsrs	r3, r3, #31
 8007530:	2b01      	cmp	r3, #1
 8007532:	d101      	bne.n	8007538 <SD_PowerON+0xcc>
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <SD_PowerON+0xce>
 8007538:	2300      	movs	r3, #0
 800753a:	613b      	str	r3, [r7, #16]

    count++;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	3301      	adds	r3, #1
 8007540:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007548:	4293      	cmp	r3, r2
 800754a:	d802      	bhi.n	8007552 <SD_PowerON+0xe6>
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0cc      	beq.n	80074ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007558:	4293      	cmp	r3, r2
 800755a:	d902      	bls.n	8007562 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800755c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007560:	e00c      	b.n	800757c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44
 8007572:	e002      	b.n	800757a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	c1100000 	.word	0xc1100000

08007588 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007598:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800759c:	e018      	b.n	80075d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f002 fbd5 	bl	8009d5a <SDMMC_CmdSendStatus>
 80075b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <SD_SendStatus+0x34>
  {
    return errorstate;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	e009      	b.n	80075d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f002 f977 	bl	80098b6 <SDMMC_GetResponse>
 80075c8:	4602      	mov	r2, r0
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80075e0:	2300      	movs	r3, #0
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	2300      	movs	r3, #0
 80075e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2100      	movs	r1, #0
 80075ee:	4618      	mov	r0, r3
 80075f0:	f002 f961 	bl	80098b6 <SDMMC_GetResponse>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075fe:	d102      	bne.n	8007606 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007600:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007604:	e02f      	b.n	8007666 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007606:	f107 030c 	add.w	r3, r7, #12
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f879 	bl	8007704 <SD_FindSCR>
 8007612:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	e023      	b.n	8007666 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01c      	beq.n	8007662 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007630:	041b      	lsls	r3, r3, #16
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f002 faa9 	bl	8009b8c <SDMMC_CmdAppCommand>
 800763a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	e00f      	b.n	8007666 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2102      	movs	r1, #2
 800764c:	4618      	mov	r0, r3
 800764e:	f002 fae3 	bl	8009c18 <SDMMC_CmdBusWidth>
 8007652:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	e003      	b.n	8007666 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800765e:	2300      	movs	r3, #0
 8007660:	e001      	b.n	8007666 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007662:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	2300      	movs	r3, #0
 800767c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2100      	movs	r1, #0
 8007684:	4618      	mov	r0, r3
 8007686:	f002 f916 	bl	80098b6 <SDMMC_GetResponse>
 800768a:	4603      	mov	r3, r0
 800768c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007690:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007694:	d102      	bne.n	800769c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007696:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800769a:	e02f      	b.n	80076fc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800769c:	f107 030c 	add.w	r3, r7, #12
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f82e 	bl	8007704 <SD_FindSCR>
 80076a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	e023      	b.n	80076fc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01c      	beq.n	80076f8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	4619      	mov	r1, r3
 80076ca:	4610      	mov	r0, r2
 80076cc:	f002 fa5e 	bl	8009b8c <SDMMC_CmdAppCommand>
 80076d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	e00f      	b.n	80076fc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f002 fa98 	bl	8009c18 <SDMMC_CmdBusWidth>
 80076e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	e003      	b.n	80076fc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e001      	b.n	80076fc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b08f      	sub	sp, #60	@ 0x3c
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800770e:	f7f8 fde1 	bl	80002d4 <HAL_GetTick>
 8007712:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007718:	2300      	movs	r3, #0
 800771a:	60bb      	str	r3, [r7, #8]
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2108      	movs	r1, #8
 800772a:	4618      	mov	r0, r3
 800772c:	f002 f902 	bl	8009934 <SDMMC_CmdBlockLength>
 8007730:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	e0b2      	b.n	80078a2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007744:	041b      	lsls	r3, r3, #16
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f002 fa1f 	bl	8009b8c <SDMMC_CmdAppCommand>
 800774e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	e0a3      	b.n	80078a2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800775a:	f04f 33ff 	mov.w	r3, #4294967295
 800775e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007760:	2308      	movs	r3, #8
 8007762:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007764:	2330      	movs	r3, #48	@ 0x30
 8007766:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007768:	2302      	movs	r3, #2
 800776a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007770:	2301      	movs	r3, #1
 8007772:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f107 0210 	add.w	r2, r7, #16
 800777c:	4611      	mov	r1, r2
 800777e:	4618      	mov	r0, r3
 8007780:	f002 f8ac 	bl	80098dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f002 fa67 	bl	8009c5c <SDMMC_CmdSendSCR>
 800778e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	d02a      	beq.n	80077ec <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007798:	e083      	b.n	80078a2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6819      	ldr	r1, [r3, #0]
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	f107 0208 	add.w	r2, r7, #8
 80077b4:	18d4      	adds	r4, r2, r3
 80077b6:	4608      	mov	r0, r1
 80077b8:	f002 f81c 	bl	80097f4 <SDMMC_ReadFIFO>
 80077bc:	4603      	mov	r3, r0
 80077be:	6023      	str	r3, [r4, #0]
      index++;
 80077c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c2:	3301      	adds	r3, #1
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c6:	e006      	b.n	80077d6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d012      	beq.n	80077fc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80077d6:	f7f8 fd7d 	bl	80002d4 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d102      	bne.n	80077ec <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80077e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80077ea:	e05a      	b.n	80078a2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0cf      	beq.n	800779a <SD_FindSCR+0x96>
 80077fa:	e000      	b.n	80077fe <SD_FindSCR+0xfa>
      break;
 80077fc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007804:	f003 0308 	and.w	r3, r3, #8
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2208      	movs	r2, #8
 8007812:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007814:	2308      	movs	r3, #8
 8007816:	e044      	b.n	80078a2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2202      	movs	r2, #2
 800782c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800782e:	2302      	movs	r3, #2
 8007830:	e037      	b.n	80078a2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2220      	movs	r2, #32
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007848:	2320      	movs	r3, #32
 800784a:	e02a      	b.n	80078a2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	061a      	lsls	r2, r3, #24
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007862:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800786c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	0e1b      	lsrs	r3, r3, #24
 8007872:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007876:	601a      	str	r2, [r3, #0]
    scr++;
 8007878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787a:	3304      	adds	r3, #4
 800787c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	061a      	lsls	r2, r3, #24
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800788a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007894:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	0e1b      	lsrs	r3, r3, #24
 800789a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	373c      	adds	r7, #60	@ 0x3c
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd90      	pop	{r4, r7, pc}

080078aa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e025      	b.n	800790a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f004 fbbe 	bl	800c054 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4619      	mov	r1, r3
 80078ea:	4610      	mov	r0, r2
 80078ec:	f001 fe90 	bl	8009610 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	f001 fee4 	bl	80096c8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e04c      	b.n	80079c0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f005 fb3a 	bl	800cfb4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0203 	bic.w	r2, r2, #3
 8007956:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4b19      	ldr	r3, [pc, #100]	@ (80079c8 <HAL_SPDIFRX_Init+0xb4>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007970:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8007976:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800797c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007982:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8007988:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800798e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007994:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800799a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 80079a0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	fff88407 	.word	0xfff88407

080079cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e09d      	b.n	8007b1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d108      	bne.n	80079f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ee:	d009      	beq.n	8007a04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	61da      	str	r2, [r3, #28]
 80079f6:	e005      	b.n	8007a04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f005 fb6a 	bl	800d0f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a44:	d902      	bls.n	8007a4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	e002      	b.n	8007a52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007a5a:	d007      	beq.n	8007a6c <HAL_SPI_Init+0xa0>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a64:	d002      	beq.n	8007a6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aae:	ea42 0103 	orr.w	r1, r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	0c1b      	lsrs	r3, r3, #16
 8007ac8:	f003 0204 	and.w	r2, r3, #4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	f003 0310 	and.w	r3, r3, #16
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ae8:	ea42 0103 	orr.w	r1, r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69da      	ldr	r2, [r3, #28]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e049      	b.n	8007bc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f005 fe85 	bl	800d858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f000 fc11 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d001      	beq.n	8007be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e054      	b.n	8007c92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0201 	orr.w	r2, r2, #1
 8007bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a26      	ldr	r2, [pc, #152]	@ (8007ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d022      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x80>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c12:	d01d      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x80>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a22      	ldr	r2, [pc, #136]	@ (8007ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d018      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x80>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a21      	ldr	r2, [pc, #132]	@ (8007ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d013      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x80>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cac <HAL_TIM_Base_Start_IT+0xdc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00e      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x80>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d009      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x80>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x80>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d115      	bne.n	8007c7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	4b19      	ldr	r3, [pc, #100]	@ (8007cbc <HAL_TIM_Base_Start_IT+0xec>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b06      	cmp	r3, #6
 8007c60:	d015      	beq.n	8007c8e <HAL_TIM_Base_Start_IT+0xbe>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c68:	d011      	beq.n	8007c8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f042 0201 	orr.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c7a:	e008      	b.n	8007c8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e000      	b.n	8007c90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40010000 	.word	0x40010000
 8007ca4:	40000400 	.word	0x40000400
 8007ca8:	40000800 	.word	0x40000800
 8007cac:	40000c00 	.word	0x40000c00
 8007cb0:	40010400 	.word	0x40010400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40001800 	.word	0x40001800
 8007cbc:	00010007 	.word	0x00010007

08007cc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e049      	b.n	8007d66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f005 fe24 	bl	800d934 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	f000 fb42 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d020      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01b      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f06f 0202 	mvn.w	r2, #2
 8007da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f003 0303 	and.w	r3, r3, #3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fac7 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007dbe:	e005      	b.n	8007dcc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fab9 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 faca 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d020      	beq.n	8007e1e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01b      	beq.n	8007e1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f06f 0204 	mvn.w	r2, #4
 8007dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 faa1 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007e0a:	e005      	b.n	8007e18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa93 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 faa4 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d020      	beq.n	8007e6a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01b      	beq.n	8007e6a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f06f 0208 	mvn.w	r2, #8
 8007e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2204      	movs	r2, #4
 8007e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa7b 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007e56:	e005      	b.n	8007e64 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fa6d 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa7e 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d020      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01b      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f06f 0210 	mvn.w	r2, #16
 8007e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fa55 	bl	800834c <HAL_TIM_IC_CaptureCallback>
 8007ea2:	e005      	b.n	8007eb0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa47 	bl	8008338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fa58 	bl	8008360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00c      	beq.n	8007eda <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d007      	beq.n	8007eda <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f06f 0201 	mvn.w	r2, #1
 8007ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f003 fca7 	bl	800b828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d104      	bne.n	8007eee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fef4 	bl	8008cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00c      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 feec 	bl	8008d04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00c      	beq.n	8007f50 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa12 	bl	8008374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f06f 0220 	mvn.w	r2, #32
 8007f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 feb4 	bl	8008cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f74:	bf00      	nop
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d101      	bne.n	8007f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f96:	2302      	movs	r3, #2
 8007f98:	e0ff      	b.n	800819a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b14      	cmp	r3, #20
 8007fa6:	f200 80f0 	bhi.w	800818a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007faa:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08008005 	.word	0x08008005
 8007fb4:	0800818b 	.word	0x0800818b
 8007fb8:	0800818b 	.word	0x0800818b
 8007fbc:	0800818b 	.word	0x0800818b
 8007fc0:	08008045 	.word	0x08008045
 8007fc4:	0800818b 	.word	0x0800818b
 8007fc8:	0800818b 	.word	0x0800818b
 8007fcc:	0800818b 	.word	0x0800818b
 8007fd0:	08008087 	.word	0x08008087
 8007fd4:	0800818b 	.word	0x0800818b
 8007fd8:	0800818b 	.word	0x0800818b
 8007fdc:	0800818b 	.word	0x0800818b
 8007fe0:	080080c7 	.word	0x080080c7
 8007fe4:	0800818b 	.word	0x0800818b
 8007fe8:	0800818b 	.word	0x0800818b
 8007fec:	0800818b 	.word	0x0800818b
 8007ff0:	08008109 	.word	0x08008109
 8007ff4:	0800818b 	.word	0x0800818b
 8007ff8:	0800818b 	.word	0x0800818b
 8007ffc:	0800818b 	.word	0x0800818b
 8008000:	08008149 	.word	0x08008149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68b9      	ldr	r1, [r7, #8]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fa62 	bl	80084d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0208 	orr.w	r2, r2, #8
 800801e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0204 	bic.w	r2, r2, #4
 800802e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6999      	ldr	r1, [r3, #24]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	691a      	ldr	r2, [r3, #16]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	619a      	str	r2, [r3, #24]
      break;
 8008042:	e0a5      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68b9      	ldr	r1, [r7, #8]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fab4 	bl	80085b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800805e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699a      	ldr	r2, [r3, #24]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800806e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6999      	ldr	r1, [r3, #24]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	021a      	lsls	r2, r3, #8
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	619a      	str	r2, [r3, #24]
      break;
 8008084:	e084      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68b9      	ldr	r1, [r7, #8]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fb0b 	bl	80086a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f042 0208 	orr.w	r2, r2, #8
 80080a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0204 	bic.w	r2, r2, #4
 80080b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69d9      	ldr	r1, [r3, #28]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	61da      	str	r2, [r3, #28]
      break;
 80080c4:	e064      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fb61 	bl	8008794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69d9      	ldr	r1, [r3, #28]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	021a      	lsls	r2, r3, #8
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	430a      	orrs	r2, r1
 8008104:	61da      	str	r2, [r3, #28]
      break;
 8008106:	e043      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68b9      	ldr	r1, [r7, #8]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fb98 	bl	8008844 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0208 	orr.w	r2, r2, #8
 8008122:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0204 	bic.w	r2, r2, #4
 8008132:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691a      	ldr	r2, [r3, #16]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008146:	e023      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68b9      	ldr	r1, [r7, #8]
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fbca 	bl	80088e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008162:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008172:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008188:	e002      	b.n	8008190 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	75fb      	strb	r3, [r7, #23]
      break;
 800818e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop

080081a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_TIM_ConfigClockSource+0x1c>
 80081bc:	2302      	movs	r3, #2
 80081be:	e0b4      	b.n	800832a <HAL_TIM_ConfigClockSource+0x186>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	4b56      	ldr	r3, [pc, #344]	@ (8008334 <HAL_TIM_ConfigClockSource+0x190>)
 80081dc:	4013      	ands	r3, r2
 80081de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f8:	d03e      	beq.n	8008278 <HAL_TIM_ConfigClockSource+0xd4>
 80081fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081fe:	f200 8087 	bhi.w	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008206:	f000 8086 	beq.w	8008316 <HAL_TIM_ConfigClockSource+0x172>
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820e:	d87f      	bhi.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008210:	2b70      	cmp	r3, #112	@ 0x70
 8008212:	d01a      	beq.n	800824a <HAL_TIM_ConfigClockSource+0xa6>
 8008214:	2b70      	cmp	r3, #112	@ 0x70
 8008216:	d87b      	bhi.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008218:	2b60      	cmp	r3, #96	@ 0x60
 800821a:	d050      	beq.n	80082be <HAL_TIM_ConfigClockSource+0x11a>
 800821c:	2b60      	cmp	r3, #96	@ 0x60
 800821e:	d877      	bhi.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008220:	2b50      	cmp	r3, #80	@ 0x50
 8008222:	d03c      	beq.n	800829e <HAL_TIM_ConfigClockSource+0xfa>
 8008224:	2b50      	cmp	r3, #80	@ 0x50
 8008226:	d873      	bhi.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008228:	2b40      	cmp	r3, #64	@ 0x40
 800822a:	d058      	beq.n	80082de <HAL_TIM_ConfigClockSource+0x13a>
 800822c:	2b40      	cmp	r3, #64	@ 0x40
 800822e:	d86f      	bhi.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008230:	2b30      	cmp	r3, #48	@ 0x30
 8008232:	d064      	beq.n	80082fe <HAL_TIM_ConfigClockSource+0x15a>
 8008234:	2b30      	cmp	r3, #48	@ 0x30
 8008236:	d86b      	bhi.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d060      	beq.n	80082fe <HAL_TIM_ConfigClockSource+0x15a>
 800823c:	2b20      	cmp	r3, #32
 800823e:	d867      	bhi.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d05c      	beq.n	80082fe <HAL_TIM_ConfigClockSource+0x15a>
 8008244:	2b10      	cmp	r3, #16
 8008246:	d05a      	beq.n	80082fe <HAL_TIM_ConfigClockSource+0x15a>
 8008248:	e062      	b.n	8008310 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800825a:	f000 fc13 	bl	8008a84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800826c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	609a      	str	r2, [r3, #8]
      break;
 8008276:	e04f      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008288:	f000 fbfc 	bl	8008a84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689a      	ldr	r2, [r3, #8]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800829a:	609a      	str	r2, [r3, #8]
      break;
 800829c:	e03c      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082aa:	461a      	mov	r2, r3
 80082ac:	f000 fb70 	bl	8008990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2150      	movs	r1, #80	@ 0x50
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fbc9 	bl	8008a4e <TIM_ITRx_SetConfig>
      break;
 80082bc:	e02c      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ca:	461a      	mov	r2, r3
 80082cc:	f000 fb8f 	bl	80089ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2160      	movs	r1, #96	@ 0x60
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fbb9 	bl	8008a4e <TIM_ITRx_SetConfig>
      break;
 80082dc:	e01c      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ea:	461a      	mov	r2, r3
 80082ec:	f000 fb50 	bl	8008990 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2140      	movs	r1, #64	@ 0x40
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fba9 	bl	8008a4e <TIM_ITRx_SetConfig>
      break;
 80082fc:	e00c      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4619      	mov	r1, r3
 8008308:	4610      	mov	r0, r2
 800830a:	f000 fba0 	bl	8008a4e <TIM_ITRx_SetConfig>
      break;
 800830e:	e003      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
      break;
 8008314:	e000      	b.n	8008318 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008328:	7bfb      	ldrb	r3, [r7, #15]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	fffeff88 	.word	0xfffeff88

08008338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a43      	ldr	r2, [pc, #268]	@ (80084a8 <TIM_Base_SetConfig+0x120>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d013      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a40      	ldr	r2, [pc, #256]	@ (80084ac <TIM_Base_SetConfig+0x124>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a3f      	ldr	r2, [pc, #252]	@ (80084b0 <TIM_Base_SetConfig+0x128>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a3e      	ldr	r2, [pc, #248]	@ (80084b4 <TIM_Base_SetConfig+0x12c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a3d      	ldr	r2, [pc, #244]	@ (80084b8 <TIM_Base_SetConfig+0x130>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a32      	ldr	r2, [pc, #200]	@ (80084a8 <TIM_Base_SetConfig+0x120>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d02b      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083e8:	d027      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a2f      	ldr	r2, [pc, #188]	@ (80084ac <TIM_Base_SetConfig+0x124>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d023      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2e      	ldr	r2, [pc, #184]	@ (80084b0 <TIM_Base_SetConfig+0x128>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01f      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2d      	ldr	r2, [pc, #180]	@ (80084b4 <TIM_Base_SetConfig+0x12c>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d01b      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2c      	ldr	r2, [pc, #176]	@ (80084b8 <TIM_Base_SetConfig+0x130>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d017      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2b      	ldr	r2, [pc, #172]	@ (80084bc <TIM_Base_SetConfig+0x134>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d013      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2a      	ldr	r2, [pc, #168]	@ (80084c0 <TIM_Base_SetConfig+0x138>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00f      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a29      	ldr	r2, [pc, #164]	@ (80084c4 <TIM_Base_SetConfig+0x13c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00b      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a28      	ldr	r2, [pc, #160]	@ (80084c8 <TIM_Base_SetConfig+0x140>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d007      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a27      	ldr	r2, [pc, #156]	@ (80084cc <TIM_Base_SetConfig+0x144>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d003      	beq.n	800843a <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a26      	ldr	r2, [pc, #152]	@ (80084d0 <TIM_Base_SetConfig+0x148>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d108      	bne.n	800844c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	695b      	ldr	r3, [r3, #20]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a0e      	ldr	r2, [pc, #56]	@ (80084a8 <TIM_Base_SetConfig+0x120>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d003      	beq.n	800847a <TIM_Base_SetConfig+0xf2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a10      	ldr	r2, [pc, #64]	@ (80084b8 <TIM_Base_SetConfig+0x130>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d103      	bne.n	8008482 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691a      	ldr	r2, [r3, #16]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f043 0204 	orr.w	r2, r3, #4
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	601a      	str	r2, [r3, #0]
}
 800849a:	bf00      	nop
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00
 80084b8:	40010400 	.word	0x40010400
 80084bc:	40014000 	.word	0x40014000
 80084c0:	40014400 	.word	0x40014400
 80084c4:	40014800 	.word	0x40014800
 80084c8:	40001800 	.word	0x40001800
 80084cc:	40001c00 	.word	0x40001c00
 80084d0:	40002000 	.word	0x40002000

080084d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	f023 0201 	bic.w	r2, r3, #1
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4b2b      	ldr	r3, [pc, #172]	@ (80085ac <TIM_OC1_SetConfig+0xd8>)
 8008500:	4013      	ands	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0303 	bic.w	r3, r3, #3
 800850a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 0302 	bic.w	r3, r3, #2
 800851c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a21      	ldr	r2, [pc, #132]	@ (80085b0 <TIM_OC1_SetConfig+0xdc>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d003      	beq.n	8008538 <TIM_OC1_SetConfig+0x64>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a20      	ldr	r2, [pc, #128]	@ (80085b4 <TIM_OC1_SetConfig+0xe0>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d10c      	bne.n	8008552 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f023 0308 	bic.w	r3, r3, #8
 800853e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 0304 	bic.w	r3, r3, #4
 8008550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a16      	ldr	r2, [pc, #88]	@ (80085b0 <TIM_OC1_SetConfig+0xdc>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d003      	beq.n	8008562 <TIM_OC1_SetConfig+0x8e>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a15      	ldr	r2, [pc, #84]	@ (80085b4 <TIM_OC1_SetConfig+0xe0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d111      	bne.n	8008586 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	621a      	str	r2, [r3, #32]
}
 80085a0:	bf00      	nop
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	fffeff8f 	.word	0xfffeff8f
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40010400 	.word	0x40010400

080085b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	f023 0210 	bic.w	r2, r3, #16
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	4b2e      	ldr	r3, [pc, #184]	@ (800869c <TIM_OC2_SetConfig+0xe4>)
 80085e4:	4013      	ands	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0320 	bic.w	r3, r3, #32
 8008602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a23      	ldr	r2, [pc, #140]	@ (80086a0 <TIM_OC2_SetConfig+0xe8>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d003      	beq.n	8008620 <TIM_OC2_SetConfig+0x68>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a22      	ldr	r2, [pc, #136]	@ (80086a4 <TIM_OC2_SetConfig+0xec>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d10d      	bne.n	800863c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800863a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a18      	ldr	r2, [pc, #96]	@ (80086a0 <TIM_OC2_SetConfig+0xe8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d003      	beq.n	800864c <TIM_OC2_SetConfig+0x94>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a17      	ldr	r2, [pc, #92]	@ (80086a4 <TIM_OC2_SetConfig+0xec>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d113      	bne.n	8008674 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800865a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	feff8fff 	.word	0xfeff8fff
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40010400 	.word	0x40010400

080086a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008788 <TIM_OC3_SetConfig+0xe0>)
 80086d4:	4013      	ands	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	021b      	lsls	r3, r3, #8
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a22      	ldr	r2, [pc, #136]	@ (800878c <TIM_OC3_SetConfig+0xe4>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d003      	beq.n	800870e <TIM_OC3_SetConfig+0x66>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a21      	ldr	r2, [pc, #132]	@ (8008790 <TIM_OC3_SetConfig+0xe8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d10d      	bne.n	800872a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a17      	ldr	r2, [pc, #92]	@ (800878c <TIM_OC3_SetConfig+0xe4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d003      	beq.n	800873a <TIM_OC3_SetConfig+0x92>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a16      	ldr	r2, [pc, #88]	@ (8008790 <TIM_OC3_SetConfig+0xe8>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d113      	bne.n	8008762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	621a      	str	r2, [r3, #32]
}
 800877c:	bf00      	nop
 800877e:	371c      	adds	r7, #28
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	fffeff8f 	.word	0xfffeff8f
 800878c:	40010000 	.word	0x40010000
 8008790:	40010400 	.word	0x40010400

08008794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008794:	b480      	push	{r7}
 8008796:	b087      	sub	sp, #28
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	4b1e      	ldr	r3, [pc, #120]	@ (8008838 <TIM_OC4_SetConfig+0xa4>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	031b      	lsls	r3, r3, #12
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a13      	ldr	r2, [pc, #76]	@ (800883c <TIM_OC4_SetConfig+0xa8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC4_SetConfig+0x68>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a12      	ldr	r2, [pc, #72]	@ (8008840 <TIM_OC4_SetConfig+0xac>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d109      	bne.n	8008810 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	019b      	lsls	r3, r3, #6
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4313      	orrs	r3, r2
 800880e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	feff8fff 	.word	0xfeff8fff
 800883c:	40010000 	.word	0x40010000
 8008840:	40010400 	.word	0x40010400

08008844 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4b1b      	ldr	r3, [pc, #108]	@ (80088dc <TIM_OC5_SetConfig+0x98>)
 8008870:	4013      	ands	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008884:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	041b      	lsls	r3, r3, #16
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a12      	ldr	r2, [pc, #72]	@ (80088e0 <TIM_OC5_SetConfig+0x9c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d003      	beq.n	80088a2 <TIM_OC5_SetConfig+0x5e>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a11      	ldr	r2, [pc, #68]	@ (80088e4 <TIM_OC5_SetConfig+0xa0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d109      	bne.n	80088b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	621a      	str	r2, [r3, #32]
}
 80088d0:	bf00      	nop
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	fffeff8f 	.word	0xfffeff8f
 80088e0:	40010000 	.word	0x40010000
 80088e4:	40010400 	.word	0x40010400

080088e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b087      	sub	sp, #28
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4b1c      	ldr	r3, [pc, #112]	@ (8008984 <TIM_OC6_SetConfig+0x9c>)
 8008914:	4013      	ands	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4313      	orrs	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800892a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	051b      	lsls	r3, r3, #20
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	4313      	orrs	r3, r2
 8008936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a13      	ldr	r2, [pc, #76]	@ (8008988 <TIM_OC6_SetConfig+0xa0>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d003      	beq.n	8008948 <TIM_OC6_SetConfig+0x60>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a12      	ldr	r2, [pc, #72]	@ (800898c <TIM_OC6_SetConfig+0xa4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d109      	bne.n	800895c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800894e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	029b      	lsls	r3, r3, #10
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	4313      	orrs	r3, r2
 800895a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	621a      	str	r2, [r3, #32]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	feff8fff 	.word	0xfeff8fff
 8008988:	40010000 	.word	0x40010000
 800898c:	40010400 	.word	0x40010400

08008990 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f023 0201 	bic.w	r2, r3, #1
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	011b      	lsls	r3, r3, #4
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f023 030a 	bic.w	r3, r3, #10
 80089cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089ce:	697a      	ldr	r2, [r7, #20]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	621a      	str	r2, [r3, #32]
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b087      	sub	sp, #28
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f023 0210 	bic.w	r2, r3, #16
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	031b      	lsls	r3, r3, #12
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	011b      	lsls	r3, r3, #4
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	621a      	str	r2, [r3, #32]
}
 8008a42:	bf00      	nop
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b085      	sub	sp, #20
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	f043 0307 	orr.w	r3, r3, #7
 8008a70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	609a      	str	r2, [r3, #8]
}
 8008a78:	bf00      	nop
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	021a      	lsls	r2, r3, #8
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	609a      	str	r2, [r3, #8]
}
 8008ab8:	bf00      	nop
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d101      	bne.n	8008adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e06d      	b.n	8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a30      	ldr	r2, [pc, #192]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d108      	bne.n	8008b22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a20      	ldr	r2, [pc, #128]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d022      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4e:	d01d      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a1d      	ldr	r2, [pc, #116]	@ (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d018      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d013      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00e      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a15      	ldr	r2, [pc, #84]	@ (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d009      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a16      	ldr	r2, [pc, #88]	@ (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d004      	beq.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a15      	ldr	r2, [pc, #84]	@ (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d10c      	bne.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	40010000 	.word	0x40010000
 8008bc8:	40010400 	.word	0x40010400
 8008bcc:	40000400 	.word	0x40000400
 8008bd0:	40000800 	.word	0x40000800
 8008bd4:	40000c00 	.word	0x40000c00
 8008bd8:	40014000 	.word	0x40014000
 8008bdc:	40001800 	.word	0x40001800

08008be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e065      	b.n	8008cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a16      	ldr	r2, [pc, #88]	@ (8008cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d004      	beq.n	8008c8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a14      	ldr	r2, [pc, #80]	@ (8008cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d115      	bne.n	8008cb6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c94:	051b      	lsls	r3, r3, #20
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	69db      	ldr	r3, [r3, #28]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	40010000 	.word	0x40010000
 8008cd8:	40010400 	.word	0x40010400

08008cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e040      	b.n	8008dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f004 ff48 	bl	800dbd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2224      	movs	r2, #36	@ 0x24
 8008d44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0201 	bic.w	r2, r2, #1
 8008d54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa8c 	bl	800927c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f825 	bl	8008db4 <UART_SetConfig>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d101      	bne.n	8008d74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e01b      	b.n	8008dac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0201 	orr.w	r2, r2, #1
 8008da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fb0b 	bl	80093c0 <UART_CheckIdleState>
 8008daa:	4603      	mov	r3, r0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	69db      	ldr	r3, [r3, #28]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	4ba6      	ldr	r3, [pc, #664]	@ (8009078 <UART_SetConfig+0x2c4>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	6979      	ldr	r1, [r7, #20]
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a94      	ldr	r2, [pc, #592]	@ (800907c <UART_SetConfig+0x2c8>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d120      	bne.n	8008e72 <UART_SetConfig+0xbe>
 8008e30:	4b93      	ldr	r3, [pc, #588]	@ (8009080 <UART_SetConfig+0x2cc>)
 8008e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e36:	f003 0303 	and.w	r3, r3, #3
 8008e3a:	2b03      	cmp	r3, #3
 8008e3c:	d816      	bhi.n	8008e6c <UART_SetConfig+0xb8>
 8008e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e44 <UART_SetConfig+0x90>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008e61 	.word	0x08008e61
 8008e4c:	08008e5b 	.word	0x08008e5b
 8008e50:	08008e67 	.word	0x08008e67
 8008e54:	2301      	movs	r3, #1
 8008e56:	77fb      	strb	r3, [r7, #31]
 8008e58:	e150      	b.n	80090fc <UART_SetConfig+0x348>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	77fb      	strb	r3, [r7, #31]
 8008e5e:	e14d      	b.n	80090fc <UART_SetConfig+0x348>
 8008e60:	2304      	movs	r3, #4
 8008e62:	77fb      	strb	r3, [r7, #31]
 8008e64:	e14a      	b.n	80090fc <UART_SetConfig+0x348>
 8008e66:	2308      	movs	r3, #8
 8008e68:	77fb      	strb	r3, [r7, #31]
 8008e6a:	e147      	b.n	80090fc <UART_SetConfig+0x348>
 8008e6c:	2310      	movs	r3, #16
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e144      	b.n	80090fc <UART_SetConfig+0x348>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a83      	ldr	r2, [pc, #524]	@ (8009084 <UART_SetConfig+0x2d0>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d132      	bne.n	8008ee2 <UART_SetConfig+0x12e>
 8008e7c:	4b80      	ldr	r3, [pc, #512]	@ (8009080 <UART_SetConfig+0x2cc>)
 8008e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e82:	f003 030c 	and.w	r3, r3, #12
 8008e86:	2b0c      	cmp	r3, #12
 8008e88:	d828      	bhi.n	8008edc <UART_SetConfig+0x128>
 8008e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0xdc>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008ec5 	.word	0x08008ec5
 8008e94:	08008edd 	.word	0x08008edd
 8008e98:	08008edd 	.word	0x08008edd
 8008e9c:	08008edd 	.word	0x08008edd
 8008ea0:	08008ed1 	.word	0x08008ed1
 8008ea4:	08008edd 	.word	0x08008edd
 8008ea8:	08008edd 	.word	0x08008edd
 8008eac:	08008edd 	.word	0x08008edd
 8008eb0:	08008ecb 	.word	0x08008ecb
 8008eb4:	08008edd 	.word	0x08008edd
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008edd 	.word	0x08008edd
 8008ec0:	08008ed7 	.word	0x08008ed7
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	77fb      	strb	r3, [r7, #31]
 8008ec8:	e118      	b.n	80090fc <UART_SetConfig+0x348>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	77fb      	strb	r3, [r7, #31]
 8008ece:	e115      	b.n	80090fc <UART_SetConfig+0x348>
 8008ed0:	2304      	movs	r3, #4
 8008ed2:	77fb      	strb	r3, [r7, #31]
 8008ed4:	e112      	b.n	80090fc <UART_SetConfig+0x348>
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	77fb      	strb	r3, [r7, #31]
 8008eda:	e10f      	b.n	80090fc <UART_SetConfig+0x348>
 8008edc:	2310      	movs	r3, #16
 8008ede:	77fb      	strb	r3, [r7, #31]
 8008ee0:	e10c      	b.n	80090fc <UART_SetConfig+0x348>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a68      	ldr	r2, [pc, #416]	@ (8009088 <UART_SetConfig+0x2d4>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d120      	bne.n	8008f2e <UART_SetConfig+0x17a>
 8008eec:	4b64      	ldr	r3, [pc, #400]	@ (8009080 <UART_SetConfig+0x2cc>)
 8008eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ef6:	2b30      	cmp	r3, #48	@ 0x30
 8008ef8:	d013      	beq.n	8008f22 <UART_SetConfig+0x16e>
 8008efa:	2b30      	cmp	r3, #48	@ 0x30
 8008efc:	d814      	bhi.n	8008f28 <UART_SetConfig+0x174>
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d009      	beq.n	8008f16 <UART_SetConfig+0x162>
 8008f02:	2b20      	cmp	r3, #32
 8008f04:	d810      	bhi.n	8008f28 <UART_SetConfig+0x174>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <UART_SetConfig+0x15c>
 8008f0a:	2b10      	cmp	r3, #16
 8008f0c:	d006      	beq.n	8008f1c <UART_SetConfig+0x168>
 8008f0e:	e00b      	b.n	8008f28 <UART_SetConfig+0x174>
 8008f10:	2300      	movs	r3, #0
 8008f12:	77fb      	strb	r3, [r7, #31]
 8008f14:	e0f2      	b.n	80090fc <UART_SetConfig+0x348>
 8008f16:	2302      	movs	r3, #2
 8008f18:	77fb      	strb	r3, [r7, #31]
 8008f1a:	e0ef      	b.n	80090fc <UART_SetConfig+0x348>
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	77fb      	strb	r3, [r7, #31]
 8008f20:	e0ec      	b.n	80090fc <UART_SetConfig+0x348>
 8008f22:	2308      	movs	r3, #8
 8008f24:	77fb      	strb	r3, [r7, #31]
 8008f26:	e0e9      	b.n	80090fc <UART_SetConfig+0x348>
 8008f28:	2310      	movs	r3, #16
 8008f2a:	77fb      	strb	r3, [r7, #31]
 8008f2c:	e0e6      	b.n	80090fc <UART_SetConfig+0x348>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a56      	ldr	r2, [pc, #344]	@ (800908c <UART_SetConfig+0x2d8>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d120      	bne.n	8008f7a <UART_SetConfig+0x1c6>
 8008f38:	4b51      	ldr	r3, [pc, #324]	@ (8009080 <UART_SetConfig+0x2cc>)
 8008f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f42:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f44:	d013      	beq.n	8008f6e <UART_SetConfig+0x1ba>
 8008f46:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f48:	d814      	bhi.n	8008f74 <UART_SetConfig+0x1c0>
 8008f4a:	2b80      	cmp	r3, #128	@ 0x80
 8008f4c:	d009      	beq.n	8008f62 <UART_SetConfig+0x1ae>
 8008f4e:	2b80      	cmp	r3, #128	@ 0x80
 8008f50:	d810      	bhi.n	8008f74 <UART_SetConfig+0x1c0>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <UART_SetConfig+0x1a8>
 8008f56:	2b40      	cmp	r3, #64	@ 0x40
 8008f58:	d006      	beq.n	8008f68 <UART_SetConfig+0x1b4>
 8008f5a:	e00b      	b.n	8008f74 <UART_SetConfig+0x1c0>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	77fb      	strb	r3, [r7, #31]
 8008f60:	e0cc      	b.n	80090fc <UART_SetConfig+0x348>
 8008f62:	2302      	movs	r3, #2
 8008f64:	77fb      	strb	r3, [r7, #31]
 8008f66:	e0c9      	b.n	80090fc <UART_SetConfig+0x348>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e0c6      	b.n	80090fc <UART_SetConfig+0x348>
 8008f6e:	2308      	movs	r3, #8
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e0c3      	b.n	80090fc <UART_SetConfig+0x348>
 8008f74:	2310      	movs	r3, #16
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e0c0      	b.n	80090fc <UART_SetConfig+0x348>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a44      	ldr	r2, [pc, #272]	@ (8009090 <UART_SetConfig+0x2dc>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d125      	bne.n	8008fd0 <UART_SetConfig+0x21c>
 8008f84:	4b3e      	ldr	r3, [pc, #248]	@ (8009080 <UART_SetConfig+0x2cc>)
 8008f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f92:	d017      	beq.n	8008fc4 <UART_SetConfig+0x210>
 8008f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f98:	d817      	bhi.n	8008fca <UART_SetConfig+0x216>
 8008f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f9e:	d00b      	beq.n	8008fb8 <UART_SetConfig+0x204>
 8008fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fa4:	d811      	bhi.n	8008fca <UART_SetConfig+0x216>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <UART_SetConfig+0x1fe>
 8008faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fae:	d006      	beq.n	8008fbe <UART_SetConfig+0x20a>
 8008fb0:	e00b      	b.n	8008fca <UART_SetConfig+0x216>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	77fb      	strb	r3, [r7, #31]
 8008fb6:	e0a1      	b.n	80090fc <UART_SetConfig+0x348>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	77fb      	strb	r3, [r7, #31]
 8008fbc:	e09e      	b.n	80090fc <UART_SetConfig+0x348>
 8008fbe:	2304      	movs	r3, #4
 8008fc0:	77fb      	strb	r3, [r7, #31]
 8008fc2:	e09b      	b.n	80090fc <UART_SetConfig+0x348>
 8008fc4:	2308      	movs	r3, #8
 8008fc6:	77fb      	strb	r3, [r7, #31]
 8008fc8:	e098      	b.n	80090fc <UART_SetConfig+0x348>
 8008fca:	2310      	movs	r3, #16
 8008fcc:	77fb      	strb	r3, [r7, #31]
 8008fce:	e095      	b.n	80090fc <UART_SetConfig+0x348>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8009094 <UART_SetConfig+0x2e0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d125      	bne.n	8009026 <UART_SetConfig+0x272>
 8008fda:	4b29      	ldr	r3, [pc, #164]	@ (8009080 <UART_SetConfig+0x2cc>)
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fe4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fe8:	d017      	beq.n	800901a <UART_SetConfig+0x266>
 8008fea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fee:	d817      	bhi.n	8009020 <UART_SetConfig+0x26c>
 8008ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff4:	d00b      	beq.n	800900e <UART_SetConfig+0x25a>
 8008ff6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ffa:	d811      	bhi.n	8009020 <UART_SetConfig+0x26c>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <UART_SetConfig+0x254>
 8009000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009004:	d006      	beq.n	8009014 <UART_SetConfig+0x260>
 8009006:	e00b      	b.n	8009020 <UART_SetConfig+0x26c>
 8009008:	2301      	movs	r3, #1
 800900a:	77fb      	strb	r3, [r7, #31]
 800900c:	e076      	b.n	80090fc <UART_SetConfig+0x348>
 800900e:	2302      	movs	r3, #2
 8009010:	77fb      	strb	r3, [r7, #31]
 8009012:	e073      	b.n	80090fc <UART_SetConfig+0x348>
 8009014:	2304      	movs	r3, #4
 8009016:	77fb      	strb	r3, [r7, #31]
 8009018:	e070      	b.n	80090fc <UART_SetConfig+0x348>
 800901a:	2308      	movs	r3, #8
 800901c:	77fb      	strb	r3, [r7, #31]
 800901e:	e06d      	b.n	80090fc <UART_SetConfig+0x348>
 8009020:	2310      	movs	r3, #16
 8009022:	77fb      	strb	r3, [r7, #31]
 8009024:	e06a      	b.n	80090fc <UART_SetConfig+0x348>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a1b      	ldr	r2, [pc, #108]	@ (8009098 <UART_SetConfig+0x2e4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d138      	bne.n	80090a2 <UART_SetConfig+0x2ee>
 8009030:	4b13      	ldr	r3, [pc, #76]	@ (8009080 <UART_SetConfig+0x2cc>)
 8009032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009036:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800903a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800903e:	d017      	beq.n	8009070 <UART_SetConfig+0x2bc>
 8009040:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009044:	d82a      	bhi.n	800909c <UART_SetConfig+0x2e8>
 8009046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800904a:	d00b      	beq.n	8009064 <UART_SetConfig+0x2b0>
 800904c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009050:	d824      	bhi.n	800909c <UART_SetConfig+0x2e8>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <UART_SetConfig+0x2aa>
 8009056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905a:	d006      	beq.n	800906a <UART_SetConfig+0x2b6>
 800905c:	e01e      	b.n	800909c <UART_SetConfig+0x2e8>
 800905e:	2300      	movs	r3, #0
 8009060:	77fb      	strb	r3, [r7, #31]
 8009062:	e04b      	b.n	80090fc <UART_SetConfig+0x348>
 8009064:	2302      	movs	r3, #2
 8009066:	77fb      	strb	r3, [r7, #31]
 8009068:	e048      	b.n	80090fc <UART_SetConfig+0x348>
 800906a:	2304      	movs	r3, #4
 800906c:	77fb      	strb	r3, [r7, #31]
 800906e:	e045      	b.n	80090fc <UART_SetConfig+0x348>
 8009070:	2308      	movs	r3, #8
 8009072:	77fb      	strb	r3, [r7, #31]
 8009074:	e042      	b.n	80090fc <UART_SetConfig+0x348>
 8009076:	bf00      	nop
 8009078:	efff69f3 	.word	0xefff69f3
 800907c:	40011000 	.word	0x40011000
 8009080:	40023800 	.word	0x40023800
 8009084:	40004400 	.word	0x40004400
 8009088:	40004800 	.word	0x40004800
 800908c:	40004c00 	.word	0x40004c00
 8009090:	40005000 	.word	0x40005000
 8009094:	40011400 	.word	0x40011400
 8009098:	40007800 	.word	0x40007800
 800909c:	2310      	movs	r3, #16
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e02c      	b.n	80090fc <UART_SetConfig+0x348>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a72      	ldr	r2, [pc, #456]	@ (8009270 <UART_SetConfig+0x4bc>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d125      	bne.n	80090f8 <UART_SetConfig+0x344>
 80090ac:	4b71      	ldr	r3, [pc, #452]	@ (8009274 <UART_SetConfig+0x4c0>)
 80090ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090b2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80090b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80090ba:	d017      	beq.n	80090ec <UART_SetConfig+0x338>
 80090bc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80090c0:	d817      	bhi.n	80090f2 <UART_SetConfig+0x33e>
 80090c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090c6:	d00b      	beq.n	80090e0 <UART_SetConfig+0x32c>
 80090c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090cc:	d811      	bhi.n	80090f2 <UART_SetConfig+0x33e>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <UART_SetConfig+0x326>
 80090d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090d6:	d006      	beq.n	80090e6 <UART_SetConfig+0x332>
 80090d8:	e00b      	b.n	80090f2 <UART_SetConfig+0x33e>
 80090da:	2300      	movs	r3, #0
 80090dc:	77fb      	strb	r3, [r7, #31]
 80090de:	e00d      	b.n	80090fc <UART_SetConfig+0x348>
 80090e0:	2302      	movs	r3, #2
 80090e2:	77fb      	strb	r3, [r7, #31]
 80090e4:	e00a      	b.n	80090fc <UART_SetConfig+0x348>
 80090e6:	2304      	movs	r3, #4
 80090e8:	77fb      	strb	r3, [r7, #31]
 80090ea:	e007      	b.n	80090fc <UART_SetConfig+0x348>
 80090ec:	2308      	movs	r3, #8
 80090ee:	77fb      	strb	r3, [r7, #31]
 80090f0:	e004      	b.n	80090fc <UART_SetConfig+0x348>
 80090f2:	2310      	movs	r3, #16
 80090f4:	77fb      	strb	r3, [r7, #31]
 80090f6:	e001      	b.n	80090fc <UART_SetConfig+0x348>
 80090f8:	2310      	movs	r3, #16
 80090fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009104:	d15b      	bne.n	80091be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009106:	7ffb      	ldrb	r3, [r7, #31]
 8009108:	2b08      	cmp	r3, #8
 800910a:	d828      	bhi.n	800915e <UART_SetConfig+0x3aa>
 800910c:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <UART_SetConfig+0x360>)
 800910e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009112:	bf00      	nop
 8009114:	08009139 	.word	0x08009139
 8009118:	08009141 	.word	0x08009141
 800911c:	08009149 	.word	0x08009149
 8009120:	0800915f 	.word	0x0800915f
 8009124:	0800914f 	.word	0x0800914f
 8009128:	0800915f 	.word	0x0800915f
 800912c:	0800915f 	.word	0x0800915f
 8009130:	0800915f 	.word	0x0800915f
 8009134:	08009157 	.word	0x08009157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009138:	f7fc f80c 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 800913c:	61b8      	str	r0, [r7, #24]
        break;
 800913e:	e013      	b.n	8009168 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009140:	f7fc f81c 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 8009144:	61b8      	str	r0, [r7, #24]
        break;
 8009146:	e00f      	b.n	8009168 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009148:	4b4b      	ldr	r3, [pc, #300]	@ (8009278 <UART_SetConfig+0x4c4>)
 800914a:	61bb      	str	r3, [r7, #24]
        break;
 800914c:	e00c      	b.n	8009168 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800914e:	f7fb ff31 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 8009152:	61b8      	str	r0, [r7, #24]
        break;
 8009154:	e008      	b.n	8009168 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800915a:	61bb      	str	r3, [r7, #24]
        break;
 800915c:	e004      	b.n	8009168 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	77bb      	strb	r3, [r7, #30]
        break;
 8009166:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d074      	beq.n	8009258 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	005a      	lsls	r2, r3, #1
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	085b      	lsrs	r3, r3, #1
 8009178:	441a      	add	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009182:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2b0f      	cmp	r3, #15
 8009188:	d916      	bls.n	80091b8 <UART_SetConfig+0x404>
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009190:	d212      	bcs.n	80091b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f023 030f 	bic.w	r3, r3, #15
 800919a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	89fb      	ldrh	r3, [r7, #14]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	89fa      	ldrh	r2, [r7, #14]
 80091b4:	60da      	str	r2, [r3, #12]
 80091b6:	e04f      	b.n	8009258 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	77bb      	strb	r3, [r7, #30]
 80091bc:	e04c      	b.n	8009258 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091be:	7ffb      	ldrb	r3, [r7, #31]
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d828      	bhi.n	8009216 <UART_SetConfig+0x462>
 80091c4:	a201      	add	r2, pc, #4	@ (adr r2, 80091cc <UART_SetConfig+0x418>)
 80091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ca:	bf00      	nop
 80091cc:	080091f1 	.word	0x080091f1
 80091d0:	080091f9 	.word	0x080091f9
 80091d4:	08009201 	.word	0x08009201
 80091d8:	08009217 	.word	0x08009217
 80091dc:	08009207 	.word	0x08009207
 80091e0:	08009217 	.word	0x08009217
 80091e4:	08009217 	.word	0x08009217
 80091e8:	08009217 	.word	0x08009217
 80091ec:	0800920f 	.word	0x0800920f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091f0:	f7fb ffb0 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 80091f4:	61b8      	str	r0, [r7, #24]
        break;
 80091f6:	e013      	b.n	8009220 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091f8:	f7fb ffc0 	bl	800517c <HAL_RCC_GetPCLK2Freq>
 80091fc:	61b8      	str	r0, [r7, #24]
        break;
 80091fe:	e00f      	b.n	8009220 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009200:	4b1d      	ldr	r3, [pc, #116]	@ (8009278 <UART_SetConfig+0x4c4>)
 8009202:	61bb      	str	r3, [r7, #24]
        break;
 8009204:	e00c      	b.n	8009220 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009206:	f7fb fed5 	bl	8004fb4 <HAL_RCC_GetSysClockFreq>
 800920a:	61b8      	str	r0, [r7, #24]
        break;
 800920c:	e008      	b.n	8009220 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800920e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009212:	61bb      	str	r3, [r7, #24]
        break;
 8009214:	e004      	b.n	8009220 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	77bb      	strb	r3, [r7, #30]
        break;
 800921e:	bf00      	nop
    }

    if (pclk != 0U)
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d018      	beq.n	8009258 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	085a      	lsrs	r2, r3, #1
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	441a      	add	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	fbb2 f3f3 	udiv	r3, r2, r3
 8009238:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	2b0f      	cmp	r3, #15
 800923e:	d909      	bls.n	8009254 <UART_SetConfig+0x4a0>
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009246:	d205      	bcs.n	8009254 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	b29a      	uxth	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60da      	str	r2, [r3, #12]
 8009252:	e001      	b.n	8009258 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009264:	7fbb      	ldrb	r3, [r7, #30]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	40007c00 	.word	0x40007c00
 8009274:	40023800 	.word	0x40023800
 8009278:	00f42400 	.word	0x00f42400

0800927c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	430a      	orrs	r2, r1
 80092e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009310:	f003 0310 	and.w	r3, r3, #16
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00a      	beq.n	800932e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01a      	beq.n	8009392 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800937a:	d10a      	bne.n	8009392 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	605a      	str	r2, [r3, #4]
  }
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	@ 0x30
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093d0:	f7f6 ff80 	bl	80002d4 <HAL_GetTick>
 80093d4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0308 	and.w	r3, r3, #8
 80093e0:	2b08      	cmp	r3, #8
 80093e2:	d12e      	bne.n	8009442 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ec:	2200      	movs	r2, #0
 80093ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f83b 	bl	800946e <UART_WaitOnFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d021      	beq.n	8009442 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	60fb      	str	r3, [r7, #12]
   return(result);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009412:	623b      	str	r3, [r7, #32]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	61fb      	str	r3, [r7, #28]
 800941e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	69b9      	ldr	r1, [r7, #24]
 8009422:	69fa      	ldr	r2, [r7, #28]
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	617b      	str	r3, [r7, #20]
   return(result);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e6      	bne.n	80093fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e011      	b.n	8009466 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2220      	movs	r2, #32
 8009446:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2220      	movs	r2, #32
 800944c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3728      	adds	r7, #40	@ 0x28
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	603b      	str	r3, [r7, #0]
 800947a:	4613      	mov	r3, r2
 800947c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800947e:	e04f      	b.n	8009520 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009486:	d04b      	beq.n	8009520 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009488:	f7f6 ff24 	bl	80002d4 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	429a      	cmp	r2, r3
 8009496:	d302      	bcc.n	800949e <UART_WaitOnFlagUntilTimeout+0x30>
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800949e:	2303      	movs	r3, #3
 80094a0:	e04e      	b.n	8009540 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d037      	beq.n	8009520 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	2b80      	cmp	r3, #128	@ 0x80
 80094b4:	d034      	beq.n	8009520 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b40      	cmp	r3, #64	@ 0x40
 80094ba:	d031      	beq.n	8009520 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b08      	cmp	r3, #8
 80094c8:	d110      	bne.n	80094ec <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2208      	movs	r2, #8
 80094d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 f838 	bl	8009548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2208      	movs	r2, #8
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e029      	b.n	8009540 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094fa:	d111      	bne.n	8009520 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009504:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 f81e 	bl	8009548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2220      	movs	r2, #32
 8009510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e00f      	b.n	8009540 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69da      	ldr	r2, [r3, #28]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4013      	ands	r3, r2
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	429a      	cmp	r2, r3
 800952e:	bf0c      	ite	eq
 8009530:	2301      	moveq	r3, #1
 8009532:	2300      	movne	r3, #0
 8009534:	b2db      	uxtb	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	429a      	cmp	r2, r3
 800953c:	d0a0      	beq.n	8009480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b095      	sub	sp, #84	@ 0x54
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009558:	e853 3f00 	ldrex	r3, [r3]
 800955c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	461a      	mov	r2, r3
 800956c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009570:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009574:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800957c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e6      	bne.n	8009550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	61fb      	str	r3, [r7, #28]
   return(result);
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	f023 0301 	bic.w	r3, r3, #1
 8009598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3308      	adds	r3, #8
 80095a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e5      	bne.n	8009582 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d118      	bne.n	80095f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	e853 3f00 	ldrex	r3, [r3]
 80095ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f023 0310 	bic.w	r3, r3, #16
 80095d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	461a      	mov	r2, r3
 80095da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095dc:	61bb      	str	r3, [r7, #24]
 80095de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6979      	ldr	r1, [r7, #20]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e6      	bne.n	80095be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2220      	movs	r2, #32
 80095f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009604:	bf00      	nop
 8009606:	3754      	adds	r7, #84	@ 0x54
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d121      	bne.n	8009666 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b27      	ldr	r3, [pc, #156]	@ (80096c4 <FMC_SDRAM_Init+0xb4>)
 8009628:	4013      	ands	r3, r2
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	6851      	ldr	r1, [r2, #4]
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	6892      	ldr	r2, [r2, #8]
 8009632:	4311      	orrs	r1, r2
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	68d2      	ldr	r2, [r2, #12]
 8009638:	4311      	orrs	r1, r2
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	6912      	ldr	r2, [r2, #16]
 800963e:	4311      	orrs	r1, r2
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	6952      	ldr	r2, [r2, #20]
 8009644:	4311      	orrs	r1, r2
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	6992      	ldr	r2, [r2, #24]
 800964a:	4311      	orrs	r1, r2
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	69d2      	ldr	r2, [r2, #28]
 8009650:	4311      	orrs	r1, r2
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	6a12      	ldr	r2, [r2, #32]
 8009656:	4311      	orrs	r1, r2
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800965c:	430a      	orrs	r2, r1
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	e026      	b.n	80096b4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	69d9      	ldr	r1, [r3, #28]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	4319      	orrs	r1, r3
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800967c:	430b      	orrs	r3, r1
 800967e:	431a      	orrs	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	4b0e      	ldr	r3, [pc, #56]	@ (80096c4 <FMC_SDRAM_Init+0xb4>)
 800968a:	4013      	ands	r3, r2
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	6851      	ldr	r1, [r2, #4]
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	6892      	ldr	r2, [r2, #8]
 8009694:	4311      	orrs	r1, r2
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	68d2      	ldr	r2, [r2, #12]
 800969a:	4311      	orrs	r1, r2
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	6912      	ldr	r2, [r2, #16]
 80096a0:	4311      	orrs	r1, r2
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	6952      	ldr	r2, [r2, #20]
 80096a6:	4311      	orrs	r1, r2
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	6992      	ldr	r2, [r2, #24]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	431a      	orrs	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	ffff8000 	.word	0xffff8000

080096c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d128      	bne.n	800972c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	1e59      	subs	r1, r3, #1
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	4319      	orrs	r1, r3
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	3b01      	subs	r3, #1
 80096f8:	021b      	lsls	r3, r3, #8
 80096fa:	4319      	orrs	r1, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	3b01      	subs	r3, #1
 8009702:	031b      	lsls	r3, r3, #12
 8009704:	4319      	orrs	r1, r3
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	3b01      	subs	r3, #1
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	4319      	orrs	r1, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	3b01      	subs	r3, #1
 8009716:	051b      	lsls	r3, r3, #20
 8009718:	4319      	orrs	r1, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	3b01      	subs	r3, #1
 8009720:	061b      	lsls	r3, r3, #24
 8009722:	430b      	orrs	r3, r1
 8009724:	431a      	orrs	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	609a      	str	r2, [r3, #8]
 800972a:	e02d      	b.n	8009788 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	4b19      	ldr	r3, [pc, #100]	@ (8009798 <FMC_SDRAM_Timing_Init+0xd0>)
 8009732:	4013      	ands	r3, r2
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	68d2      	ldr	r2, [r2, #12]
 8009738:	3a01      	subs	r2, #1
 800973a:	0311      	lsls	r1, r2, #12
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	6952      	ldr	r2, [r2, #20]
 8009740:	3a01      	subs	r2, #1
 8009742:	0512      	lsls	r2, r2, #20
 8009744:	430a      	orrs	r2, r1
 8009746:	431a      	orrs	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	1e59      	subs	r1, r3, #1
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	3b01      	subs	r3, #1
 8009760:	011b      	lsls	r3, r3, #4
 8009762:	4319      	orrs	r1, r3
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	3b01      	subs	r3, #1
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	4319      	orrs	r1, r3
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	3b01      	subs	r3, #1
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	4319      	orrs	r1, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	699b      	ldr	r3, [r3, #24]
 800977c:	3b01      	subs	r3, #1
 800977e:	061b      	lsls	r3, r3, #24
 8009780:	430b      	orrs	r3, r1
 8009782:	431a      	orrs	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	ff0f0fff 	.word	0xff0f0fff

0800979c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800979c:	b084      	sub	sp, #16
 800979e:	b480      	push	{r7}
 80097a0:	b085      	sub	sp, #20
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	f107 001c 	add.w	r0, r7, #28
 80097aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80097b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80097b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80097b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80097ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80097be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80097c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80097c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	4b07      	ldr	r3, [pc, #28]	@ (80097f0 <SDMMC_Init+0x54>)
 80097d4:	4013      	ands	r3, r2
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	b004      	add	sp, #16
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	ffff8100 	.word	0xffff8100

080097f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009802:	4618      	mov	r0, r3
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2203      	movs	r2, #3
 800981a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800982a:	b480      	push	{r7}
 800982c:	b083      	sub	sp, #12
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0303 	and.w	r3, r3, #3
}
 800983a:	4618      	mov	r0, r3
 800983c:	370c      	adds	r7, #12
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
	...

08009848 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009866:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800986c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009872:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	4b06      	ldr	r3, [pc, #24]	@ (8009898 <SDMMC_SendCommand+0x50>)
 8009880:	4013      	ands	r3, r2
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	431a      	orrs	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	fffff000 	.word	0xfffff000

0800989c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	b2db      	uxtb	r3, r3
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3314      	adds	r3, #20
 80098c4:	461a      	mov	r2, r3
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	4413      	add	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
}  
 80098d0:	4618      	mov	r0, r3
 80098d2:	3714      	adds	r7, #20
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009902:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009908:	431a      	orrs	r2, r3
                       Data->DPSM);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800990e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	431a      	orrs	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009926:	2300      	movs	r3, #0

}
 8009928:	4618      	mov	r0, r3
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009942:	2310      	movs	r3, #16
 8009944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009946:	2340      	movs	r3, #64	@ 0x40
 8009948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800994a:	2300      	movs	r3, #0
 800994c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800994e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009954:	f107 0308 	add.w	r3, r7, #8
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff ff74 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009964:	2110      	movs	r1, #16
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fa1a 	bl	8009da0 <SDMMC_GetCmdResp1>
 800996c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800996e:	69fb      	ldr	r3, [r7, #28]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3720      	adds	r7, #32
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b088      	sub	sp, #32
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009986:	2311      	movs	r3, #17
 8009988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800998a:	2340      	movs	r3, #64	@ 0x40
 800998c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff ff52 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80099a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099a8:	2111      	movs	r1, #17
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f9f8 	bl	8009da0 <SDMMC_GetCmdResp1>
 80099b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099b2:	69fb      	ldr	r3, [r7, #28]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80099ca:	2312      	movs	r3, #18
 80099cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099ce:	2340      	movs	r3, #64	@ 0x40
 80099d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff ff30 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80099e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099ec:	2112      	movs	r1, #18
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f9d6 	bl	8009da0 <SDMMC_GetCmdResp1>
 80099f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099f6:	69fb      	ldr	r3, [r7, #28]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3720      	adds	r7, #32
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a0e:	2318      	movs	r3, #24
 8009a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a12:	2340      	movs	r3, #64	@ 0x40
 8009a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a16:	2300      	movs	r3, #0
 8009a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a20:	f107 0308 	add.w	r3, r7, #8
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff ff0e 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a30:	2118      	movs	r1, #24
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f9b4 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a52:	2319      	movs	r3, #25
 8009a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a56:	2340      	movs	r3, #64	@ 0x40
 8009a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a64:	f107 0308 	add.w	r3, r7, #8
 8009a68:	4619      	mov	r1, r3
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff feec 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a74:	2119      	movs	r1, #25
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 f992 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3720      	adds	r7, #32
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b088      	sub	sp, #32
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009a94:	230c      	movs	r3, #12
 8009a96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a98:	2340      	movs	r3, #64	@ 0x40
 8009a9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aa4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aa6:	f107 0308 	add.w	r3, r7, #8
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff fecb 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009ab2:	4a05      	ldr	r2, [pc, #20]	@ (8009ac8 <SDMMC_CmdStopTransfer+0x40>)
 8009ab4:	210c      	movs	r1, #12
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f972 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009abe:	69fb      	ldr	r3, [r7, #28]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	05f5e100 	.word	0x05f5e100

08009acc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	@ 0x28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009adc:	2307      	movs	r3, #7
 8009ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ae0:	2340      	movs	r3, #64	@ 0x40
 8009ae2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ae8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aec:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aee:	f107 0310 	add.w	r3, r7, #16
 8009af2:	4619      	mov	r1, r3
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f7ff fea7 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009afe:	2107      	movs	r1, #7
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 f94d 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009b06:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3728      	adds	r7, #40	@ 0x28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b088      	sub	sp, #32
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009b22:	2300      	movs	r3, #0
 8009b24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b30:	f107 0308 	add.w	r3, r7, #8
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fe86 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fb67 	bl	800a210 <SDMMC_GetCmdError>
 8009b42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b44:	69fb      	ldr	r3, [r7, #28]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3720      	adds	r7, #32
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b088      	sub	sp, #32
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009b56:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009b5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009b5c:	2308      	movs	r3, #8
 8009b5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b60:	2340      	movs	r3, #64	@ 0x40
 8009b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b6e:	f107 0308 	add.w	r3, r7, #8
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff fe67 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 fafa 	bl	800a174 <SDMMC_GetCmdResp7>
 8009b80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b82:	69fb      	ldr	r3, [r7, #28]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3720      	adds	r7, #32
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009b9a:	2337      	movs	r3, #55	@ 0x37
 8009b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b9e:	2340      	movs	r3, #64	@ 0x40
 8009ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bac:	f107 0308 	add.w	r3, r7, #8
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff fe48 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bbc:	2137      	movs	r1, #55	@ 0x37
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f8ee 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3720      	adds	r7, #32
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8009c14 <SDMMC_CmdAppOperCommand+0x44>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009be2:	2329      	movs	r3, #41	@ 0x29
 8009be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009be6:	2340      	movs	r3, #64	@ 0x40
 8009be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bea:	2300      	movs	r3, #0
 8009bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bf4:	f107 0308 	add.w	r3, r7, #8
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f7ff fe24 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa03 	bl	800a00c <SDMMC_GetCmdResp3>
 8009c06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c08:	69fb      	ldr	r3, [r7, #28]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	80100000 	.word	0x80100000

08009c18 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b088      	sub	sp, #32
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c26:	2306      	movs	r3, #6
 8009c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c2a:	2340      	movs	r3, #64	@ 0x40
 8009c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff fe02 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c48:	2106      	movs	r1, #6
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f8a8 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c52:	69fb      	ldr	r3, [r7, #28]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3720      	adds	r7, #32
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009c68:	2333      	movs	r3, #51	@ 0x33
 8009c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c6c:	2340      	movs	r3, #64	@ 0x40
 8009c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c7a:	f107 0308 	add.w	r3, r7, #8
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff fde1 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c8a:	2133      	movs	r1, #51	@ 0x33
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f887 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c94:	69fb      	ldr	r3, [r7, #28]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3720      	adds	r7, #32
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b088      	sub	sp, #32
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009caa:	2302      	movs	r3, #2
 8009cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009cae:	23c0      	movs	r3, #192	@ 0xc0
 8009cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cbc:	f107 0308 	add.w	r3, r7, #8
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff fdc0 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f957 	bl	8009f7c <SDMMC_GetCmdResp2>
 8009cce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3720      	adds	r7, #32
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b088      	sub	sp, #32
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009ce8:	2309      	movs	r3, #9
 8009cea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009cec:	23c0      	movs	r3, #192	@ 0xc0
 8009cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cfa:	f107 0308 	add.w	r3, r7, #8
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff fda1 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f938 	bl	8009f7c <SDMMC_GetCmdResp2>
 8009d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d0e:	69fb      	ldr	r3, [r7, #28]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3720      	adds	r7, #32
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d26:	2303      	movs	r3, #3
 8009d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d2a:	2340      	movs	r3, #64	@ 0x40
 8009d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d38:	f107 0308 	add.w	r3, r7, #8
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff fd82 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	2103      	movs	r1, #3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f99d 	bl	800a088 <SDMMC_GetCmdResp6>
 8009d4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d50:	69fb      	ldr	r3, [r7, #28]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3720      	adds	r7, #32
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b088      	sub	sp, #32
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
 8009d62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d68:	230d      	movs	r3, #13
 8009d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d6c:	2340      	movs	r3, #64	@ 0x40
 8009d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d70:	2300      	movs	r3, #0
 8009d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d7a:	f107 0308 	add.w	r3, r7, #8
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff fd61 	bl	8009848 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d8a:	210d      	movs	r1, #13
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f807 	bl	8009da0 <SDMMC_GetCmdResp1>
 8009d92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d94:	69fb      	ldr	r3, [r7, #28]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	460b      	mov	r3, r1
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009dae:	4b70      	ldr	r3, [pc, #448]	@ (8009f70 <SDMMC_GetCmdResp1+0x1d0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a70      	ldr	r2, [pc, #448]	@ (8009f74 <SDMMC_GetCmdResp1+0x1d4>)
 8009db4:	fba2 2303 	umull	r2, r3, r2, r3
 8009db8:	0a5a      	lsrs	r2, r3, #9
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	fb02 f303 	mul.w	r3, r2, r3
 8009dc0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	1e5a      	subs	r2, r3, #1
 8009dc6:	61fa      	str	r2, [r7, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dd0:	e0c9      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0ef      	beq.n	8009dc2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1ea      	bne.n	8009dc2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dfe:	2304      	movs	r3, #4
 8009e00:	e0b1      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2201      	movs	r2, #1
 8009e12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0a6      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	22c5      	movs	r2, #197	@ 0xc5
 8009e1c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f7ff fd3c 	bl	800989c <SDMMC_GetCommandResponse>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461a      	mov	r2, r3
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d001      	beq.n	8009e32 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e099      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009e32:	2100      	movs	r1, #0
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff fd3e 	bl	80098b6 <SDMMC_GetResponse>
 8009e3a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8009f78 <SDMMC_GetCmdResp1+0x1d8>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e08d      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	da02      	bge.n	8009e56 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e54:	e087      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e60:	2340      	movs	r3, #64	@ 0x40
 8009e62:	e080      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e6e:	2380      	movs	r3, #128	@ 0x80
 8009e70:	e079      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e80:	e071      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e90:	e069      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009e9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ea0:	e061      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009eac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009eb0:	e059      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d002      	beq.n	8009ec2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ec0:	e051      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ecc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ed0:	e049      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009edc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009ee0:	e041      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009eec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ef0:	e039      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009efc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009f00:	e031      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d002      	beq.n	8009f12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009f10:	e029      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f20:	e021      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009f30:	e019      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009f40:	e011      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009f50:	e009      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f003 0308 	and.w	r3, r3, #8
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f5c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009f60:	e001      	b.n	8009f66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000008 	.word	0x20000008
 8009f74:	10624dd3 	.word	0x10624dd3
 8009f78:	fdffe008 	.word	0xfdffe008

08009f7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f84:	4b1f      	ldr	r3, [pc, #124]	@ (800a004 <SDMMC_GetCmdResp2+0x88>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1f      	ldr	r2, [pc, #124]	@ (800a008 <SDMMC_GetCmdResp2+0x8c>)
 8009f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8e:	0a5b      	lsrs	r3, r3, #9
 8009f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f94:	fb02 f303 	mul.w	r3, r2, r3
 8009f98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	1e5a      	subs	r2, r3, #1
 8009f9e:	60fa      	str	r2, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d102      	bne.n	8009faa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fa4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fa8:	e026      	b.n	8009ff8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0ef      	beq.n	8009f9a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1ea      	bne.n	8009f9a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d004      	beq.n	8009fda <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2204      	movs	r2, #4
 8009fd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fd6:	2304      	movs	r3, #4
 8009fd8:	e00e      	b.n	8009ff8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fde:	f003 0301 	and.w	r3, r3, #1
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d004      	beq.n	8009ff0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e003      	b.n	8009ff8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	22c5      	movs	r2, #197	@ 0xc5
 8009ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	20000008 	.word	0x20000008
 800a008:	10624dd3 	.word	0x10624dd3

0800a00c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a014:	4b1a      	ldr	r3, [pc, #104]	@ (800a080 <SDMMC_GetCmdResp3+0x74>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a1a      	ldr	r2, [pc, #104]	@ (800a084 <SDMMC_GetCmdResp3+0x78>)
 800a01a:	fba2 2303 	umull	r2, r3, r2, r3
 800a01e:	0a5b      	lsrs	r3, r3, #9
 800a020:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a024:	fb02 f303 	mul.w	r3, r2, r3
 800a028:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	1e5a      	subs	r2, r3, #1
 800a02e:	60fa      	str	r2, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a034:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a038:	e01b      	b.n	800a072 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0ef      	beq.n	800a02a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1ea      	bne.n	800a02a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2204      	movs	r2, #4
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a066:	2304      	movs	r3, #4
 800a068:	e003      	b.n	800a072 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	22c5      	movs	r2, #197	@ 0xc5
 800a06e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	20000008 	.word	0x20000008
 800a084:	10624dd3 	.word	0x10624dd3

0800a088 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b088      	sub	sp, #32
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	460b      	mov	r3, r1
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a096:	4b35      	ldr	r3, [pc, #212]	@ (800a16c <SDMMC_GetCmdResp6+0xe4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a35      	ldr	r2, [pc, #212]	@ (800a170 <SDMMC_GetCmdResp6+0xe8>)
 800a09c:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a0:	0a5b      	lsrs	r3, r3, #9
 800a0a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0a6:	fb02 f303 	mul.w	r3, r2, r3
 800a0aa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	1e5a      	subs	r2, r3, #1
 800a0b0:	61fa      	str	r2, [r7, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0b6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0ba:	e052      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0ef      	beq.n	800a0ac <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1ea      	bne.n	800a0ac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	e03a      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e02f      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fbca 	bl	800989c <SDMMC_GetCommandResponse>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	4293      	cmp	r3, r2
 800a110:	d001      	beq.n	800a116 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a112:	2301      	movs	r3, #1
 800a114:	e025      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	22c5      	movs	r2, #197	@ 0xc5
 800a11a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a11c:	2100      	movs	r1, #0
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff fbc9 	bl	80098b6 <SDMMC_GetResponse>
 800a124:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	b29a      	uxth	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e011      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a148:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a14c:	e009      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a158:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a15c:	e001      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a15e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000008 	.word	0x20000008
 800a170:	10624dd3 	.word	0x10624dd3

0800a174 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a17c:	4b22      	ldr	r3, [pc, #136]	@ (800a208 <SDMMC_GetCmdResp7+0x94>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a22      	ldr	r2, [pc, #136]	@ (800a20c <SDMMC_GetCmdResp7+0x98>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	0a5b      	lsrs	r3, r3, #9
 800a188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	1e5a      	subs	r2, r3, #1
 800a196:	60fa      	str	r2, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a19c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1a0:	e02c      	b.n	800a1fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0ef      	beq.n	800a192 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1ea      	bne.n	800a192 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d004      	beq.n	800a1d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	e014      	b.n	800a1fc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d004      	beq.n	800a1e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e009      	b.n	800a1fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2240      	movs	r2, #64	@ 0x40
 800a1f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a1fa:	2300      	movs	r3, #0
  
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	20000008 	.word	0x20000008
 800a20c:	10624dd3 	.word	0x10624dd3

0800a210 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a218:	4b11      	ldr	r3, [pc, #68]	@ (800a260 <SDMMC_GetCmdError+0x50>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a11      	ldr	r2, [pc, #68]	@ (800a264 <SDMMC_GetCmdError+0x54>)
 800a21e:	fba2 2303 	umull	r2, r3, r2, r3
 800a222:	0a5b      	lsrs	r3, r3, #9
 800a224:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a228:	fb02 f303 	mul.w	r3, r2, r3
 800a22c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1e5a      	subs	r2, r3, #1
 800a232:	60fa      	str	r2, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a238:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a23c:	e009      	b.n	800a252 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0f1      	beq.n	800a22e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	22c5      	movs	r2, #197	@ 0xc5
 800a24e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20000008 	.word	0x20000008
 800a264:	10624dd3 	.word	0x10624dd3

0800a268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a268:	b084      	sub	sp, #16
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	f107 001c 	add.w	r0, r7, #28
 800a276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a27a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d121      	bne.n	800a2c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a286:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68da      	ldr	r2, [r3, #12]
 800a292:	4b21      	ldr	r3, [pc, #132]	@ (800a318 <USB_CoreInit+0xb0>)
 800a294:	4013      	ands	r3, r2
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a2a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d105      	bne.n	800a2ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f9d4 	bl	800a668 <USB_CoreReset>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]
 800a2c4:	e010      	b.n	800a2e8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f9c8 	bl	800a668 <USB_CoreReset>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a2e8:	7fbb      	ldrb	r3, [r7, #30]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d10b      	bne.n	800a306 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f043 0206 	orr.w	r2, r3, #6
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f043 0220 	orr.w	r2, r3, #32
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a306:	7bfb      	ldrb	r3, [r7, #15]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a312:	b004      	add	sp, #16
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	ffbdffbf 	.word	0xffbdffbf

0800a31c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f043 0201 	orr.w	r2, r3, #1
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a33e:	b480      	push	{r7}
 800a340:	b083      	sub	sp, #12
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f023 0201 	bic.w	r2, r3, #1
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d115      	bne.n	800a3ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a38e:	200a      	movs	r0, #10
 800a390:	f7f5 ffac 	bl	80002ec <HAL_Delay>
      ms += 10U;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	330a      	adds	r3, #10
 800a398:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f956 	bl	800a64c <USB_GetMode>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d01e      	beq.n	800a3e4 <USB_SetCurrentMode+0x84>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a3aa:	d9f0      	bls.n	800a38e <USB_SetCurrentMode+0x2e>
 800a3ac:	e01a      	b.n	800a3e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3ae:	78fb      	ldrb	r3, [r7, #3]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d115      	bne.n	800a3e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a3c0:	200a      	movs	r0, #10
 800a3c2:	f7f5 ff93 	bl	80002ec <HAL_Delay>
      ms += 10U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	330a      	adds	r3, #10
 800a3ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f93d 	bl	800a64c <USB_GetMode>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d005      	beq.n	800a3e4 <USB_SetCurrentMode+0x84>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2bc7      	cmp	r3, #199	@ 0xc7
 800a3dc:	d9f0      	bls.n	800a3c0 <USB_SetCurrentMode+0x60>
 800a3de:	e001      	b.n	800a3e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e005      	b.n	800a3f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2bc8      	cmp	r3, #200	@ 0xc8
 800a3e8:	d101      	bne.n	800a3ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e000      	b.n	800a3f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3301      	adds	r3, #1
 800a40a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a412:	d901      	bls.n	800a418 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e01b      	b.n	800a450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	daf2      	bge.n	800a406 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	019b      	lsls	r3, r3, #6
 800a428:	f043 0220 	orr.w	r2, r3, #32
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3301      	adds	r3, #1
 800a434:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a43c:	d901      	bls.n	800a442 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e006      	b.n	800a450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d0f0      	beq.n	800a430 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a464:	2300      	movs	r3, #0
 800a466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3301      	adds	r3, #1
 800a46c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a474:	d901      	bls.n	800a47a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e018      	b.n	800a4ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	daf2      	bge.n	800a468 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2210      	movs	r2, #16
 800a48a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3301      	adds	r3, #1
 800a490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a498:	d901      	bls.n	800a49e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e006      	b.n	800a4ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 0310 	and.w	r3, r3, #16
 800a4a6:	2b10      	cmp	r3, #16
 800a4a8:	d0f0      	beq.n	800a48c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b089      	sub	sp, #36	@ 0x24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	71fb      	strb	r3, [r7, #7]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a4d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d123      	bne.n	800a526 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a4de:	88bb      	ldrh	r3, [r7, #4]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	089b      	lsrs	r3, r3, #2
 800a4e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61bb      	str	r3, [r7, #24]
 800a4ea:	e018      	b.n	800a51e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	031a      	lsls	r2, r3, #12
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	3301      	adds	r3, #1
 800a504:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	3301      	adds	r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	3301      	adds	r3, #1
 800a510:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	3301      	adds	r3, #1
 800a516:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	3301      	adds	r3, #1
 800a51c:	61bb      	str	r3, [r7, #24]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	429a      	cmp	r2, r3
 800a524:	d3e2      	bcc.n	800a4ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3724      	adds	r7, #36	@ 0x24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a534:	b480      	push	{r7}
 800a536:	b08b      	sub	sp, #44	@ 0x2c
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a54a:	88fb      	ldrh	r3, [r7, #6]
 800a54c:	089b      	lsrs	r3, r3, #2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	f003 0303 	and.w	r3, r3, #3
 800a558:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	623b      	str	r3, [r7, #32]
 800a55e:	e014      	b.n	800a58a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56e:	3301      	adds	r3, #1
 800a570:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	3301      	adds	r3, #1
 800a576:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	3301      	adds	r3, #1
 800a57c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a580:	3301      	adds	r3, #1
 800a582:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	3301      	adds	r3, #1
 800a588:	623b      	str	r3, [r7, #32]
 800a58a:	6a3a      	ldr	r2, [r7, #32]
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d3e6      	bcc.n	800a560 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a592:	8bfb      	ldrh	r3, [r7, #30]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01e      	beq.n	800a5d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f107 0310 	add.w	r3, r7, #16
 800a5a8:	6812      	ldr	r2, [r2, #0]
 800a5aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	701a      	strb	r2, [r3, #0]
      i++;
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a5ca:	8bfb      	ldrh	r3, [r7, #30]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a5d0:	8bfb      	ldrh	r3, [r7, #30]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1ea      	bne.n	800a5ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	372c      	adds	r7, #44	@ 0x2c
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	695b      	ldr	r3, [r3, #20]
 800a5f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b085      	sub	sp, #20
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	4413      	add	r3, r2
 800a622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4413      	add	r3, r2
 800a632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	4013      	ands	r3, r2
 800a63c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a63e:	68bb      	ldr	r3, [r7, #8]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	f003 0301 	and.w	r3, r3, #1
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	3301      	adds	r3, #1
 800a678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a680:	d901      	bls.n	800a686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e022      	b.n	800a6cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	daf2      	bge.n	800a674 <USB_CoreReset+0xc>

  count = 10U;
 800a68e:	230a      	movs	r3, #10
 800a690:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a692:	e002      	b.n	800a69a <USB_CoreReset+0x32>
  {
    count--;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3b01      	subs	r3, #1
 800a698:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f9      	bne.n	800a694 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	f043 0201 	orr.w	r2, r3, #1
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6b8:	d901      	bls.n	800a6be <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e006      	b.n	800a6cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d0f0      	beq.n	800a6ac <USB_CoreReset+0x44>

  return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6d8:	b084      	sub	sp, #16
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b086      	sub	sp, #24
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a6e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a702:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d119      	bne.n	800a74a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d10a      	bne.n	800a734 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a72c:	f043 0304 	orr.w	r3, r3, #4
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	e014      	b.n	800a75e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a742:	f023 0304 	bic.w	r3, r3, #4
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e009      	b.n	800a75e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a758:	f023 0304 	bic.w	r3, r3, #4
 800a75c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a75e:	2110      	movs	r1, #16
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fe49 	bl	800a3f8 <USB_FlushTxFifo>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff fe73 	bl	800a45c <USB_FlushRxFifo>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	e015      	b.n	800a7b2 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a792:	461a      	mov	r2, r3
 800a794:	f04f 33ff 	mov.w	r3, #4294967295
 800a798:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	613b      	str	r3, [r7, #16]
 800a7b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d3e3      	bcc.n	800a786 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ca:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a18      	ldr	r2, [pc, #96]	@ (800a830 <USB_HostInit+0x158>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d10b      	bne.n	800a7ec <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7da:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4a15      	ldr	r2, [pc, #84]	@ (800a834 <USB_HostInit+0x15c>)
 800a7e0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a14      	ldr	r2, [pc, #80]	@ (800a838 <USB_HostInit+0x160>)
 800a7e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800a7ea:	e009      	b.n	800a800 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2280      	movs	r2, #128	@ 0x80
 800a7f0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a11      	ldr	r2, [pc, #68]	@ (800a83c <USB_HostInit+0x164>)
 800a7f6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a11      	ldr	r2, [pc, #68]	@ (800a840 <USB_HostInit+0x168>)
 800a7fc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a800:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a804:	2b00      	cmp	r3, #0
 800a806:	d105      	bne.n	800a814 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	f043 0210 	orr.w	r2, r3, #16
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	699a      	ldr	r2, [r3, #24]
 800a818:	4b0a      	ldr	r3, [pc, #40]	@ (800a844 <USB_HostInit+0x16c>)
 800a81a:	4313      	orrs	r3, r2
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a820:	7dfb      	ldrb	r3, [r7, #23]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a82c:	b004      	add	sp, #16
 800a82e:	4770      	bx	lr
 800a830:	40040000 	.word	0x40040000
 800a834:	01000200 	.word	0x01000200
 800a838:	00e00300 	.word	0x00e00300
 800a83c:	00600080 	.word	0x00600080
 800a840:	004000e0 	.word	0x004000e0
 800a844:	a3200008 	.word	0xa3200008

0800a848 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68fa      	ldr	r2, [r7, #12]
 800a862:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	78fb      	ldrb	r3, [r7, #3]
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	68f9      	ldr	r1, [r7, #12]
 800a87c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a880:	4313      	orrs	r3, r2
 800a882:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a884:	78fb      	ldrb	r3, [r7, #3]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d107      	bne.n	800a89a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a890:	461a      	mov	r2, r3
 800a892:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a896:	6053      	str	r3, [r2, #4]
 800a898:	e00c      	b.n	800a8b4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d107      	bne.n	800a8b0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a8ac:	6053      	str	r3, [r2, #4]
 800a8ae:	e001      	b.n	800a8b4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e000      	b.n	800a8b6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a8e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a8ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a8f2:	2064      	movs	r0, #100	@ 0x64
 800a8f4:	f7f5 fcfa 	bl	80002ec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a904:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a906:	200a      	movs	r0, #10
 800a908:	f7f5 fcf0 	bl	80002ec <HAL_Delay>

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a916:	b480      	push	{r7}
 800a918:	b085      	sub	sp, #20
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	460b      	mov	r3, r1
 800a920:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a93a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <USB_DriveVbus+0x44>
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d106      	bne.n	800a95a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a958:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a964:	d109      	bne.n	800a97a <USB_DriveVbus+0x64>
 800a966:	78fb      	ldrb	r3, [r7, #3]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d106      	bne.n	800a97a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a978:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a994:	2300      	movs	r3, #0
 800a996:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	0c5b      	lsrs	r3, r3, #17
 800a9a6:	f003 0303 	and.w	r3, r3, #3
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b085      	sub	sp, #20
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	b29b      	uxth	r3, r3
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	4608      	mov	r0, r1
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	70fb      	strb	r3, [r7, #3]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	70bb      	strb	r3, [r7, #2]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	015a      	lsls	r2, r3, #5
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	4413      	add	r3, r2
 800aa02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa06:	461a      	mov	r2, r3
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aa0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d87c      	bhi.n	800ab10 <USB_HC_Init+0x138>
 800aa16:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <USB_HC_Init+0x44>)
 800aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1c:	0800aa2d 	.word	0x0800aa2d
 800aa20:	0800aad3 	.word	0x0800aad3
 800aa24:	0800aa2d 	.word	0x0800aa2d
 800aa28:	0800aa95 	.word	0x0800aa95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa38:	461a      	mov	r2, r3
 800aa3a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800aa3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aa40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	da10      	bge.n	800aa6a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	78fa      	ldrb	r2, [r7, #3]
 800aa58:	0151      	lsls	r1, r2, #5
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	440a      	add	r2, r1
 800aa5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa66:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800aa68:	e055      	b.n	800ab16 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a6f      	ldr	r2, [pc, #444]	@ (800ac2c <USB_HC_Init+0x254>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d151      	bne.n	800ab16 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	0151      	lsls	r1, r2, #5
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	440a      	add	r2, r1
 800aa88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa8c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800aa90:	60d3      	str	r3, [r2, #12]
      break;
 800aa92:	e040      	b.n	800ab16 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	f240 639d 	movw	r3, #1693	@ 0x69d
 800aaa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aaa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	da34      	bge.n	800ab1a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	78fa      	ldrb	r2, [r7, #3]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aaca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aace:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aad0:	e023      	b.n	800ab1a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aad2:	78fb      	ldrb	r3, [r7, #3]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aade:	461a      	mov	r2, r3
 800aae0:	f240 2325 	movw	r3, #549	@ 0x225
 800aae4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aae6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	da17      	bge.n	800ab1e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	78fa      	ldrb	r2, [r7, #3]
 800aafe:	0151      	lsls	r1, r2, #5
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	440a      	add	r2, r1
 800ab04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab08:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ab0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ab0e:	e006      	b.n	800ab1e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	77fb      	strb	r3, [r7, #31]
      break;
 800ab14:	e004      	b.n	800ab20 <USB_HC_Init+0x148>
      break;
 800ab16:	bf00      	nop
 800ab18:	e002      	b.n	800ab20 <USB_HC_Init+0x148>
      break;
 800ab1a:	bf00      	nop
 800ab1c:	e000      	b.n	800ab20 <USB_HC_Init+0x148>
      break;
 800ab1e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	2300      	movs	r3, #0
 800ab30:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	015a      	lsls	r2, r3, #5
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	78fa      	ldrb	r2, [r7, #3]
 800ab42:	0151      	lsls	r1, r2, #5
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	440a      	add	r2, r1
 800ab48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab4c:	f043 0302 	orr.w	r3, r3, #2
 800ab50:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	78fb      	ldrb	r3, [r7, #3]
 800ab5c:	f003 030f 	and.w	r3, r3, #15
 800ab60:	2101      	movs	r1, #1
 800ab62:	fa01 f303 	lsl.w	r3, r1, r3
 800ab66:	6939      	ldr	r1, [r7, #16]
 800ab68:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ab7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	da03      	bge.n	800ab8c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ab84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	e001      	b.n	800ab90 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff fef9 	bl	800a988 <USB_GetHostSpeed>
 800ab96:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ab98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d106      	bne.n	800abae <USB_HC_Init+0x1d6>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d003      	beq.n	800abae <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800aba6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	e001      	b.n	800abb2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abb2:	787b      	ldrb	r3, [r7, #1]
 800abb4:	059b      	lsls	r3, r3, #22
 800abb6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800abba:	78bb      	ldrb	r3, [r7, #2]
 800abbc:	02db      	lsls	r3, r3, #11
 800abbe:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abc2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800abc4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800abc8:	049b      	lsls	r3, r3, #18
 800abca:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800abce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800abd0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800abd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800abd6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	431a      	orrs	r2, r3
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abe0:	78fa      	ldrb	r2, [r7, #3]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800abec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abf0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800abf2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d003      	beq.n	800ac02 <USB_HC_Init+0x22a>
 800abfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d10f      	bne.n	800ac22 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	78fa      	ldrb	r2, [r7, #3]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac20:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ac22:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	40040000 	.word	0x40040000

0800ac30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b08c      	sub	sp, #48	@ 0x30
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	785b      	ldrb	r3, [r3, #1]
 800ac46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ac48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac4c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4a5d      	ldr	r2, [pc, #372]	@ (800adc8 <USB_HC_StartXfer+0x198>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d12f      	bne.n	800acb6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d11c      	bne.n	800ac96 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	7c9b      	ldrb	r3, [r3, #18]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <USB_HC_StartXfer+0x3c>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	7c9b      	ldrb	r3, [r3, #18]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d124      	bne.n	800acb6 <USB_HC_StartXfer+0x86>
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	799b      	ldrb	r3, [r3, #6]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d120      	bne.n	800acb6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	015a      	lsls	r2, r3, #5
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	0151      	lsls	r1, r2, #5
 800ac86:	6a3a      	ldr	r2, [r7, #32]
 800ac88:	440a      	add	r2, r1
 800ac8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ac8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac92:	60d3      	str	r3, [r2, #12]
 800ac94:	e00f      	b.n	800acb6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	791b      	ldrb	r3, [r3, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d10b      	bne.n	800acb6 <USB_HC_StartXfer+0x86>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	795b      	ldrb	r3, [r3, #5]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d107      	bne.n	800acb6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	4619      	mov	r1, r3
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	f000 fb6b 	bl	800b388 <USB_DoPing>
        return HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	e232      	b.n	800b11c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	799b      	ldrb	r3, [r3, #6]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d158      	bne.n	800ad70 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800acbe:	2301      	movs	r3, #1
 800acc0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	78db      	ldrb	r3, [r3, #3]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800acca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	8a92      	ldrh	r2, [r2, #20]
 800acd0:	fb03 f202 	mul.w	r2, r3, r2
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	61da      	str	r2, [r3, #28]
 800acd8:	e07c      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	7c9b      	ldrb	r3, [r3, #18]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d130      	bne.n	800ad44 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	2bbc      	cmp	r3, #188	@ 0xbc
 800ace8:	d918      	bls.n	800ad1c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	8a9b      	ldrh	r3, [r3, #20]
 800acee:	461a      	mov	r2, r3
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	69da      	ldr	r2, [r3, #28]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d003      	beq.n	800ad0c <USB_HC_StartXfer+0xdc>
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d103      	bne.n	800ad14 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2202      	movs	r2, #2
 800ad10:	60da      	str	r2, [r3, #12]
 800ad12:	e05f      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2201      	movs	r2, #1
 800ad18:	60da      	str	r2, [r3, #12]
 800ad1a:	e05b      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	6a1a      	ldr	r2, [r3, #32]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d007      	beq.n	800ad3c <USB_HC_StartXfer+0x10c>
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d003      	beq.n	800ad3c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2204      	movs	r2, #4
 800ad38:	60da      	str	r2, [r3, #12]
 800ad3a:	e04b      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2203      	movs	r2, #3
 800ad40:	60da      	str	r2, [r3, #12]
 800ad42:	e047      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d10d      	bne.n	800ad66 <USB_HC_StartXfer+0x136>
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	8a92      	ldrh	r2, [r2, #20]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d907      	bls.n	800ad66 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ad56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	8a92      	ldrh	r2, [r2, #20]
 800ad5c:	fb03 f202 	mul.w	r2, r3, r2
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	61da      	str	r2, [r3, #28]
 800ad64:	e036      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	6a1a      	ldr	r2, [r3, #32]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	61da      	str	r2, [r3, #28]
 800ad6e:	e031      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d018      	beq.n	800adaa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	6a1b      	ldr	r3, [r3, #32]
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	8a92      	ldrh	r2, [r2, #20]
 800ad80:	4413      	add	r3, r2
 800ad82:	3b01      	subs	r3, #1
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	8a92      	ldrh	r2, [r2, #20]
 800ad88:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ad8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ad90:	8b7b      	ldrh	r3, [r7, #26]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d90b      	bls.n	800adae <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ad96:	8b7b      	ldrh	r3, [r7, #26]
 800ad98:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ad9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	8a92      	ldrh	r2, [r2, #20]
 800ada0:	fb03 f202 	mul.w	r2, r3, r2
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	61da      	str	r2, [r3, #28]
 800ada8:	e001      	b.n	800adae <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800adaa:	2301      	movs	r3, #1
 800adac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	78db      	ldrb	r3, [r3, #3]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00a      	beq.n	800adcc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800adb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	8a92      	ldrh	r2, [r2, #20]
 800adbc:	fb03 f202 	mul.w	r2, r3, r2
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	61da      	str	r2, [r3, #28]
 800adc4:	e006      	b.n	800add4 <USB_HC_StartXfer+0x1a4>
 800adc6:	bf00      	nop
 800adc8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	6a1a      	ldr	r2, [r3, #32]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800addc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800adde:	04d9      	lsls	r1, r3, #19
 800ade0:	4ba3      	ldr	r3, [pc, #652]	@ (800b070 <USB_HC_StartXfer+0x440>)
 800ade2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ade4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	7d9b      	ldrb	r3, [r3, #22]
 800adea:	075b      	lsls	r3, r3, #29
 800adec:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800adf0:	69f9      	ldr	r1, [r7, #28]
 800adf2:	0148      	lsls	r0, r1, #5
 800adf4:	6a39      	ldr	r1, [r7, #32]
 800adf6:	4401      	add	r1, r0
 800adf8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800adfc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800adfe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ae00:	79fb      	ldrb	r3, [r7, #7]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d009      	beq.n	800ae1a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	6999      	ldr	r1, [r3, #24]
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	015a      	lsls	r2, r3, #5
 800ae0e:	6a3b      	ldr	r3, [r7, #32]
 800ae10:	4413      	add	r3, r2
 800ae12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae16:	460a      	mov	r2, r1
 800ae18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bf0c      	ite	eq
 800ae2a:	2301      	moveq	r3, #1
 800ae2c:	2300      	movne	r3, #0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	69fa      	ldr	r2, [r7, #28]
 800ae42:	0151      	lsls	r1, r2, #5
 800ae44:	6a3a      	ldr	r2, [r7, #32]
 800ae46:	440a      	add	r2, r1
 800ae48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ae4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ae50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	015a      	lsls	r2, r3, #5
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	4413      	add	r3, r2
 800ae5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	7e7b      	ldrb	r3, [r7, #25]
 800ae62:	075b      	lsls	r3, r3, #29
 800ae64:	69f9      	ldr	r1, [r7, #28]
 800ae66:	0148      	lsls	r0, r1, #5
 800ae68:	6a39      	ldr	r1, [r7, #32]
 800ae6a:	4401      	add	r1, r0
 800ae6c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800ae70:	4313      	orrs	r3, r2
 800ae72:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	799b      	ldrb	r3, [r3, #6]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	f040 80c3 	bne.w	800b004 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	7c5b      	ldrb	r3, [r3, #17]
 800ae82:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	69fa      	ldr	r2, [r7, #28]
 800ae8c:	0151      	lsls	r1, r2, #5
 800ae8e:	6a3a      	ldr	r2, [r7, #32]
 800ae90:	440a      	add	r2, r1
 800ae92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ae96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ae9a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	69fa      	ldr	r2, [r7, #28]
 800aeac:	0151      	lsls	r1, r2, #5
 800aeae:	6a3a      	ldr	r2, [r7, #32]
 800aeb0:	440a      	add	r2, r1
 800aeb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aeb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800aeba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	79db      	ldrb	r3, [r3, #7]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d123      	bne.n	800af0c <USB_HC_StartXfer+0x2dc>
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	78db      	ldrb	r3, [r3, #3]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d11f      	bne.n	800af0c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	6a3a      	ldr	r2, [r7, #32]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aeea:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	6a3a      	ldr	r2, [r7, #32]
 800af00:	440a      	add	r2, r1
 800af02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af0a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	7c9b      	ldrb	r3, [r3, #18]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d003      	beq.n	800af1c <USB_HC_StartXfer+0x2ec>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	7c9b      	ldrb	r3, [r3, #18]
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d117      	bne.n	800af4c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800af20:	2b01      	cmp	r3, #1
 800af22:	d113      	bne.n	800af4c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	78db      	ldrb	r3, [r3, #3]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d10f      	bne.n	800af4c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	4413      	add	r3, r2
 800af34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	0151      	lsls	r1, r2, #5
 800af3e:	6a3a      	ldr	r2, [r7, #32]
 800af40:	440a      	add	r2, r1
 800af42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af4a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	7c9b      	ldrb	r3, [r3, #18]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d162      	bne.n	800b01a <USB_HC_StartXfer+0x3ea>
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	78db      	ldrb	r3, [r3, #3]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d15e      	bne.n	800b01a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	3b01      	subs	r3, #1
 800af62:	2b03      	cmp	r3, #3
 800af64:	d858      	bhi.n	800b018 <USB_HC_StartXfer+0x3e8>
 800af66:	a201      	add	r2, pc, #4	@ (adr r2, 800af6c <USB_HC_StartXfer+0x33c>)
 800af68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6c:	0800af7d 	.word	0x0800af7d
 800af70:	0800af9f 	.word	0x0800af9f
 800af74:	0800afc1 	.word	0x0800afc1
 800af78:	0800afe3 	.word	0x0800afe3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	4413      	add	r3, r2
 800af84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	0151      	lsls	r1, r2, #5
 800af8e:	6a3a      	ldr	r2, [r7, #32]
 800af90:	440a      	add	r2, r1
 800af92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800af96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af9a:	6053      	str	r3, [r2, #4]
          break;
 800af9c:	e03d      	b.n	800b01a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	0151      	lsls	r1, r2, #5
 800afb0:	6a3a      	ldr	r2, [r7, #32]
 800afb2:	440a      	add	r2, r1
 800afb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afb8:	f043 030e 	orr.w	r3, r3, #14
 800afbc:	6053      	str	r3, [r2, #4]
          break;
 800afbe:	e02c      	b.n	800b01a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	6a3b      	ldr	r3, [r7, #32]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	69fa      	ldr	r2, [r7, #28]
 800afd0:	0151      	lsls	r1, r2, #5
 800afd2:	6a3a      	ldr	r2, [r7, #32]
 800afd4:	440a      	add	r2, r1
 800afd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800afda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800afde:	6053      	str	r3, [r2, #4]
          break;
 800afe0:	e01b      	b.n	800b01a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	015a      	lsls	r2, r3, #5
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	4413      	add	r3, r2
 800afea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	69fa      	ldr	r2, [r7, #28]
 800aff2:	0151      	lsls	r1, r2, #5
 800aff4:	6a3a      	ldr	r2, [r7, #32]
 800aff6:	440a      	add	r2, r1
 800aff8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800affc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b000:	6053      	str	r3, [r2, #4]
          break;
 800b002:	e00a      	b.n	800b01a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	6a3b      	ldr	r3, [r7, #32]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b010:	461a      	mov	r2, r3
 800b012:	2300      	movs	r3, #0
 800b014:	6053      	str	r3, [r2, #4]
 800b016:	e000      	b.n	800b01a <USB_HC_StartXfer+0x3ea>
          break;
 800b018:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	4413      	add	r3, r2
 800b022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b030:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	78db      	ldrb	r3, [r3, #3]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b040:	613b      	str	r3, [r7, #16]
 800b042:	e003      	b.n	800b04c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b04a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b052:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b060:	461a      	mov	r2, r3
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	e055      	b.n	800b11c <USB_HC_StartXfer+0x4ec>
 800b070:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	78db      	ldrb	r3, [r3, #3]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d14e      	bne.n	800b11a <USB_HC_StartXfer+0x4ea>
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d04a      	beq.n	800b11a <USB_HC_StartXfer+0x4ea>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	79db      	ldrb	r3, [r3, #7]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d146      	bne.n	800b11a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	7c9b      	ldrb	r3, [r3, #18]
 800b090:	2b03      	cmp	r3, #3
 800b092:	d831      	bhi.n	800b0f8 <USB_HC_StartXfer+0x4c8>
 800b094:	a201      	add	r2, pc, #4	@ (adr r2, 800b09c <USB_HC_StartXfer+0x46c>)
 800b096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09a:	bf00      	nop
 800b09c:	0800b0ad 	.word	0x0800b0ad
 800b0a0:	0800b0d1 	.word	0x0800b0d1
 800b0a4:	0800b0ad 	.word	0x0800b0ad
 800b0a8:	0800b0d1 	.word	0x0800b0d1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	3303      	adds	r3, #3
 800b0b2:	089b      	lsrs	r3, r3, #2
 800b0b4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b0b6:	8afa      	ldrh	r2, [r7, #22]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d91c      	bls.n	800b0fc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	f043 0220 	orr.w	r2, r3, #32
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	619a      	str	r2, [r3, #24]
        }
        break;
 800b0ce:	e015      	b.n	800b0fc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	3303      	adds	r3, #3
 800b0d6:	089b      	lsrs	r3, r3, #2
 800b0d8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b0da:	8afa      	ldrh	r2, [r7, #22]
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d90a      	bls.n	800b100 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b0f6:	e003      	b.n	800b100 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b0f8:	bf00      	nop
 800b0fa:	e002      	b.n	800b102 <USB_HC_StartXfer+0x4d2>
        break;
 800b0fc:	bf00      	nop
 800b0fe:	e000      	b.n	800b102 <USB_HC_StartXfer+0x4d2>
        break;
 800b100:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	6999      	ldr	r1, [r3, #24]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	785a      	ldrb	r2, [r3, #1]
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	2000      	movs	r0, #0
 800b112:	9000      	str	r0, [sp, #0]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7ff f9cf 	bl	800a4b8 <USB_WritePacket>
  }

  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3728      	adds	r7, #40	@ 0x28
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	b29b      	uxth	r3, r3
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b146:	b480      	push	{r7}
 800b148:	b089      	sub	sp, #36	@ 0x24
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	460b      	mov	r3, r1
 800b150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b156:	78fb      	ldrb	r3, [r7, #3]
 800b158:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	0c9b      	lsrs	r3, r3, #18
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	0fdb      	lsrs	r3, r3, #31
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	4413      	add	r3, r2
 800b192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	0fdb      	lsrs	r3, r3, #31
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	f003 0320 	and.w	r3, r3, #32
 800b1a8:	2b20      	cmp	r3, #32
 800b1aa:	d10d      	bne.n	800b1c8 <USB_HC_Halt+0x82>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10a      	bne.n	800b1c8 <USB_HC_Halt+0x82>
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d002      	beq.n	800b1c4 <USB_HC_Halt+0x7e>
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d101      	bne.n	800b1c8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e0d8      	b.n	800b37a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <USB_HC_Halt+0x8e>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d173      	bne.n	800b2bc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	0151      	lsls	r1, r2, #5
 800b1e6:	69fa      	ldr	r2, [r7, #28]
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b1f2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d14a      	bne.n	800b296 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b204:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d133      	bne.n	800b274 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	4413      	add	r3, r2
 800b214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	69ba      	ldr	r2, [r7, #24]
 800b21c:	0151      	lsls	r1, r2, #5
 800b21e:	69fa      	ldr	r2, [r7, #28]
 800b220:	440a      	add	r2, r1
 800b222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b226:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b22a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	4413      	add	r3, r2
 800b234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	69ba      	ldr	r2, [r7, #24]
 800b23c:	0151      	lsls	r1, r2, #5
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	440a      	add	r2, r1
 800b242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b246:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b24a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	3301      	adds	r3, #1
 800b250:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b258:	d82e      	bhi.n	800b2b8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	4413      	add	r3, r2
 800b262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b26c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b270:	d0ec      	beq.n	800b24c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b272:	e081      	b.n	800b378 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	69ba      	ldr	r2, [r7, #24]
 800b284:	0151      	lsls	r1, r2, #5
 800b286:	69fa      	ldr	r2, [r7, #28]
 800b288:	440a      	add	r2, r1
 800b28a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b28e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b292:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b294:	e070      	b.n	800b378 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	015a      	lsls	r2, r3, #5
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	4413      	add	r3, r2
 800b29e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	69ba      	ldr	r2, [r7, #24]
 800b2a6:	0151      	lsls	r1, r2, #5
 800b2a8:	69fa      	ldr	r2, [r7, #28]
 800b2aa:	440a      	add	r2, r1
 800b2ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b2b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b2b6:	e05f      	b.n	800b378 <USB_HC_Halt+0x232>
            break;
 800b2b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b2ba:	e05d      	b.n	800b378 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d133      	bne.n	800b354 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	0151      	lsls	r1, r2, #5
 800b2fe:	69fa      	ldr	r2, [r7, #28]
 800b300:	440a      	add	r2, r1
 800b302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b306:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b30a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	4413      	add	r3, r2
 800b314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	0151      	lsls	r1, r2, #5
 800b31e:	69fa      	ldr	r2, [r7, #28]
 800b320:	440a      	add	r2, r1
 800b322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b32a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	3301      	adds	r3, #1
 800b330:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b338:	d81d      	bhi.n	800b376 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	015a      	lsls	r2, r3, #5
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	4413      	add	r3, r2
 800b342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b34c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b350:	d0ec      	beq.n	800b32c <USB_HC_Halt+0x1e6>
 800b352:	e011      	b.n	800b378 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b36e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	e000      	b.n	800b378 <USB_HC_Halt+0x232>
          break;
 800b376:	bf00      	nop
    }
  }

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3724      	adds	r7, #36	@ 0x24
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b398:	78fb      	ldrb	r3, [r7, #3]
 800b39a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b39c:	2301      	movs	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	04da      	lsls	r2, r3, #19
 800b3a4:	4b15      	ldr	r3, [pc, #84]	@ (800b3fc <USB_DoPing+0x74>)
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b3b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b3d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b3d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	371c      	adds	r7, #28
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	1ff80000 	.word	0x1ff80000

0800b400 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7fe ff92 	bl	800a33e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b41a:	2110      	movs	r1, #16
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fe ffeb 	bl	800a3f8 <USB_FlushTxFifo>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7ff f815 	bl	800a45c <USB_FlushRxFifo>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b43c:	2300      	movs	r3, #0
 800b43e:	61bb      	str	r3, [r7, #24]
 800b440:	e01f      	b.n	800b482 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b458:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b460:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b468:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	4413      	add	r3, r2
 800b472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b476:	461a      	mov	r2, r3
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	3301      	adds	r3, #1
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	2b0f      	cmp	r3, #15
 800b486:	d9dc      	bls.n	800b442 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b488:	2300      	movs	r3, #0
 800b48a:	61bb      	str	r3, [r7, #24]
 800b48c:	e034      	b.n	800b4f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	4413      	add	r3, r2
 800b496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b4ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b4b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b4d4:	d80c      	bhi.n	800b4f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	015a      	lsls	r2, r3, #5
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4ec:	d0ec      	beq.n	800b4c8 <USB_StopHost+0xc8>
 800b4ee:	e000      	b.n	800b4f2 <USB_StopHost+0xf2>
        break;
 800b4f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b0f      	cmp	r3, #15
 800b4fc:	d9c7      	bls.n	800b48e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b504:	461a      	mov	r2, r3
 800b506:	f04f 33ff 	mov.w	r3, #4294967295
 800b50a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f04f 32ff 	mov.w	r2, #4294967295
 800b512:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7fe ff01 	bl	800a31c <USB_EnableGlobalInt>

  return ret;
 800b51a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3720      	adds	r7, #32
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b524:	b480      	push	{r7}
 800b526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b528:	4b06      	ldr	r3, [pc, #24]	@ (800b544 <SystemInit+0x20>)
 800b52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b52e:	4a05      	ldr	r2, [pc, #20]	@ (800b544 <SystemInit+0x20>)
 800b530:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b534:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b538:	bf00      	nop
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	e000ed00 	.word	0xe000ed00

0800b548 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800b54c:	bf00      	nop
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800b556:	b480      	push	{r7}
 800b558:	b083      	sub	sp, #12
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800b56c:	b480      	push	{r7}
 800b56e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800b570:	bf00      	nop
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
	...

0800b57c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4a07      	ldr	r2, [pc, #28]	@ (800b5a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b58c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	4a06      	ldr	r2, [pc, #24]	@ (800b5ac <vApplicationGetIdleTaskMemory+0x30>)
 800b592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b59a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800b59c:	bf00      	nop
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	200001e8 	.word	0x200001e8
 800b5ac:	20000240 	.word	0x20000240

0800b5b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800b5b0:	b5b0      	push	{r4, r5, r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800b5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b5e0 <MX_FREERTOS_Init+0x30>)
 800b5b8:	1d3c      	adds	r4, r7, #4
 800b5ba:	461d      	mov	r5, r3
 800b5bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b5c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b5c8:	1d3b      	adds	r3, r7, #4
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f004 f9e8 	bl	800f9a2 <osThreadCreate>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	4a03      	ldr	r2, [pc, #12]	@ (800b5e4 <MX_FREERTOS_Init+0x34>)
 800b5d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800b5d8:	bf00      	nop
 800b5da:	3720      	adds	r7, #32
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bdb0      	pop	{r4, r5, r7, pc}
 800b5e0:	080139d0 	.word	0x080139d0
 800b5e4:	200001e4 	.word	0x200001e4

0800b5e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800b5f0:	f007 fbd2 	bl	8012d98 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800b5f4:	2001      	movs	r0, #1
 800b5f6:	f004 fa20 	bl	800fa3a <osDelay>
 800b5fa:	e7fb      	b.n	800b5f4 <StartDefaultTask+0xc>

0800b5fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b600:	bf00      	nop
 800b602:	e7fd      	b.n	800b600 <NMI_Handler+0x4>

0800b604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b604:	b480      	push	{r7}
 800b606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b608:	bf00      	nop
 800b60a:	e7fd      	b.n	800b608 <HardFault_Handler+0x4>

0800b60c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b610:	bf00      	nop
 800b612:	e7fd      	b.n	800b610 <MemManage_Handler+0x4>

0800b614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b614:	b480      	push	{r7}
 800b616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b618:	bf00      	nop
 800b61a:	e7fd      	b.n	800b618 <BusFault_Handler+0x4>

0800b61c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b620:	bf00      	nop
 800b622:	e7fd      	b.n	800b620 <UsageFault_Handler+0x4>

0800b624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b624:	b480      	push	{r7}
 800b626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b628:	bf00      	nop
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
	...

0800b634 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b638:	4802      	ldr	r0, [pc, #8]	@ (800b644 <TIM6_DAC_IRQHandler+0x10>)
 800b63a:	f7fc fb98 	bl	8007d6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b63e:	bf00      	nop
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20000c60 	.word	0x20000c60

0800b648 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b64c:	4802      	ldr	r0, [pc, #8]	@ (800b658 <OTG_FS_IRQHandler+0x10>)
 800b64e:	f7f6 fdc5 	bl	80021dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b652:	bf00      	nop
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	200094d0 	.word	0x200094d0

0800b65c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b660:	4802      	ldr	r0, [pc, #8]	@ (800b66c <LTDC_IRQHandler+0x10>)
 800b662:	f7f8 fddf 	bl	8004224 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800b666:	bf00      	nop
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	2000090c 	.word	0x2000090c

0800b670 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b674:	4802      	ldr	r0, [pc, #8]	@ (800b680 <DMA2D_IRQHandler+0x10>)
 800b676:	f7f5 fc27 	bl	8000ec8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800b67a:	bf00      	nop
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	200006fc 	.word	0x200006fc

0800b684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b688:	f7f4 fe02 	bl	8000290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b68c:	f000 f83a 	bl	800b704 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800b690:	f000 f8a2 	bl	800b7d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b694:	f000 fce8 	bl	800c068 <MX_GPIO_Init>
  MX_ADC3_Init();
 800b698:	f000 f8de 	bl	800b858 <MX_ADC3_Init>
  MX_CRC_Init();
 800b69c:	f000 f988 	bl	800b9b0 <MX_CRC_Init>
  MX_DCMI_Init();
 800b6a0:	f000 f9c8 	bl	800ba34 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800b6a4:	f000 fab8 	bl	800bc18 <MX_DMA2D_Init>
  MX_ETH_Init();
 800b6a8:	f000 fb0e 	bl	800bcc8 <MX_ETH_Init>
  MX_FMC_Init();
 800b6ac:	f000 fbf2 	bl	800be94 <MX_FMC_Init>
  MX_I2C1_Init();
 800b6b0:	f000 fe98 	bl	800c3e4 <MX_I2C1_Init>
  MX_I2C3_Init();
 800b6b4:	f000 fed6 	bl	800c464 <MX_I2C3_Init>
  MX_LTDC_Init();
 800b6b8:	f000 ffbc 	bl	800c634 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800b6bc:	f001 f904 	bl	800c8c8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800b6c0:	f001 f9be 	bl	800ca40 <MX_RTC_Init>
  MX_SAI2_Init();
 800b6c4:	f001 fa8e 	bl	800cbe4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800b6c8:	f001 fb9e 	bl	800ce08 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800b6cc:	f001 fc42 	bl	800cf54 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800b6d0:	f001 fcd4 	bl	800d07c <MX_SPI2_Init>
  MX_TIM1_Init();
 800b6d4:	f001 fe14 	bl	800d300 <MX_TIM1_Init>
  MX_TIM2_Init();
 800b6d8:	f001 febe 	bl	800d458 <MX_TIM2_Init>
  MX_TIM3_Init();
 800b6dc:	f001 ff32 	bl	800d544 <MX_TIM3_Init>
  MX_TIM5_Init();
 800b6e0:	f001 ffa8 	bl	800d634 <MX_TIM5_Init>
  MX_TIM8_Init();
 800b6e4:	f002 f81e 	bl	800d724 <MX_TIM8_Init>
  MX_TIM12_Init();
 800b6e8:	f002 f870 	bl	800d7cc <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800b6ec:	f002 fa10 	bl	800db10 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800b6f0:	f002 fa3e 	bl	800db70 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800b6f4:	f004 ff32 	bl	801055c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800b6f8:	f7ff ff5a 	bl	800b5b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800b6fc:	f004 f92e 	bl	800f95c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b700:	bf00      	nop
 800b702:	e7fd      	b.n	800b700 <main+0x7c>

0800b704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b094      	sub	sp, #80	@ 0x50
 800b708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b70a:	f107 0320 	add.w	r3, r7, #32
 800b70e:	2230      	movs	r2, #48	@ 0x30
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f008 f8a6 	bl	8013864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b718:	f107 030c 	add.w	r3, r7, #12
 800b71c:	2200      	movs	r2, #0
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	605a      	str	r2, [r3, #4]
 800b722:	609a      	str	r2, [r3, #8]
 800b724:	60da      	str	r2, [r3, #12]
 800b726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b728:	4b29      	ldr	r3, [pc, #164]	@ (800b7d0 <SystemClock_Config+0xcc>)
 800b72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b72c:	4a28      	ldr	r2, [pc, #160]	@ (800b7d0 <SystemClock_Config+0xcc>)
 800b72e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b732:	6413      	str	r3, [r2, #64]	@ 0x40
 800b734:	4b26      	ldr	r3, [pc, #152]	@ (800b7d0 <SystemClock_Config+0xcc>)
 800b736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b73c:	60bb      	str	r3, [r7, #8]
 800b73e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800b740:	4b24      	ldr	r3, [pc, #144]	@ (800b7d4 <SystemClock_Config+0xd0>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800b748:	4a22      	ldr	r2, [pc, #136]	@ (800b7d4 <SystemClock_Config+0xd0>)
 800b74a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	4b20      	ldr	r3, [pc, #128]	@ (800b7d4 <SystemClock_Config+0xd0>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b758:	607b      	str	r3, [r7, #4]
 800b75a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800b75c:	2309      	movs	r3, #9
 800b75e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800b766:	2301      	movs	r3, #1
 800b768:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b76a:	2302      	movs	r3, #2
 800b76c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b76e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800b774:	230f      	movs	r3, #15
 800b776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800b778:	2390      	movs	r3, #144	@ 0x90
 800b77a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b77c:	2302      	movs	r3, #2
 800b77e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800b780:	2305      	movs	r3, #5
 800b782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b784:	f107 0320 	add.w	r3, r7, #32
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f9 f883 	bl	8004894 <HAL_RCC_OscConfig>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b794:	f000 f85a 	bl	800b84c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b798:	230f      	movs	r3, #15
 800b79a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b79c:	2302      	movs	r3, #2
 800b79e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800b7a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800b7a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800b7aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b7b0:	f107 030c 	add.w	r3, r7, #12
 800b7b4:	2103      	movs	r1, #3
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f9 fb10 	bl	8004ddc <HAL_RCC_ClockConfig>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800b7c2:	f000 f843 	bl	800b84c <Error_Handler>
  }
}
 800b7c6:	bf00      	nop
 800b7c8:	3750      	adds	r7, #80	@ 0x50
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	40023800 	.word	0x40023800
 800b7d4:	40007000 	.word	0x40007000

0800b7d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b0a2      	sub	sp, #136	@ 0x88
 800b7dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b7de:	1d3b      	adds	r3, r7, #4
 800b7e0:	2284      	movs	r2, #132	@ 0x84
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f008 f83d 	bl	8013864 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800b7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b824 <PeriphCommonClock_Config+0x4c>)
 800b7ec:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 60;
 800b7ee:	233c      	movs	r3, #60	@ 0x3c
 800b7f0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800b7f2:	2302      	movs	r3, #2
 800b7f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800b7fe:	2301      	movs	r3, #1
 800b800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800b802:	2300      	movs	r3, #0
 800b804:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800b806:	2300      	movs	r3, #0
 800b808:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b80a:	1d3b      	adds	r3, r7, #4
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7f9 fcfb 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <PeriphCommonClock_Config+0x44>
  {
    Error_Handler();
 800b818:	f000 f818 	bl	800b84c <Error_Handler>
  }
}
 800b81c:	bf00      	nop
 800b81e:	3788      	adds	r7, #136	@ 0x88
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	00300008 	.word	0x00300008

0800b828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a04      	ldr	r2, [pc, #16]	@ (800b848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d101      	bne.n	800b83e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800b83a:	f7f4 fd37 	bl	80002ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	40001000 	.word	0x40001000

0800b84c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b850:	b672      	cpsid	i
}
 800b852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800b854:	bf00      	nop
 800b856:	e7fd      	b.n	800b854 <Error_Handler+0x8>

0800b858 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b85e:	463b      	mov	r3, r7
 800b860:	2200      	movs	r2, #0
 800b862:	601a      	str	r2, [r3, #0]
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	609a      	str	r2, [r3, #8]
 800b868:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800b86a:	4b21      	ldr	r3, [pc, #132]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b86c:	4a21      	ldr	r2, [pc, #132]	@ (800b8f4 <MX_ADC3_Init+0x9c>)
 800b86e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800b870:	4b1f      	ldr	r3, [pc, #124]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b872:	2200      	movs	r2, #0
 800b874:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800b876:	4b1e      	ldr	r3, [pc, #120]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b878:	2200      	movs	r2, #0
 800b87a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800b87c:	4b1c      	ldr	r3, [pc, #112]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b87e:	2200      	movs	r2, #0
 800b880:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800b882:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b884:	2200      	movs	r2, #0
 800b886:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800b888:	4b19      	ldr	r3, [pc, #100]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800b890:	4b17      	ldr	r3, [pc, #92]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b892:	2200      	movs	r2, #0
 800b894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800b896:	4b16      	ldr	r3, [pc, #88]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b898:	4a17      	ldr	r2, [pc, #92]	@ (800b8f8 <MX_ADC3_Init+0xa0>)
 800b89a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b89c:	4b14      	ldr	r3, [pc, #80]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800b8a2:	4b13      	ldr	r3, [pc, #76]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800b8a8:	4b11      	ldr	r3, [pc, #68]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b8b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800b8b6:	480e      	ldr	r0, [pc, #56]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b8b8:	f7f4 fd3c 	bl	8000334 <HAL_ADC_Init>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800b8c2:	f7ff ffc3 	bl	800b84c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800b8c6:	2304      	movs	r3, #4
 800b8c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800b8d2:	463b      	mov	r3, r7
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4806      	ldr	r0, [pc, #24]	@ (800b8f0 <MX_ADC3_Init+0x98>)
 800b8d8:	f7f4 fd70 	bl	80003bc <HAL_ADC_ConfigChannel>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800b8e2:	f7ff ffb3 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20000640 	.word	0x20000640
 800b8f4:	40012200 	.word	0x40012200
 800b8f8:	0f000001 	.word	0x0f000001

0800b8fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	@ 0x28
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b904:	f107 0314 	add.w	r3, r7, #20
 800b908:	2200      	movs	r2, #0
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	605a      	str	r2, [r3, #4]
 800b90e:	609a      	str	r2, [r3, #8]
 800b910:	60da      	str	r2, [r3, #12]
 800b912:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a21      	ldr	r2, [pc, #132]	@ (800b9a0 <HAL_ADC_MspInit+0xa4>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d13c      	bne.n	800b998 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800b91e:	4b21      	ldr	r3, [pc, #132]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b922:	4a20      	ldr	r2, [pc, #128]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b924:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b928:	6453      	str	r3, [r2, #68]	@ 0x44
 800b92a:	4b1e      	ldr	r3, [pc, #120]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b92e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b932:	613b      	str	r3, [r7, #16]
 800b934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b936:	4b1b      	ldr	r3, [pc, #108]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b93a:	4a1a      	ldr	r2, [pc, #104]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b93c:	f043 0320 	orr.w	r3, r3, #32
 800b940:	6313      	str	r3, [r2, #48]	@ 0x30
 800b942:	4b18      	ldr	r3, [pc, #96]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b946:	f003 0320 	and.w	r3, r3, #32
 800b94a:	60fb      	str	r3, [r7, #12]
 800b94c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b94e:	4b15      	ldr	r3, [pc, #84]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b952:	4a14      	ldr	r2, [pc, #80]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b954:	f043 0301 	orr.w	r3, r3, #1
 800b958:	6313      	str	r3, [r2, #48]	@ 0x30
 800b95a:	4b12      	ldr	r3, [pc, #72]	@ (800b9a4 <HAL_ADC_MspInit+0xa8>)
 800b95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b95e:	f003 0301 	and.w	r3, r3, #1
 800b962:	60bb      	str	r3, [r7, #8]
 800b964:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800b966:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800b96a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b96c:	2303      	movs	r3, #3
 800b96e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b970:	2300      	movs	r3, #0
 800b972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b974:	f107 0314 	add.w	r3, r7, #20
 800b978:	4619      	mov	r1, r3
 800b97a:	480b      	ldr	r0, [pc, #44]	@ (800b9a8 <HAL_ADC_MspInit+0xac>)
 800b97c:	f7f5 ff94 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800b980:	2301      	movs	r3, #1
 800b982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b984:	2303      	movs	r3, #3
 800b986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b988:	2300      	movs	r3, #0
 800b98a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800b98c:	f107 0314 	add.w	r3, r7, #20
 800b990:	4619      	mov	r1, r3
 800b992:	4806      	ldr	r0, [pc, #24]	@ (800b9ac <HAL_ADC_MspInit+0xb0>)
 800b994:	f7f5 ff88 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800b998:	bf00      	nop
 800b99a:	3728      	adds	r7, #40	@ 0x28
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	40012200 	.word	0x40012200
 800b9a4:	40023800 	.word	0x40023800
 800b9a8:	40021400 	.word	0x40021400
 800b9ac:	40020000 	.word	0x40020000

0800b9b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800b9b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b9ec <MX_CRC_Init+0x3c>)
 800b9b6:	4a0e      	ldr	r2, [pc, #56]	@ (800b9f0 <MX_CRC_Init+0x40>)
 800b9b8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ec <MX_CRC_Init+0x3c>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ec <MX_CRC_Init+0x3c>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800b9c6:	4b09      	ldr	r3, [pc, #36]	@ (800b9ec <MX_CRC_Init+0x3c>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800b9cc:	4b07      	ldr	r3, [pc, #28]	@ (800b9ec <MX_CRC_Init+0x3c>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800b9d2:	4b06      	ldr	r3, [pc, #24]	@ (800b9ec <MX_CRC_Init+0x3c>)
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800b9d8:	4804      	ldr	r0, [pc, #16]	@ (800b9ec <MX_CRC_Init+0x3c>)
 800b9da:	f7f5 f825 	bl	8000a28 <HAL_CRC_Init>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800b9e4:	f7ff ff32 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800b9e8:	bf00      	nop
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	20000688 	.word	0x20000688
 800b9f0:	40023000 	.word	0x40023000

0800b9f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a0a      	ldr	r2, [pc, #40]	@ (800ba2c <HAL_CRC_MspInit+0x38>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d10b      	bne.n	800ba1e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ba06:	4b0a      	ldr	r3, [pc, #40]	@ (800ba30 <HAL_CRC_MspInit+0x3c>)
 800ba08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba0a:	4a09      	ldr	r2, [pc, #36]	@ (800ba30 <HAL_CRC_MspInit+0x3c>)
 800ba0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ba10:	6313      	str	r3, [r2, #48]	@ 0x30
 800ba12:	4b07      	ldr	r3, [pc, #28]	@ (800ba30 <HAL_CRC_MspInit+0x3c>)
 800ba14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800ba1e:	bf00      	nop
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	40023000 	.word	0x40023000
 800ba30:	40023800 	.word	0x40023800

0800ba34 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800ba38:	4b16      	ldr	r3, [pc, #88]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba3a:	4a17      	ldr	r2, [pc, #92]	@ (800ba98 <MX_DCMI_Init+0x64>)
 800ba3c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800ba3e:	4b15      	ldr	r3, [pc, #84]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800ba44:	4b13      	ldr	r3, [pc, #76]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800ba4a:	4b12      	ldr	r3, [pc, #72]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800ba50:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800ba56:	4b0f      	ldr	r3, [pc, #60]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800ba5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800ba62:	4b0c      	ldr	r3, [pc, #48]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800ba68:	4b0a      	ldr	r3, [pc, #40]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800ba6e:	4b09      	ldr	r3, [pc, #36]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800ba74:	4b07      	ldr	r3, [pc, #28]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800ba7a:	4b06      	ldr	r3, [pc, #24]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800ba80:	4804      	ldr	r0, [pc, #16]	@ (800ba94 <MX_DCMI_Init+0x60>)
 800ba82:	f7f5 f8c3 	bl	8000c0c <HAL_DCMI_Init>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800ba8c:	f7ff fede 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800ba90:	bf00      	nop
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	200006ac 	.word	0x200006ac
 800ba98:	50050000 	.word	0x50050000

0800ba9c <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b08e      	sub	sp, #56	@ 0x38
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]
 800baac:	605a      	str	r2, [r3, #4]
 800baae:	609a      	str	r2, [r3, #8]
 800bab0:	60da      	str	r2, [r3, #12]
 800bab2:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a50      	ldr	r2, [pc, #320]	@ (800bbfc <HAL_DCMI_MspInit+0x160>)
 800baba:	4293      	cmp	r3, r2
 800babc:	f040 809a 	bne.w	800bbf4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800bac0:	4b4f      	ldr	r3, [pc, #316]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bac4:	4a4e      	ldr	r2, [pc, #312]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bac6:	f043 0301 	orr.w	r3, r3, #1
 800baca:	6353      	str	r3, [r2, #52]	@ 0x34
 800bacc:	4b4c      	ldr	r3, [pc, #304]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	623b      	str	r3, [r7, #32]
 800bad6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bad8:	4b49      	ldr	r3, [pc, #292]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800badc:	4a48      	ldr	r2, [pc, #288]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bade:	f043 0310 	orr.w	r3, r3, #16
 800bae2:	6313      	str	r3, [r2, #48]	@ 0x30
 800bae4:	4b46      	ldr	r3, [pc, #280]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bae8:	f003 0310 	and.w	r3, r3, #16
 800baec:	61fb      	str	r3, [r7, #28]
 800baee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800baf0:	4b43      	ldr	r3, [pc, #268]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800baf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baf4:	4a42      	ldr	r2, [pc, #264]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800baf6:	f043 0308 	orr.w	r3, r3, #8
 800bafa:	6313      	str	r3, [r2, #48]	@ 0x30
 800bafc:	4b40      	ldr	r3, [pc, #256]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bafe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb00:	f003 0308 	and.w	r3, r3, #8
 800bb04:	61bb      	str	r3, [r7, #24]
 800bb06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bb08:	4b3d      	ldr	r3, [pc, #244]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb0c:	4a3c      	ldr	r2, [pc, #240]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb12:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb14:	4b3a      	ldr	r3, [pc, #232]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb1c:	617b      	str	r3, [r7, #20]
 800bb1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800bb20:	4b37      	ldr	r3, [pc, #220]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb24:	4a36      	ldr	r2, [pc, #216]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb2a:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb2c:	4b34      	ldr	r3, [pc, #208]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb34:	613b      	str	r3, [r7, #16]
 800bb36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb38:	4b31      	ldr	r3, [pc, #196]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb3c:	4a30      	ldr	r2, [pc, #192]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb3e:	f043 0301 	orr.w	r3, r3, #1
 800bb42:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb44:	4b2e      	ldr	r3, [pc, #184]	@ (800bc00 <HAL_DCMI_MspInit+0x164>)
 800bb46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb48:	f003 0301 	and.w	r3, r3, #1
 800bb4c:	60fb      	str	r3, [r7, #12]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800bb50:	2360      	movs	r3, #96	@ 0x60
 800bb52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb54:	2302      	movs	r3, #2
 800bb56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800bb60:	230d      	movs	r3, #13
 800bb62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bb64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb68:	4619      	mov	r1, r3
 800bb6a:	4826      	ldr	r0, [pc, #152]	@ (800bc04 <HAL_DCMI_MspInit+0x168>)
 800bb6c:	f7f5 fe9c 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800bb70:	2308      	movs	r3, #8
 800bb72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb74:	2302      	movs	r3, #2
 800bb76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800bb80:	230d      	movs	r3, #13
 800bb82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800bb84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb88:	4619      	mov	r1, r3
 800bb8a:	481f      	ldr	r0, [pc, #124]	@ (800bc08 <HAL_DCMI_MspInit+0x16c>)
 800bb8c:	f7f5 fe8c 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800bb90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb96:	2302      	movs	r3, #2
 800bb98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800bba2:	230d      	movs	r3, #13
 800bba4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800bba6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4817      	ldr	r0, [pc, #92]	@ (800bc0c <HAL_DCMI_MspInit+0x170>)
 800bbae:	f7f5 fe7b 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800bbb2:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 800bbb6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbb8:	2302      	movs	r3, #2
 800bbba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800bbc4:	230d      	movs	r3, #13
 800bbc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800bbc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4810      	ldr	r0, [pc, #64]	@ (800bc10 <HAL_DCMI_MspInit+0x174>)
 800bbd0:	f7f5 fe6a 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800bbd4:	2350      	movs	r3, #80	@ 0x50
 800bbd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800bbe4:	230d      	movs	r3, #13
 800bbe6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbec:	4619      	mov	r1, r3
 800bbee:	4809      	ldr	r0, [pc, #36]	@ (800bc14 <HAL_DCMI_MspInit+0x178>)
 800bbf0:	f7f5 fe5a 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800bbf4:	bf00      	nop
 800bbf6:	3738      	adds	r7, #56	@ 0x38
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	50050000 	.word	0x50050000
 800bc00:	40023800 	.word	0x40023800
 800bc04:	40021000 	.word	0x40021000
 800bc08:	40020c00 	.word	0x40020c00
 800bc0c:	40021800 	.word	0x40021800
 800bc10:	40021c00 	.word	0x40021c00
 800bc14:	40020000 	.word	0x40020000

0800bc18 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800bc1c:	4b15      	ldr	r3, [pc, #84]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc1e:	4a16      	ldr	r2, [pc, #88]	@ (800bc78 <MX_DMA2D_Init+0x60>)
 800bc20:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800bc22:	4b14      	ldr	r3, [pc, #80]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800bc28:	4b12      	ldr	r3, [pc, #72]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800bc2e:	4b11      	ldr	r3, [pc, #68]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800bc34:	4b0f      	ldr	r3, [pc, #60]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800bc3a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800bc40:	4b0c      	ldr	r3, [pc, #48]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800bc46:	4b0b      	ldr	r3, [pc, #44]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800bc4c:	4809      	ldr	r0, [pc, #36]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc4e:	f7f5 f8f1 	bl	8000e34 <HAL_DMA2D_Init>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d001      	beq.n	800bc5c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800bc58:	f7ff fdf8 	bl	800b84c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800bc5c:	2101      	movs	r1, #1
 800bc5e:	4805      	ldr	r0, [pc, #20]	@ (800bc74 <MX_DMA2D_Init+0x5c>)
 800bc60:	f7f5 fa42 	bl	80010e8 <HAL_DMA2D_ConfigLayer>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800bc6a:	f7ff fdef 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800bc6e:	bf00      	nop
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200006fc 	.word	0x200006fc
 800bc78:	4002b000 	.word	0x4002b000

0800bc7c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a0d      	ldr	r2, [pc, #52]	@ (800bcc0 <HAL_DMA2D_MspInit+0x44>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d113      	bne.n	800bcb6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800bc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc4 <HAL_DMA2D_MspInit+0x48>)
 800bc90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc92:	4a0c      	ldr	r2, [pc, #48]	@ (800bcc4 <HAL_DMA2D_MspInit+0x48>)
 800bc94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bc98:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bcc4 <HAL_DMA2D_MspInit+0x48>)
 800bc9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800bca6:	2200      	movs	r2, #0
 800bca8:	2105      	movs	r1, #5
 800bcaa:	205a      	movs	r0, #90	@ 0x5a
 800bcac:	f7f4 fe92 	bl	80009d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800bcb0:	205a      	movs	r0, #90	@ 0x5a
 800bcb2:	f7f4 feab 	bl	8000a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	4002b000 	.word	0x4002b000
 800bcc4:	40023800 	.word	0x40023800

0800bcc8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800bccc:	4b1f      	ldr	r3, [pc, #124]	@ (800bd4c <MX_ETH_Init+0x84>)
 800bcce:	4a20      	ldr	r2, [pc, #128]	@ (800bd50 <MX_ETH_Init+0x88>)
 800bcd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800bcd2:	4b20      	ldr	r3, [pc, #128]	@ (800bd54 <MX_ETH_Init+0x8c>)
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800bcd8:	4b1e      	ldr	r3, [pc, #120]	@ (800bd54 <MX_ETH_Init+0x8c>)
 800bcda:	2280      	movs	r2, #128	@ 0x80
 800bcdc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800bcde:	4b1d      	ldr	r3, [pc, #116]	@ (800bd54 <MX_ETH_Init+0x8c>)
 800bce0:	22e1      	movs	r2, #225	@ 0xe1
 800bce2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800bce4:	4b1b      	ldr	r3, [pc, #108]	@ (800bd54 <MX_ETH_Init+0x8c>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800bcea:	4b1a      	ldr	r3, [pc, #104]	@ (800bd54 <MX_ETH_Init+0x8c>)
 800bcec:	2200      	movs	r2, #0
 800bcee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800bcf0:	4b18      	ldr	r3, [pc, #96]	@ (800bd54 <MX_ETH_Init+0x8c>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800bcf6:	4b15      	ldr	r3, [pc, #84]	@ (800bd4c <MX_ETH_Init+0x84>)
 800bcf8:	4a16      	ldr	r2, [pc, #88]	@ (800bd54 <MX_ETH_Init+0x8c>)
 800bcfa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bcfc:	4b13      	ldr	r3, [pc, #76]	@ (800bd4c <MX_ETH_Init+0x84>)
 800bcfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bd02:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bd04:	4b11      	ldr	r3, [pc, #68]	@ (800bd4c <MX_ETH_Init+0x84>)
 800bd06:	4a14      	ldr	r2, [pc, #80]	@ (800bd58 <MX_ETH_Init+0x90>)
 800bd08:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bd0a:	4b10      	ldr	r3, [pc, #64]	@ (800bd4c <MX_ETH_Init+0x84>)
 800bd0c:	4a13      	ldr	r2, [pc, #76]	@ (800bd5c <MX_ETH_Init+0x94>)
 800bd0e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800bd10:	4b0e      	ldr	r3, [pc, #56]	@ (800bd4c <MX_ETH_Init+0x84>)
 800bd12:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800bd16:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800bd18:	480c      	ldr	r0, [pc, #48]	@ (800bd4c <MX_ETH_Init+0x84>)
 800bd1a:	f7f5 fa77 	bl	800120c <HAL_ETH_Init>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800bd24:	f7ff fd92 	bl	800b84c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bd28:	2238      	movs	r2, #56	@ 0x38
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	480c      	ldr	r0, [pc, #48]	@ (800bd60 <MX_ETH_Init+0x98>)
 800bd2e:	f007 fd99 	bl	8013864 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bd32:	4b0b      	ldr	r3, [pc, #44]	@ (800bd60 <MX_ETH_Init+0x98>)
 800bd34:	2221      	movs	r2, #33	@ 0x21
 800bd36:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bd38:	4b09      	ldr	r3, [pc, #36]	@ (800bd60 <MX_ETH_Init+0x98>)
 800bd3a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bd3e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bd40:	4b07      	ldr	r3, [pc, #28]	@ (800bd60 <MX_ETH_Init+0x98>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800bd46:	bf00      	nop
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000774 	.word	0x20000774
 800bd50:	40028000 	.word	0x40028000
 800bd54:	20000824 	.word	0x20000824
 800bd58:	20000124 	.word	0x20000124
 800bd5c:	20000084 	.word	0x20000084
 800bd60:	2000073c 	.word	0x2000073c

0800bd64 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08e      	sub	sp, #56	@ 0x38
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	609a      	str	r2, [r3, #8]
 800bd78:	60da      	str	r2, [r3, #12]
 800bd7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a3f      	ldr	r2, [pc, #252]	@ (800be80 <HAL_ETH_MspInit+0x11c>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d178      	bne.n	800be78 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800bd86:	4b3f      	ldr	r3, [pc, #252]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd8a:	4a3e      	ldr	r2, [pc, #248]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bd8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bd90:	6313      	str	r3, [r2, #48]	@ 0x30
 800bd92:	4b3c      	ldr	r3, [pc, #240]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bd94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd9a:	623b      	str	r3, [r7, #32]
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	4b39      	ldr	r3, [pc, #228]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bda0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bda2:	4a38      	ldr	r2, [pc, #224]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bda4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bda8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdaa:	4b36      	ldr	r3, [pc, #216]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bdb2:	61fb      	str	r3, [r7, #28]
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	4b33      	ldr	r3, [pc, #204]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdba:	4a32      	ldr	r2, [pc, #200]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bdc0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdc2:	4b30      	ldr	r3, [pc, #192]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bdca:	61bb      	str	r3, [r7, #24]
 800bdcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bdce:	4b2d      	ldr	r3, [pc, #180]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdd2:	4a2c      	ldr	r2, [pc, #176]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdd8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdda:	4b2a      	ldr	r3, [pc, #168]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bde6:	4b27      	ldr	r3, [pc, #156]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bde8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdea:	4a26      	ldr	r2, [pc, #152]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdec:	f043 0304 	orr.w	r3, r3, #4
 800bdf0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdf2:	4b24      	ldr	r3, [pc, #144]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdf6:	f003 0304 	and.w	r3, r3, #4
 800bdfa:	613b      	str	r3, [r7, #16]
 800bdfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdfe:	4b21      	ldr	r3, [pc, #132]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800be00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be02:	4a20      	ldr	r2, [pc, #128]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800be04:	f043 0301 	orr.w	r3, r3, #1
 800be08:	6313      	str	r3, [r2, #48]	@ 0x30
 800be0a:	4b1e      	ldr	r3, [pc, #120]	@ (800be84 <HAL_ETH_MspInit+0x120>)
 800be0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be0e:	f003 0301 	and.w	r3, r3, #1
 800be12:	60fb      	str	r3, [r7, #12]
 800be14:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800be16:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 800be1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be1c:	2302      	movs	r3, #2
 800be1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be20:	2300      	movs	r3, #0
 800be22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be24:	2303      	movs	r3, #3
 800be26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be28:	230b      	movs	r3, #11
 800be2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800be2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be30:	4619      	mov	r1, r3
 800be32:	4815      	ldr	r0, [pc, #84]	@ (800be88 <HAL_ETH_MspInit+0x124>)
 800be34:	f7f5 fd38 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800be38:	2332      	movs	r3, #50	@ 0x32
 800be3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be3c:	2302      	movs	r3, #2
 800be3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be40:	2300      	movs	r3, #0
 800be42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be44:	2303      	movs	r3, #3
 800be46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be48:	230b      	movs	r3, #11
 800be4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800be4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be50:	4619      	mov	r1, r3
 800be52:	480e      	ldr	r0, [pc, #56]	@ (800be8c <HAL_ETH_MspInit+0x128>)
 800be54:	f7f5 fd28 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800be58:	2386      	movs	r3, #134	@ 0x86
 800be5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be5c:	2302      	movs	r3, #2
 800be5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be60:	2300      	movs	r3, #0
 800be62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be64:	2303      	movs	r3, #3
 800be66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800be68:	230b      	movs	r3, #11
 800be6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be70:	4619      	mov	r1, r3
 800be72:	4807      	ldr	r0, [pc, #28]	@ (800be90 <HAL_ETH_MspInit+0x12c>)
 800be74:	f7f5 fd18 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800be78:	bf00      	nop
 800be7a:	3738      	adds	r7, #56	@ 0x38
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	40028000 	.word	0x40028000
 800be84:	40023800 	.word	0x40023800
 800be88:	40021800 	.word	0x40021800
 800be8c:	40020800 	.word	0x40020800
 800be90:	40020000 	.word	0x40020000

0800be94 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800be9a:	1d3b      	adds	r3, r7, #4
 800be9c:	2200      	movs	r2, #0
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	605a      	str	r2, [r3, #4]
 800bea2:	609a      	str	r2, [r3, #8]
 800bea4:	60da      	str	r2, [r3, #12]
 800bea6:	611a      	str	r2, [r3, #16]
 800bea8:	615a      	str	r2, [r3, #20]
 800beaa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800beac:	4b1f      	ldr	r3, [pc, #124]	@ (800bf2c <MX_FMC_Init+0x98>)
 800beae:	4a20      	ldr	r2, [pc, #128]	@ (800bf30 <MX_FMC_Init+0x9c>)
 800beb0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800beb2:	4b1e      	ldr	r3, [pc, #120]	@ (800bf2c <MX_FMC_Init+0x98>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800beb8:	4b1c      	ldr	r3, [pc, #112]	@ (800bf2c <MX_FMC_Init+0x98>)
 800beba:	2200      	movs	r2, #0
 800bebc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800bebe:	4b1b      	ldr	r3, [pc, #108]	@ (800bf2c <MX_FMC_Init+0x98>)
 800bec0:	2204      	movs	r2, #4
 800bec2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800bec4:	4b19      	ldr	r3, [pc, #100]	@ (800bf2c <MX_FMC_Init+0x98>)
 800bec6:	2210      	movs	r2, #16
 800bec8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800beca:	4b18      	ldr	r3, [pc, #96]	@ (800bf2c <MX_FMC_Init+0x98>)
 800becc:	2240      	movs	r2, #64	@ 0x40
 800bece:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800bed0:	4b16      	ldr	r3, [pc, #88]	@ (800bf2c <MX_FMC_Init+0x98>)
 800bed2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800bed6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800bed8:	4b14      	ldr	r3, [pc, #80]	@ (800bf2c <MX_FMC_Init+0x98>)
 800beda:	2200      	movs	r2, #0
 800bedc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800bede:	4b13      	ldr	r3, [pc, #76]	@ (800bf2c <MX_FMC_Init+0x98>)
 800bee0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bee4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800bee6:	4b11      	ldr	r3, [pc, #68]	@ (800bf2c <MX_FMC_Init+0x98>)
 800bee8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800beec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800beee:	4b0f      	ldr	r3, [pc, #60]	@ (800bf2c <MX_FMC_Init+0x98>)
 800bef0:	2200      	movs	r2, #0
 800bef2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800bef4:	2302      	movs	r3, #2
 800bef6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800bef8:	2307      	movs	r3, #7
 800befa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800befc:	2304      	movs	r3, #4
 800befe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800bf00:	2307      	movs	r3, #7
 800bf02:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800bf04:	2303      	movs	r3, #3
 800bf06:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800bf08:	2302      	movs	r3, #2
 800bf0a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800bf0c:	2302      	movs	r3, #2
 800bf0e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800bf10:	1d3b      	adds	r3, r7, #4
 800bf12:	4619      	mov	r1, r3
 800bf14:	4805      	ldr	r0, [pc, #20]	@ (800bf2c <MX_FMC_Init+0x98>)
 800bf16:	f7fb fcc8 	bl	80078aa <HAL_SDRAM_Init>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800bf20:	f7ff fc94 	bl	800b84c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800bf24:	bf00      	nop
 800bf26:	3720      	adds	r7, #32
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	2000082c 	.word	0x2000082c
 800bf30:	a0000140 	.word	0xa0000140

0800bf34 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf3a:	1d3b      	adds	r3, r7, #4
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]
 800bf40:	605a      	str	r2, [r3, #4]
 800bf42:	609a      	str	r2, [r3, #8]
 800bf44:	60da      	str	r2, [r3, #12]
 800bf46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800bf48:	4b3a      	ldr	r3, [pc, #232]	@ (800c034 <HAL_FMC_MspInit+0x100>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d16d      	bne.n	800c02c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800bf50:	4b38      	ldr	r3, [pc, #224]	@ (800c034 <HAL_FMC_MspInit+0x100>)
 800bf52:	2201      	movs	r2, #1
 800bf54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800bf56:	4b38      	ldr	r3, [pc, #224]	@ (800c038 <HAL_FMC_MspInit+0x104>)
 800bf58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5a:	4a37      	ldr	r2, [pc, #220]	@ (800c038 <HAL_FMC_MspInit+0x104>)
 800bf5c:	f043 0301 	orr.w	r3, r3, #1
 800bf60:	6393      	str	r3, [r2, #56]	@ 0x38
 800bf62:	4b35      	ldr	r3, [pc, #212]	@ (800c038 <HAL_FMC_MspInit+0x104>)
 800bf64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800bf6e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800bf72:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf74:	2302      	movs	r3, #2
 800bf76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bf80:	230c      	movs	r3, #12
 800bf82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf84:	1d3b      	adds	r3, r7, #4
 800bf86:	4619      	mov	r1, r3
 800bf88:	482c      	ldr	r0, [pc, #176]	@ (800c03c <HAL_FMC_MspInit+0x108>)
 800bf8a:	f7f5 fc8d 	bl	80018a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800bf8e:	f248 1333 	movw	r3, #33075	@ 0x8133
 800bf92:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf94:	2302      	movs	r3, #2
 800bf96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfa0:	230c      	movs	r3, #12
 800bfa2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bfa4:	1d3b      	adds	r3, r7, #4
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	4825      	ldr	r0, [pc, #148]	@ (800c040 <HAL_FMC_MspInit+0x10c>)
 800bfaa:	f7f5 fc7d 	bl	80018a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800bfae:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800bfb2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfc0:	230c      	movs	r3, #12
 800bfc2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bfc4:	1d3b      	adds	r3, r7, #4
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	481e      	ldr	r0, [pc, #120]	@ (800c044 <HAL_FMC_MspInit+0x110>)
 800bfca:	f7f5 fc6d 	bl	80018a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800bfce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800bfd2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bfe0:	230c      	movs	r3, #12
 800bfe2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800bfe4:	1d3b      	adds	r3, r7, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4817      	ldr	r0, [pc, #92]	@ (800c048 <HAL_FMC_MspInit+0x114>)
 800bfea:	f7f5 fc5d 	bl	80018a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800bfee:	2328      	movs	r3, #40	@ 0x28
 800bff0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bff2:	2302      	movs	r3, #2
 800bff4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bffa:	2303      	movs	r3, #3
 800bffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800bffe:	230c      	movs	r3, #12
 800c000:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c002:	1d3b      	adds	r3, r7, #4
 800c004:	4619      	mov	r1, r3
 800c006:	4811      	ldr	r0, [pc, #68]	@ (800c04c <HAL_FMC_MspInit+0x118>)
 800c008:	f7f5 fc4e 	bl	80018a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800c00c:	2308      	movs	r3, #8
 800c00e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c010:	2302      	movs	r3, #2
 800c012:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c014:	2300      	movs	r3, #0
 800c016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c018:	2303      	movs	r3, #3
 800c01a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c01c:	230c      	movs	r3, #12
 800c01e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800c020:	1d3b      	adds	r3, r7, #4
 800c022:	4619      	mov	r1, r3
 800c024:	480a      	ldr	r0, [pc, #40]	@ (800c050 <HAL_FMC_MspInit+0x11c>)
 800c026:	f7f5 fc3f 	bl	80018a8 <HAL_GPIO_Init>
 800c02a:	e000      	b.n	800c02e <HAL_FMC_MspInit+0xfa>
    return;
 800c02c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20000860 	.word	0x20000860
 800c038:	40023800 	.word	0x40023800
 800c03c:	40021000 	.word	0x40021000
 800c040:	40021800 	.word	0x40021800
 800c044:	40020c00 	.word	0x40020c00
 800c048:	40021400 	.word	0x40021400
 800c04c:	40021c00 	.word	0x40021c00
 800c050:	40020800 	.word	0x40020800

0800c054 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800c05c:	f7ff ff6a 	bl	800bf34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b090      	sub	sp, #64	@ 0x40
 800c06c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c06e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	605a      	str	r2, [r3, #4]
 800c078:	609a      	str	r2, [r3, #8]
 800c07a:	60da      	str	r2, [r3, #12]
 800c07c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c07e:	4bb0      	ldr	r3, [pc, #704]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c082:	4aaf      	ldr	r2, [pc, #700]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c084:	f043 0310 	orr.w	r3, r3, #16
 800c088:	6313      	str	r3, [r2, #48]	@ 0x30
 800c08a:	4bad      	ldr	r3, [pc, #692]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c08e:	f003 0310 	and.w	r3, r3, #16
 800c092:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c096:	4baa      	ldr	r3, [pc, #680]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09a:	4aa9      	ldr	r2, [pc, #676]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0a2:	4ba7      	ldr	r3, [pc, #668]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c0ae:	4ba4      	ldr	r3, [pc, #656]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0b2:	4aa3      	ldr	r2, [pc, #652]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0b4:	f043 0302 	orr.w	r3, r3, #2
 800c0b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0ba:	4ba1      	ldr	r3, [pc, #644]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0be:	f003 0302 	and.w	r3, r3, #2
 800c0c2:	623b      	str	r3, [r7, #32]
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c0c6:	4b9e      	ldr	r3, [pc, #632]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ca:	4a9d      	ldr	r2, [pc, #628]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0cc:	f043 0308 	orr.w	r3, r3, #8
 800c0d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0d2:	4b9b      	ldr	r3, [pc, #620]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d6:	f003 0308 	and.w	r3, r3, #8
 800c0da:	61fb      	str	r3, [r7, #28]
 800c0dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c0de:	4b98      	ldr	r3, [pc, #608]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0e2:	4a97      	ldr	r2, [pc, #604]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0e4:	f043 0304 	orr.w	r3, r3, #4
 800c0e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0ea:	4b95      	ldr	r3, [pc, #596]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ee:	f003 0304 	and.w	r3, r3, #4
 800c0f2:	61bb      	str	r3, [r7, #24]
 800c0f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0f6:	4b92      	ldr	r3, [pc, #584]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0fa:	4a91      	ldr	r2, [pc, #580]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c0fc:	f043 0301 	orr.w	r3, r3, #1
 800c100:	6313      	str	r3, [r2, #48]	@ 0x30
 800c102:	4b8f      	ldr	r3, [pc, #572]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	617b      	str	r3, [r7, #20]
 800c10c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c10e:	4b8c      	ldr	r3, [pc, #560]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c112:	4a8b      	ldr	r2, [pc, #556]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c118:	6313      	str	r3, [r2, #48]	@ 0x30
 800c11a:	4b89      	ldr	r3, [pc, #548]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c11c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c11e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c122:	613b      	str	r3, [r7, #16]
 800c124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c126:	4b86      	ldr	r3, [pc, #536]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c12a:	4a85      	ldr	r2, [pc, #532]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c12c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c130:	6313      	str	r3, [r2, #48]	@ 0x30
 800c132:	4b83      	ldr	r3, [pc, #524]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c13e:	4b80      	ldr	r3, [pc, #512]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c142:	4a7f      	ldr	r2, [pc, #508]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c148:	6313      	str	r3, [r2, #48]	@ 0x30
 800c14a:	4b7d      	ldr	r3, [pc, #500]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c14e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c152:	60bb      	str	r3, [r7, #8]
 800c154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c156:	4b7a      	ldr	r3, [pc, #488]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15a:	4a79      	ldr	r2, [pc, #484]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c15c:	f043 0320 	orr.w	r3, r3, #32
 800c160:	6313      	str	r3, [r2, #48]	@ 0x30
 800c162:	4b77      	ldr	r3, [pc, #476]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c166:	f003 0320 	and.w	r3, r3, #32
 800c16a:	607b      	str	r3, [r7, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c16e:	4b74      	ldr	r3, [pc, #464]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c172:	4a73      	ldr	r2, [pc, #460]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c178:	6313      	str	r3, [r2, #48]	@ 0x30
 800c17a:	4b71      	ldr	r3, [pc, #452]	@ (800c340 <MX_GPIO_Init+0x2d8>)
 800c17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800c186:	2201      	movs	r2, #1
 800c188:	2120      	movs	r1, #32
 800c18a:	486e      	ldr	r0, [pc, #440]	@ (800c344 <MX_GPIO_Init+0x2dc>)
 800c18c:	f7f5 fd50 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800c190:	2200      	movs	r2, #0
 800c192:	210c      	movs	r1, #12
 800c194:	486c      	ldr	r0, [pc, #432]	@ (800c348 <MX_GPIO_Init+0x2e0>)
 800c196:	f7f5 fd4b 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800c19a:	2201      	movs	r2, #1
 800c19c:	2108      	movs	r1, #8
 800c19e:	486b      	ldr	r0, [pc, #428]	@ (800c34c <MX_GPIO_Init+0x2e4>)
 800c1a0:	f7f5 fd46 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800c1aa:	4867      	ldr	r0, [pc, #412]	@ (800c348 <MX_GPIO_Init+0x2e0>)
 800c1ac:	f7f5 fd40 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c1b6:	4866      	ldr	r0, [pc, #408]	@ (800c350 <MX_GPIO_Init+0x2e8>)
 800c1b8:	f7f5 fd3a 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800c1bc:	2200      	movs	r2, #0
 800c1be:	21c8      	movs	r1, #200	@ 0xc8
 800c1c0:	4864      	ldr	r0, [pc, #400]	@ (800c354 <MX_GPIO_Init+0x2ec>)
 800c1c2:	f7f5 fd35 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800c1c6:	2308      	movs	r3, #8
 800c1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c1d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	485f      	ldr	r0, [pc, #380]	@ (800c358 <MX_GPIO_Init+0x2f0>)
 800c1da:	f7f5 fb65 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800c1de:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800c1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800c1f0:	230a      	movs	r3, #10
 800c1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	4858      	ldr	r0, [pc, #352]	@ (800c35c <MX_GPIO_Init+0x2f4>)
 800c1fc:	f7f5 fb54 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800c200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c206:	2300      	movs	r3, #0
 800c208:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c20e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c212:	4619      	mov	r1, r3
 800c214:	4852      	ldr	r0, [pc, #328]	@ (800c360 <MX_GPIO_Init+0x2f8>)
 800c216:	f7f5 fb47 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800c21a:	2340      	movs	r3, #64	@ 0x40
 800c21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c21e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800c222:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c224:	2300      	movs	r3, #0
 800c226:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800c228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c22c:	4619      	mov	r1, r3
 800c22e:	4845      	ldr	r0, [pc, #276]	@ (800c344 <MX_GPIO_Init+0x2dc>)
 800c230:	f7f5 fb3a 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800c234:	2320      	movs	r3, #32
 800c236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c238:	2301      	movs	r3, #1
 800c23a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c23c:	2300      	movs	r3, #0
 800c23e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c240:	2300      	movs	r3, #0
 800c242:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800c244:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c248:	4619      	mov	r1, r3
 800c24a:	483e      	ldr	r0, [pc, #248]	@ (800c344 <MX_GPIO_Init+0x2dc>)
 800c24c:	f7f5 fb2c 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800c250:	f241 030c 	movw	r3, #4108	@ 0x100c
 800c254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c256:	2301      	movs	r3, #1
 800c258:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c25a:	2300      	movs	r3, #0
 800c25c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c25e:	2300      	movs	r3, #0
 800c260:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c262:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c266:	4619      	mov	r1, r3
 800c268:	4837      	ldr	r0, [pc, #220]	@ (800c348 <MX_GPIO_Init+0x2e0>)
 800c26a:	f7f5 fb1d 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800c26e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c274:	2300      	movs	r3, #0
 800c276:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c278:	2300      	movs	r3, #0
 800c27a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800c27c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c280:	4619      	mov	r1, r3
 800c282:	4838      	ldr	r0, [pc, #224]	@ (800c364 <MX_GPIO_Init+0x2fc>)
 800c284:	f7f5 fb10 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800c288:	2308      	movs	r3, #8
 800c28a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c28c:	2301      	movs	r3, #1
 800c28e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c290:	2300      	movs	r3, #0
 800c292:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c294:	2300      	movs	r3, #0
 800c296:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800c298:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c29c:	4619      	mov	r1, r3
 800c29e:	482b      	ldr	r0, [pc, #172]	@ (800c34c <MX_GPIO_Init+0x2e4>)
 800c2a0:	f7f5 fb02 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800c2a4:	2310      	movs	r3, #16
 800c2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800c2b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	4823      	ldr	r0, [pc, #140]	@ (800c344 <MX_GPIO_Init+0x2dc>)
 800c2b8:	f7f5 faf6 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800c2bc:	f248 0304 	movw	r3, #32772	@ 0x8004
 800c2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c2ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	481f      	ldr	r0, [pc, #124]	@ (800c350 <MX_GPIO_Init+0x2e8>)
 800c2d2:	f7f5 fae9 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800c2d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c2da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800c2e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	4818      	ldr	r0, [pc, #96]	@ (800c350 <MX_GPIO_Init+0x2e8>)
 800c2f0:	f7f5 fada 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800c2f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800c2fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800c2fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c300:	2300      	movs	r3, #0
 800c302:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800c304:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c308:	4619      	mov	r1, r3
 800c30a:	480f      	ldr	r0, [pc, #60]	@ (800c348 <MX_GPIO_Init+0x2e0>)
 800c30c:	f7f5 facc 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800c310:	2310      	movs	r3, #16
 800c312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c314:	2302      	movs	r3, #2
 800c316:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c31c:	2303      	movs	r3, #3
 800c31e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800c320:	230a      	movs	r3, #10
 800c322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800c324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c328:	4619      	mov	r1, r3
 800c32a:	4809      	ldr	r0, [pc, #36]	@ (800c350 <MX_GPIO_Init+0x2e8>)
 800c32c:	f7f5 fabc 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800c330:	23c8      	movs	r3, #200	@ 0xc8
 800c332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c334:	2301      	movs	r3, #1
 800c336:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c33c:	e014      	b.n	800c368 <MX_GPIO_Init+0x300>
 800c33e:	bf00      	nop
 800c340:	40023800 	.word	0x40023800
 800c344:	40020c00 	.word	0x40020c00
 800c348:	40022000 	.word	0x40022000
 800c34c:	40022800 	.word	0x40022800
 800c350:	40021c00 	.word	0x40021c00
 800c354:	40021800 	.word	0x40021800
 800c358:	40021000 	.word	0x40021000
 800c35c:	40020400 	.word	0x40020400
 800c360:	40022400 	.word	0x40022400
 800c364:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c368:	2300      	movs	r3, #0
 800c36a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c36c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c370:	4619      	mov	r1, r3
 800c372:	4819      	ldr	r0, [pc, #100]	@ (800c3d8 <MX_GPIO_Init+0x370>)
 800c374:	f7f5 fa98 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800c378:	2305      	movs	r3, #5
 800c37a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c37c:	2302      	movs	r3, #2
 800c37e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c380:	2300      	movs	r3, #0
 800c382:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c384:	2303      	movs	r3, #3
 800c386:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800c388:	230a      	movs	r3, #10
 800c38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c38c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c390:	4619      	mov	r1, r3
 800c392:	4812      	ldr	r0, [pc, #72]	@ (800c3dc <MX_GPIO_Init+0x374>)
 800c394:	f7f5 fa88 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800c398:	2304      	movs	r3, #4
 800c39a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c39c:	2300      	movs	r3, #0
 800c39e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800c3a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	480b      	ldr	r0, [pc, #44]	@ (800c3d8 <MX_GPIO_Init+0x370>)
 800c3ac:	f7f5 fa7c 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800c3b0:	2328      	movs	r3, #40	@ 0x28
 800c3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3b4:	2302      	movs	r3, #2
 800c3b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3bc:	2303      	movs	r3, #3
 800c3be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800c3c0:	230a      	movs	r3, #10
 800c3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c3c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	4805      	ldr	r0, [pc, #20]	@ (800c3e0 <MX_GPIO_Init+0x378>)
 800c3cc:	f7f5 fa6c 	bl	80018a8 <HAL_GPIO_Init>

}
 800c3d0:	bf00      	nop
 800c3d2:	3740      	adds	r7, #64	@ 0x40
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	40021800 	.word	0x40021800
 800c3dc:	40020800 	.word	0x40020800
 800c3e0:	40020000 	.word	0x40020000

0800c3e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c3e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c3ea:	4a1c      	ldr	r2, [pc, #112]	@ (800c45c <MX_I2C1_Init+0x78>)
 800c3ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007074AF;
 800c3ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c3f0:	4a1b      	ldr	r2, [pc, #108]	@ (800c460 <MX_I2C1_Init+0x7c>)
 800c3f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c3f4:	4b18      	ldr	r3, [pc, #96]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c3fa:	4b17      	ldr	r3, [pc, #92]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c400:	4b15      	ldr	r3, [pc, #84]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c402:	2200      	movs	r2, #0
 800c404:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c406:	4b14      	ldr	r3, [pc, #80]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c408:	2200      	movs	r2, #0
 800c40a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c40c:	4b12      	ldr	r3, [pc, #72]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c40e:	2200      	movs	r2, #0
 800c410:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c412:	4b11      	ldr	r3, [pc, #68]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c414:	2200      	movs	r2, #0
 800c416:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c418:	4b0f      	ldr	r3, [pc, #60]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c41e:	480e      	ldr	r0, [pc, #56]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c420:	f7f7 fd30 	bl	8003e84 <HAL_I2C_Init>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c42a:	f7ff fa0f 	bl	800b84c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c42e:	2100      	movs	r1, #0
 800c430:	4809      	ldr	r0, [pc, #36]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c432:	f7f7 fdc3 	bl	8003fbc <HAL_I2CEx_ConfigAnalogFilter>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c43c:	f7ff fa06 	bl	800b84c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c440:	2100      	movs	r1, #0
 800c442:	4805      	ldr	r0, [pc, #20]	@ (800c458 <MX_I2C1_Init+0x74>)
 800c444:	f7f7 fe05 	bl	8004052 <HAL_I2CEx_ConfigDigitalFilter>
 800c448:	4603      	mov	r3, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c44e:	f7ff f9fd 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c452:	bf00      	nop
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20000864 	.word	0x20000864
 800c45c:	40005400 	.word	0x40005400
 800c460:	007074af 	.word	0x007074af

0800c464 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800c468:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c46a:	4a1c      	ldr	r2, [pc, #112]	@ (800c4dc <MX_I2C3_Init+0x78>)
 800c46c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x007074AF;
 800c46e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c470:	4a1b      	ldr	r2, [pc, #108]	@ (800c4e0 <MX_I2C3_Init+0x7c>)
 800c472:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800c474:	4b18      	ldr	r3, [pc, #96]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c476:	2200      	movs	r2, #0
 800c478:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c47a:	4b17      	ldr	r3, [pc, #92]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c47c:	2201      	movs	r2, #1
 800c47e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c480:	4b15      	ldr	r3, [pc, #84]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c482:	2200      	movs	r2, #0
 800c484:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800c486:	4b14      	ldr	r3, [pc, #80]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c488:	2200      	movs	r2, #0
 800c48a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c48c:	4b12      	ldr	r3, [pc, #72]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c48e:	2200      	movs	r2, #0
 800c490:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c492:	4b11      	ldr	r3, [pc, #68]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c494:	2200      	movs	r2, #0
 800c496:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c498:	4b0f      	ldr	r3, [pc, #60]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c49a:	2200      	movs	r2, #0
 800c49c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800c49e:	480e      	ldr	r0, [pc, #56]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c4a0:	f7f7 fcf0 	bl	8003e84 <HAL_I2C_Init>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d001      	beq.n	800c4ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800c4aa:	f7ff f9cf 	bl	800b84c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	4809      	ldr	r0, [pc, #36]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c4b2:	f7f7 fd83 	bl	8003fbc <HAL_I2CEx_ConfigAnalogFilter>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d001      	beq.n	800c4c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800c4bc:	f7ff f9c6 	bl	800b84c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	4805      	ldr	r0, [pc, #20]	@ (800c4d8 <MX_I2C3_Init+0x74>)
 800c4c4:	f7f7 fdc5 	bl	8004052 <HAL_I2CEx_ConfigDigitalFilter>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800c4ce:	f7ff f9bd 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800c4d2:	bf00      	nop
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	200008b8 	.word	0x200008b8
 800c4dc:	40005c00 	.word	0x40005c00
 800c4e0:	007074af 	.word	0x007074af

0800c4e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b0ac      	sub	sp, #176	@ 0xb0
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	605a      	str	r2, [r3, #4]
 800c4f6:	609a      	str	r2, [r3, #8]
 800c4f8:	60da      	str	r2, [r3, #12]
 800c4fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c4fc:	f107 0318 	add.w	r3, r7, #24
 800c500:	2284      	movs	r2, #132	@ 0x84
 800c502:	2100      	movs	r1, #0
 800c504:	4618      	mov	r0, r3
 800c506:	f007 f9ad 	bl	8013864 <memset>
  if(i2cHandle->Instance==I2C1)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a44      	ldr	r2, [pc, #272]	@ (800c620 <HAL_I2C_MspInit+0x13c>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d13d      	bne.n	800c590 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800c514:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c518:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c51a:	2300      	movs	r3, #0
 800c51c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c51e:	f107 0318 	add.w	r3, r7, #24
 800c522:	4618      	mov	r0, r3
 800c524:	f7f8 fe70 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800c52e:	f7ff f98d 	bl	800b84c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c532:	4b3c      	ldr	r3, [pc, #240]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c536:	4a3b      	ldr	r2, [pc, #236]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c538:	f043 0302 	orr.w	r3, r3, #2
 800c53c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c53e:	4b39      	ldr	r3, [pc, #228]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800c54a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800c54e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c552:	2312      	movs	r3, #18
 800c554:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c558:	2301      	movs	r3, #1
 800c55a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c55e:	2300      	movs	r3, #0
 800c560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c564:	2304      	movs	r3, #4
 800c566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c56a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800c56e:	4619      	mov	r1, r3
 800c570:	482d      	ldr	r0, [pc, #180]	@ (800c628 <HAL_I2C_MspInit+0x144>)
 800c572:	f7f5 f999 	bl	80018a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c576:	4b2b      	ldr	r3, [pc, #172]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c57a:	4a2a      	ldr	r2, [pc, #168]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c57c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c580:	6413      	str	r3, [r2, #64]	@ 0x40
 800c582:	4b28      	ldr	r3, [pc, #160]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800c58e:	e042      	b.n	800c616 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a25      	ldr	r2, [pc, #148]	@ (800c62c <HAL_I2C_MspInit+0x148>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d13d      	bne.n	800c616 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800c59a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c59e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c5a6:	f107 0318 	add.w	r3, r7, #24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7f8 fe2c 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800c5b6:	f7ff f949 	bl	800b84c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800c5ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c5bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5be:	4a19      	ldr	r2, [pc, #100]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c5c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c5c6:	4b17      	ldr	r3, [pc, #92]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800c5d2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800c5d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c5da:	2312      	movs	r3, #18
 800c5dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800c5ec:	2304      	movs	r3, #4
 800c5ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c5f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	480d      	ldr	r0, [pc, #52]	@ (800c630 <HAL_I2C_MspInit+0x14c>)
 800c5fa:	f7f5 f955 	bl	80018a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800c5fe:	4b09      	ldr	r3, [pc, #36]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c602:	4a08      	ldr	r2, [pc, #32]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c604:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c608:	6413      	str	r3, [r2, #64]	@ 0x40
 800c60a:	4b06      	ldr	r3, [pc, #24]	@ (800c624 <HAL_I2C_MspInit+0x140>)
 800c60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c60e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c612:	60bb      	str	r3, [r7, #8]
 800c614:	68bb      	ldr	r3, [r7, #8]
}
 800c616:	bf00      	nop
 800c618:	37b0      	adds	r7, #176	@ 0xb0
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	40005400 	.word	0x40005400
 800c624:	40023800 	.word	0x40023800
 800c628:	40020400 	.word	0x40020400
 800c62c:	40005c00 	.word	0x40005c00
 800c630:	40021c00 	.word	0x40021c00

0800c634 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b08e      	sub	sp, #56	@ 0x38
 800c638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800c63a:	1d3b      	adds	r3, r7, #4
 800c63c:	2234      	movs	r2, #52	@ 0x34
 800c63e:	2100      	movs	r1, #0
 800c640:	4618      	mov	r0, r3
 800c642:	f007 f90f 	bl	8013864 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800c646:	4b3a      	ldr	r3, [pc, #232]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c648:	4a3a      	ldr	r2, [pc, #232]	@ (800c734 <MX_LTDC_Init+0x100>)
 800c64a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800c64c:	4b38      	ldr	r3, [pc, #224]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c64e:	2200      	movs	r2, #0
 800c650:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800c652:	4b37      	ldr	r3, [pc, #220]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c654:	2200      	movs	r2, #0
 800c656:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800c658:	4b35      	ldr	r3, [pc, #212]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c65a:	2200      	movs	r2, #0
 800c65c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800c65e:	4b34      	ldr	r3, [pc, #208]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c660:	2200      	movs	r2, #0
 800c662:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800c664:	4b32      	ldr	r3, [pc, #200]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c666:	2228      	movs	r2, #40	@ 0x28
 800c668:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800c66a:	4b31      	ldr	r3, [pc, #196]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c66c:	2209      	movs	r2, #9
 800c66e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800c670:	4b2f      	ldr	r3, [pc, #188]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c672:	2235      	movs	r2, #53	@ 0x35
 800c674:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800c676:	4b2e      	ldr	r3, [pc, #184]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c678:	220b      	movs	r2, #11
 800c67a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800c67c:	4b2c      	ldr	r3, [pc, #176]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c67e:	f240 2215 	movw	r2, #533	@ 0x215
 800c682:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800c684:	4b2a      	ldr	r3, [pc, #168]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c686:	f240 121b 	movw	r2, #283	@ 0x11b
 800c68a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800c68c:	4b28      	ldr	r3, [pc, #160]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c68e:	f240 2235 	movw	r2, #565	@ 0x235
 800c692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 800c694:	4b26      	ldr	r3, [pc, #152]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c696:	f240 121d 	movw	r2, #285	@ 0x11d
 800c69a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800c69c:	4b24      	ldr	r3, [pc, #144]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800c6a4:	4b22      	ldr	r3, [pc, #136]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800c6ac:	4b20      	ldr	r3, [pc, #128]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800c6b4:	481e      	ldr	r0, [pc, #120]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c6b6:	f7f7 fd18 	bl	80040ea <HAL_LTDC_Init>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800c6c0:	f7ff f8c4 	bl	800b84c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800c6c8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800c6cc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800c6d2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c6d6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800c6d8:	2302      	movs	r3, #2
 800c6da:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800c6dc:	23ff      	movs	r3, #255	@ 0xff
 800c6de:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800c6e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800c6e8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800c6ea:	2307      	movs	r3, #7
 800c6ec:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800c6ee:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800c6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 800c6f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800c6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800c6fa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c6fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800c712:	1d3b      	adds	r3, r7, #4
 800c714:	2200      	movs	r2, #0
 800c716:	4619      	mov	r1, r3
 800c718:	4805      	ldr	r0, [pc, #20]	@ (800c730 <MX_LTDC_Init+0xfc>)
 800c71a:	f7f7 fe45 	bl	80043a8 <HAL_LTDC_ConfigLayer>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800c724:	f7ff f892 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800c728:	bf00      	nop
 800c72a:	3738      	adds	r7, #56	@ 0x38
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	2000090c 	.word	0x2000090c
 800c734:	40016800 	.word	0x40016800

0800c738 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b08e      	sub	sp, #56	@ 0x38
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]
 800c748:	605a      	str	r2, [r3, #4]
 800c74a:	609a      	str	r2, [r3, #8]
 800c74c:	60da      	str	r2, [r3, #12]
 800c74e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	4a55      	ldr	r2, [pc, #340]	@ (800c8ac <HAL_LTDC_MspInit+0x174>)
 800c756:	4293      	cmp	r3, r2
 800c758:	f040 80a3 	bne.w	800c8a2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800c75c:	4b54      	ldr	r3, [pc, #336]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c75e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c760:	4a53      	ldr	r2, [pc, #332]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c762:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c766:	6453      	str	r3, [r2, #68]	@ 0x44
 800c768:	4b51      	ldr	r3, [pc, #324]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c76a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c76c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c770:	623b      	str	r3, [r7, #32]
 800c772:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c774:	4b4e      	ldr	r3, [pc, #312]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c778:	4a4d      	ldr	r2, [pc, #308]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c77a:	f043 0310 	orr.w	r3, r3, #16
 800c77e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c780:	4b4b      	ldr	r3, [pc, #300]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c784:	f003 0310 	and.w	r3, r3, #16
 800c788:	61fb      	str	r3, [r7, #28]
 800c78a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c78c:	4b48      	ldr	r3, [pc, #288]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c78e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c790:	4a47      	ldr	r2, [pc, #284]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c796:	6313      	str	r3, [r2, #48]	@ 0x30
 800c798:	4b45      	ldr	r3, [pc, #276]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c79c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c7a0:	61bb      	str	r3, [r7, #24]
 800c7a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800c7a4:	4b42      	ldr	r3, [pc, #264]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7a8:	4a41      	ldr	r2, [pc, #260]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c7ae:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7b0:	4b3f      	ldr	r3, [pc, #252]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7b8:	617b      	str	r3, [r7, #20]
 800c7ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c7bc:	4b3c      	ldr	r3, [pc, #240]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c0:	4a3b      	ldr	r2, [pc, #236]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7c6:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7c8:	4b39      	ldr	r3, [pc, #228]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7d0:	613b      	str	r3, [r7, #16]
 800c7d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800c7d4:	4b36      	ldr	r3, [pc, #216]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7d8:	4a35      	ldr	r2, [pc, #212]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7de:	6313      	str	r3, [r2, #48]	@ 0x30
 800c7e0:	4b33      	ldr	r3, [pc, #204]	@ (800c8b0 <HAL_LTDC_MspInit+0x178>)
 800c7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800c7ec:	2310      	movs	r3, #16
 800c7ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c7fc:	230e      	movs	r3, #14
 800c7fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800c800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c804:	4619      	mov	r1, r3
 800c806:	482b      	ldr	r0, [pc, #172]	@ (800c8b4 <HAL_LTDC_MspInit+0x17c>)
 800c808:	f7f5 f84e 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800c80c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800c810:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c812:	2302      	movs	r3, #2
 800c814:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c816:	2300      	movs	r3, #0
 800c818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c81a:	2300      	movs	r3, #0
 800c81c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c81e:	230e      	movs	r3, #14
 800c820:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c826:	4619      	mov	r1, r3
 800c828:	4823      	ldr	r0, [pc, #140]	@ (800c8b8 <HAL_LTDC_MspInit+0x180>)
 800c82a:	f7f5 f83d 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800c82e:	23f7      	movs	r3, #247	@ 0xf7
 800c830:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c832:	2302      	movs	r3, #2
 800c834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c836:	2300      	movs	r3, #0
 800c838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c83a:	2300      	movs	r3, #0
 800c83c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c83e:	230e      	movs	r3, #14
 800c840:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800c842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c846:	4619      	mov	r1, r3
 800c848:	481c      	ldr	r0, [pc, #112]	@ (800c8bc <HAL_LTDC_MspInit+0x184>)
 800c84a:	f7f5 f82d 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800c84e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c852:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c854:	2302      	movs	r3, #2
 800c856:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c858:	2300      	movs	r3, #0
 800c85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c85c:	2300      	movs	r3, #0
 800c85e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c860:	2309      	movs	r3, #9
 800c862:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800c864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c868:	4619      	mov	r1, r3
 800c86a:	4815      	ldr	r0, [pc, #84]	@ (800c8c0 <HAL_LTDC_MspInit+0x188>)
 800c86c:	f7f5 f81c 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800c870:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800c874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c876:	2302      	movs	r3, #2
 800c878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c87e:	2300      	movs	r3, #0
 800c880:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c882:	230e      	movs	r3, #14
 800c884:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800c886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c88a:	4619      	mov	r1, r3
 800c88c:	480d      	ldr	r0, [pc, #52]	@ (800c8c4 <HAL_LTDC_MspInit+0x18c>)
 800c88e:	f7f5 f80b 	bl	80018a8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800c892:	2200      	movs	r2, #0
 800c894:	2105      	movs	r1, #5
 800c896:	2058      	movs	r0, #88	@ 0x58
 800c898:	f7f4 f89c 	bl	80009d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c89c:	2058      	movs	r0, #88	@ 0x58
 800c89e:	f7f4 f8b5 	bl	8000a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800c8a2:	bf00      	nop
 800c8a4:	3738      	adds	r7, #56	@ 0x38
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	40016800 	.word	0x40016800
 800c8b0:	40023800 	.word	0x40023800
 800c8b4:	40021000 	.word	0x40021000
 800c8b8:	40022400 	.word	0x40022400
 800c8bc:	40022800 	.word	0x40022800
 800c8c0:	40021800 	.word	0x40021800
 800c8c4:	40022000 	.word	0x40022000

0800c8c8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800c8cc:	4b12      	ldr	r3, [pc, #72]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8ce:	4a13      	ldr	r2, [pc, #76]	@ (800c91c <MX_QUADSPI_Init+0x54>)
 800c8d0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800c8d2:	4b11      	ldr	r3, [pc, #68]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800c8d8:	4b0f      	ldr	r3, [pc, #60]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8da:	2204      	movs	r2, #4
 800c8dc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800c8de:	4b0e      	ldr	r3, [pc, #56]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8e0:	2210      	movs	r2, #16
 800c8e2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 800c8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8e6:	2218      	movs	r2, #24
 800c8e8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800c8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8ec:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800c8f0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800c8f2:	4b09      	ldr	r3, [pc, #36]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800c8f8:	4b07      	ldr	r3, [pc, #28]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800c8fe:	4b06      	ldr	r3, [pc, #24]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c900:	2200      	movs	r2, #0
 800c902:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800c904:	4804      	ldr	r0, [pc, #16]	@ (800c918 <MX_QUADSPI_Init+0x50>)
 800c906:	f7f7 ff03 	bl	8004710 <HAL_QSPI_Init>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800c910:	f7fe ff9c 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800c914:	bf00      	nop
 800c916:	bd80      	pop	{r7, pc}
 800c918:	200009b4 	.word	0x200009b4
 800c91c:	a0001000 	.word	0xa0001000

0800c920 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b08c      	sub	sp, #48	@ 0x30
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c928:	f107 031c 	add.w	r3, r7, #28
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
 800c930:	605a      	str	r2, [r3, #4]
 800c932:	609a      	str	r2, [r3, #8]
 800c934:	60da      	str	r2, [r3, #12]
 800c936:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a3b      	ldr	r2, [pc, #236]	@ (800ca2c <HAL_QSPI_MspInit+0x10c>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d170      	bne.n	800ca24 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800c942:	4b3b      	ldr	r3, [pc, #236]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c946:	4a3a      	ldr	r2, [pc, #232]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c948:	f043 0302 	orr.w	r3, r3, #2
 800c94c:	6393      	str	r3, [r2, #56]	@ 0x38
 800c94e:	4b38      	ldr	r3, [pc, #224]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c952:	f003 0302 	and.w	r3, r3, #2
 800c956:	61bb      	str	r3, [r7, #24]
 800c958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c95a:	4b35      	ldr	r3, [pc, #212]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c95e:	4a34      	ldr	r2, [pc, #208]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c960:	f043 0310 	orr.w	r3, r3, #16
 800c964:	6313      	str	r3, [r2, #48]	@ 0x30
 800c966:	4b32      	ldr	r3, [pc, #200]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c96a:	f003 0310 	and.w	r3, r3, #16
 800c96e:	617b      	str	r3, [r7, #20]
 800c970:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c972:	4b2f      	ldr	r3, [pc, #188]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c976:	4a2e      	ldr	r2, [pc, #184]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c978:	f043 0302 	orr.w	r3, r3, #2
 800c97c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c97e:	4b2c      	ldr	r3, [pc, #176]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c982:	f003 0302 	and.w	r3, r3, #2
 800c986:	613b      	str	r3, [r7, #16]
 800c988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c98a:	4b29      	ldr	r3, [pc, #164]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c98e:	4a28      	ldr	r2, [pc, #160]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c990:	f043 0308 	orr.w	r3, r3, #8
 800c994:	6313      	str	r3, [r2, #48]	@ 0x30
 800c996:	4b26      	ldr	r3, [pc, #152]	@ (800ca30 <HAL_QSPI_MspInit+0x110>)
 800c998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c99a:	f003 0308 	and.w	r3, r3, #8
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800c9a2:	2304      	movs	r3, #4
 800c9a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9a6:	2302      	movs	r3, #2
 800c9a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c9b2:	2309      	movs	r3, #9
 800c9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800c9b6:	f107 031c 	add.w	r3, r7, #28
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	481d      	ldr	r0, [pc, #116]	@ (800ca34 <HAL_QSPI_MspInit+0x114>)
 800c9be:	f7f4 ff73 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800c9c2:	2340      	movs	r3, #64	@ 0x40
 800c9c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800c9d2:	230a      	movs	r3, #10
 800c9d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800c9d6:	f107 031c 	add.w	r3, r7, #28
 800c9da:	4619      	mov	r1, r3
 800c9dc:	4816      	ldr	r0, [pc, #88]	@ (800ca38 <HAL_QSPI_MspInit+0x118>)
 800c9de:	f7f4 ff63 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800c9e2:	2304      	movs	r3, #4
 800c9e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800c9f2:	2309      	movs	r3, #9
 800c9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9f6:	f107 031c 	add.w	r3, r7, #28
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	480e      	ldr	r0, [pc, #56]	@ (800ca38 <HAL_QSPI_MspInit+0x118>)
 800c9fe:	f7f4 ff53 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800ca02:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800ca06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca08:	2302      	movs	r3, #2
 800ca0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca10:	2303      	movs	r3, #3
 800ca12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ca14:	2309      	movs	r3, #9
 800ca16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ca18:	f107 031c 	add.w	r3, r7, #28
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	4807      	ldr	r0, [pc, #28]	@ (800ca3c <HAL_QSPI_MspInit+0x11c>)
 800ca20:	f7f4 ff42 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800ca24:	bf00      	nop
 800ca26:	3730      	adds	r7, #48	@ 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	a0001000 	.word	0xa0001000
 800ca30:	40023800 	.word	0x40023800
 800ca34:	40021000 	.word	0x40021000
 800ca38:	40020400 	.word	0x40020400
 800ca3c:	40020c00 	.word	0x40020c00

0800ca40 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b090      	sub	sp, #64	@ 0x40
 800ca44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800ca46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	605a      	str	r2, [r3, #4]
 800ca50:	609a      	str	r2, [r3, #8]
 800ca52:	60da      	str	r2, [r3, #12]
 800ca54:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800ca56:	2300      	movs	r3, #0
 800ca58:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800ca5a:	463b      	mov	r3, r7
 800ca5c:	2228      	movs	r2, #40	@ 0x28
 800ca5e:	2100      	movs	r1, #0
 800ca60:	4618      	mov	r0, r3
 800ca62:	f006 feff 	bl	8013864 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800ca66:	4b46      	ldr	r3, [pc, #280]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca68:	4a46      	ldr	r2, [pc, #280]	@ (800cb84 <MX_RTC_Init+0x144>)
 800ca6a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ca6c:	4b44      	ldr	r3, [pc, #272]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ca72:	4b43      	ldr	r3, [pc, #268]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca74:	227f      	movs	r2, #127	@ 0x7f
 800ca76:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ca78:	4b41      	ldr	r3, [pc, #260]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca7a:	22ff      	movs	r2, #255	@ 0xff
 800ca7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ca7e:	4b40      	ldr	r3, [pc, #256]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ca84:	4b3e      	ldr	r3, [pc, #248]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca86:	2200      	movs	r2, #0
 800ca88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ca8a:	4b3d      	ldr	r3, [pc, #244]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ca90:	483b      	ldr	r0, [pc, #236]	@ (800cb80 <MX_RTC_Init+0x140>)
 800ca92:	f7f9 f8e9 	bl	8005c68 <HAL_RTC_Init>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800ca9c:	f7fe fed6 	bl	800b84c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 800caac:	2300      	movs	r3, #0
 800caae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cab2:	2300      	movs	r3, #0
 800cab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cab6:	2300      	movs	r3, #0
 800cab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800caba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cabe:	2201      	movs	r2, #1
 800cac0:	4619      	mov	r1, r3
 800cac2:	482f      	ldr	r0, [pc, #188]	@ (800cb80 <MX_RTC_Init+0x140>)
 800cac4:	f7f9 f952 	bl	8005d6c <HAL_RTC_SetTime>
 800cac8:	4603      	mov	r3, r0
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800cace:	f7fe febd 	bl	800b84c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800cad2:	2301      	movs	r3, #1
 800cad4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800cad8:	2301      	movs	r3, #1
 800cada:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800cade:	2301      	movs	r3, #1
 800cae0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800caea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800caee:	2201      	movs	r2, #1
 800caf0:	4619      	mov	r1, r3
 800caf2:	4823      	ldr	r0, [pc, #140]	@ (800cb80 <MX_RTC_Init+0x140>)
 800caf4:	f7f9 f9d4 	bl	8005ea0 <HAL_RTC_SetDate>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800cafe:	f7fe fea5 	bl	800b84c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800cb12:	2300      	movs	r3, #0
 800cb14:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800cb16:	2300      	movs	r3, #0
 800cb18:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800cb22:	2300      	movs	r3, #0
 800cb24:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800cb26:	2301      	movs	r3, #1
 800cb28:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800cb2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cb30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800cb32:	463b      	mov	r3, r7
 800cb34:	2201      	movs	r2, #1
 800cb36:	4619      	mov	r1, r3
 800cb38:	4811      	ldr	r0, [pc, #68]	@ (800cb80 <MX_RTC_Init+0x140>)
 800cb3a:	f7f9 fa35 	bl	8005fa8 <HAL_RTC_SetAlarm>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800cb44:	f7fe fe82 	bl	800b84c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800cb48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800cb4e:	463b      	mov	r3, r7
 800cb50:	2201      	movs	r2, #1
 800cb52:	4619      	mov	r1, r3
 800cb54:	480a      	ldr	r0, [pc, #40]	@ (800cb80 <MX_RTC_Init+0x140>)
 800cb56:	f7f9 fa27 	bl	8005fa8 <HAL_RTC_SetAlarm>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 800cb60:	f7fe fe74 	bl	800b84c <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800cb64:	2202      	movs	r2, #2
 800cb66:	2100      	movs	r1, #0
 800cb68:	4805      	ldr	r0, [pc, #20]	@ (800cb80 <MX_RTC_Init+0x140>)
 800cb6a:	f7f9 fbe7 	bl	800633c <HAL_RTCEx_SetTimeStamp>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d001      	beq.n	800cb78 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 800cb74:	f7fe fe6a 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800cb78:	bf00      	nop
 800cb7a:	3740      	adds	r7, #64	@ 0x40
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	20000a00 	.word	0x20000a00
 800cb84:	40002800 	.word	0x40002800

0800cb88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b0a4      	sub	sp, #144	@ 0x90
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb90:	f107 030c 	add.w	r3, r7, #12
 800cb94:	2284      	movs	r2, #132	@ 0x84
 800cb96:	2100      	movs	r1, #0
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f006 fe63 	bl	8013864 <memset>
  if(rtcHandle->Instance==RTC)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a0e      	ldr	r2, [pc, #56]	@ (800cbdc <HAL_RTC_MspInit+0x54>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d114      	bne.n	800cbd2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800cba8:	2320      	movs	r3, #32
 800cbaa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800cbac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cbb2:	f107 030c 	add.w	r3, r7, #12
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f8 fb26 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800cbc2:	f7fe fe43 	bl	800b84c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800cbc6:	4b06      	ldr	r3, [pc, #24]	@ (800cbe0 <HAL_RTC_MspInit+0x58>)
 800cbc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbca:	4a05      	ldr	r2, [pc, #20]	@ (800cbe0 <HAL_RTC_MspInit+0x58>)
 800cbcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbd0:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	3790      	adds	r7, #144	@ 0x90
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	40002800 	.word	0x40002800
 800cbe0:	40023800 	.word	0x40023800

0800cbe4 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA2;
SAI_HandleTypeDef hsai_BlockB2;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 800cbe8:	4b4d      	ldr	r3, [pc, #308]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cbea:	4a4e      	ldr	r2, [pc, #312]	@ (800cd24 <MX_SAI2_Init+0x140>)
 800cbec:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800cbee:	4b4c      	ldr	r3, [pc, #304]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800cbf4:	4b4a      	ldr	r3, [pc, #296]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800cbfa:	4b49      	ldr	r3, [pc, #292]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cbfc:	2240      	movs	r2, #64	@ 0x40
 800cbfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800cc00:	4b47      	ldr	r3, [pc, #284]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cc06:	4b46      	ldr	r3, [pc, #280]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800cc0c:	4b44      	ldr	r3, [pc, #272]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800cc12:	4b43      	ldr	r3, [pc, #268]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800cc18:	4b41      	ldr	r3, [pc, #260]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800cc1e:	4b40      	ldr	r3, [pc, #256]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800cc24:	4b3e      	ldr	r3, [pc, #248]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc26:	4a40      	ldr	r2, [pc, #256]	@ (800cd28 <MX_SAI2_Init+0x144>)
 800cc28:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800cc2a:	4b3d      	ldr	r3, [pc, #244]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800cc30:	4b3b      	ldr	r3, [pc, #236]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 800cc36:	4b3a      	ldr	r3, [pc, #232]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800cc3c:	4b38      	ldr	r3, [pc, #224]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800cc42:	4b37      	ldr	r3, [pc, #220]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc44:	2208      	movs	r2, #8
 800cc46:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800cc48:	4b35      	ldr	r3, [pc, #212]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800cc4e:	4b34      	ldr	r3, [pc, #208]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cc54:	4b32      	ldr	r3, [pc, #200]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800cc5a:	4b31      	ldr	r3, [pc, #196]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800cc60:	4b2f      	ldr	r3, [pc, #188]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc62:	2200      	movs	r2, #0
 800cc64:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800cc66:	4b2e      	ldr	r3, [pc, #184]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800cc6c:	4b2c      	ldr	r3, [pc, #176]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc6e:	2201      	movs	r2, #1
 800cc70:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800cc72:	4b2b      	ldr	r3, [pc, #172]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800cc78:	4829      	ldr	r0, [pc, #164]	@ (800cd20 <MX_SAI2_Init+0x13c>)
 800cc7a:	f7f9 fbc7 	bl	800640c <HAL_SAI_Init>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d001      	beq.n	800cc88 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 800cc84:	f7fe fde2 	bl	800b84c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 800cc88:	4b28      	ldr	r3, [pc, #160]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cc8a:	4a29      	ldr	r2, [pc, #164]	@ (800cd30 <MX_SAI2_Init+0x14c>)
 800cc8c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800cc8e:	4b27      	ldr	r3, [pc, #156]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800cc94:	4b25      	ldr	r3, [pc, #148]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cc96:	2203      	movs	r2, #3
 800cc98:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800cc9a:	4b24      	ldr	r3, [pc, #144]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cc9c:	2240      	movs	r2, #64	@ 0x40
 800cc9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800cca0:	4b22      	ldr	r3, [pc, #136]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800cca6:	4b21      	ldr	r3, [pc, #132]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800ccac:	4b1f      	ldr	r3, [pc, #124]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccae:	2201      	movs	r2, #1
 800ccb0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800ccb2:	4b1e      	ldr	r3, [pc, #120]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800ccb8:	4b1c      	ldr	r3, [pc, #112]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800ccbe:	4b1b      	ldr	r3, [pc, #108]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800ccc4:	4b19      	ldr	r3, [pc, #100]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800ccca:	4b18      	ldr	r3, [pc, #96]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cccc:	2200      	movs	r2, #0
 800ccce:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800ccd0:	4b16      	ldr	r3, [pc, #88]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800ccd6:	4b15      	ldr	r3, [pc, #84]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccd8:	2208      	movs	r2, #8
 800ccda:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800ccdc:	4b13      	ldr	r3, [pc, #76]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccde:	2201      	movs	r2, #1
 800cce0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800cce2:	4b12      	ldr	r3, [pc, #72]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800cce8:	4b10      	ldr	r3, [pc, #64]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800ccee:	4b0f      	ldr	r3, [pc, #60]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800ccf4:	4b0d      	ldr	r3, [pc, #52]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800cd00:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cd02:	2201      	movs	r2, #1
 800cd04:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800cd06:	4b09      	ldr	r3, [pc, #36]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800cd0c:	4807      	ldr	r0, [pc, #28]	@ (800cd2c <MX_SAI2_Init+0x148>)
 800cd0e:	f7f9 fb7d 	bl	800640c <HAL_SAI_Init>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 800cd18:	f7fe fd98 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800cd1c:	bf00      	nop
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	20000a20 	.word	0x20000a20
 800cd24:	40015c04 	.word	0x40015c04
 800cd28:	0002ee00 	.word	0x0002ee00
 800cd2c:	20000aa4 	.word	0x20000aa4
 800cd30:	40015c24 	.word	0x40015c24

0800cd34 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08a      	sub	sp, #40	@ 0x28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a2b      	ldr	r2, [pc, #172]	@ (800cdf0 <HAL_SAI_MspInit+0xbc>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d124      	bne.n	800cd90 <HAL_SAI_MspInit+0x5c>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 800cd46:	4b2b      	ldr	r3, [pc, #172]	@ (800cdf4 <HAL_SAI_MspInit+0xc0>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10b      	bne.n	800cd66 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800cd4e:	4b2a      	ldr	r3, [pc, #168]	@ (800cdf8 <HAL_SAI_MspInit+0xc4>)
 800cd50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd52:	4a29      	ldr	r2, [pc, #164]	@ (800cdf8 <HAL_SAI_MspInit+0xc4>)
 800cd54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cd58:	6453      	str	r3, [r2, #68]	@ 0x44
 800cd5a:	4b27      	ldr	r3, [pc, #156]	@ (800cdf8 <HAL_SAI_MspInit+0xc4>)
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cd62:	613b      	str	r3, [r7, #16]
 800cd64:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800cd66:	4b23      	ldr	r3, [pc, #140]	@ (800cdf4 <HAL_SAI_MspInit+0xc0>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	4a21      	ldr	r2, [pc, #132]	@ (800cdf4 <HAL_SAI_MspInit+0xc0>)
 800cd6e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800cd70:	23f0      	movs	r3, #240	@ 0xf0
 800cd72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd74:	2302      	movs	r3, #2
 800cd76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800cd80:	230a      	movs	r3, #10
 800cd82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800cd84:	f107 0314 	add.w	r3, r7, #20
 800cd88:	4619      	mov	r1, r3
 800cd8a:	481c      	ldr	r0, [pc, #112]	@ (800cdfc <HAL_SAI_MspInit+0xc8>)
 800cd8c:	f7f4 fd8c 	bl	80018a8 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a1a      	ldr	r2, [pc, #104]	@ (800ce00 <HAL_SAI_MspInit+0xcc>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d125      	bne.n	800cde6 <HAL_SAI_MspInit+0xb2>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800cd9a:	4b16      	ldr	r3, [pc, #88]	@ (800cdf4 <HAL_SAI_MspInit+0xc0>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10b      	bne.n	800cdba <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800cda2:	4b15      	ldr	r3, [pc, #84]	@ (800cdf8 <HAL_SAI_MspInit+0xc4>)
 800cda4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cda6:	4a14      	ldr	r2, [pc, #80]	@ (800cdf8 <HAL_SAI_MspInit+0xc4>)
 800cda8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cdac:	6453      	str	r3, [r2, #68]	@ 0x44
 800cdae:	4b12      	ldr	r3, [pc, #72]	@ (800cdf8 <HAL_SAI_MspInit+0xc4>)
 800cdb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800cdba:	4b0e      	ldr	r3, [pc, #56]	@ (800cdf4 <HAL_SAI_MspInit+0xc0>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	4a0c      	ldr	r2, [pc, #48]	@ (800cdf4 <HAL_SAI_MspInit+0xc0>)
 800cdc2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800cdc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800cdd6:	230a      	movs	r3, #10
 800cdd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800cdda:	f107 0314 	add.w	r3, r7, #20
 800cdde:	4619      	mov	r1, r3
 800cde0:	4808      	ldr	r0, [pc, #32]	@ (800ce04 <HAL_SAI_MspInit+0xd0>)
 800cde2:	f7f4 fd61 	bl	80018a8 <HAL_GPIO_Init>

    }
}
 800cde6:	bf00      	nop
 800cde8:	3728      	adds	r7, #40	@ 0x28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	40015c04 	.word	0x40015c04
 800cdf4:	20000b28 	.word	0x20000b28
 800cdf8:	40023800 	.word	0x40023800
 800cdfc:	40022000 	.word	0x40022000
 800ce00:	40015c24 	.word	0x40015c24
 800ce04:	40021800 	.word	0x40021800

0800ce08 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800ce0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ce40 <MX_SDMMC1_SD_Init+0x38>)
 800ce0e:	4a0d      	ldr	r2, [pc, #52]	@ (800ce44 <MX_SDMMC1_SD_Init+0x3c>)
 800ce10:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800ce12:	4b0b      	ldr	r3, [pc, #44]	@ (800ce40 <MX_SDMMC1_SD_Init+0x38>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800ce18:	4b09      	ldr	r3, [pc, #36]	@ (800ce40 <MX_SDMMC1_SD_Init+0x38>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ce1e:	4b08      	ldr	r3, [pc, #32]	@ (800ce40 <MX_SDMMC1_SD_Init+0x38>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800ce24:	4b06      	ldr	r3, [pc, #24]	@ (800ce40 <MX_SDMMC1_SD_Init+0x38>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ce2a:	4b05      	ldr	r3, [pc, #20]	@ (800ce40 <MX_SDMMC1_SD_Init+0x38>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800ce30:	4b03      	ldr	r3, [pc, #12]	@ (800ce40 <MX_SDMMC1_SD_Init+0x38>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800ce36:	bf00      	nop
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	20000b2c 	.word	0x20000b2c
 800ce44:	40012c00 	.word	0x40012c00

0800ce48 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b0ac      	sub	sp, #176	@ 0xb0
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800ce54:	2200      	movs	r2, #0
 800ce56:	601a      	str	r2, [r3, #0]
 800ce58:	605a      	str	r2, [r3, #4]
 800ce5a:	609a      	str	r2, [r3, #8]
 800ce5c:	60da      	str	r2, [r3, #12]
 800ce5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ce60:	f107 0318 	add.w	r3, r7, #24
 800ce64:	2284      	movs	r2, #132	@ 0x84
 800ce66:	2100      	movs	r1, #0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f006 fcfb 	bl	8013864 <memset>
  if(sdHandle->Instance==SDMMC1)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a34      	ldr	r2, [pc, #208]	@ (800cf44 <HAL_SD_MspInit+0xfc>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d161      	bne.n	800cf3c <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800ce78:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 800ce7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800ce84:	2300      	movs	r3, #0
 800ce86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ce8a:	f107 0318 	add.w	r3, r7, #24
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f8 f9ba 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d001      	beq.n	800ce9e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800ce9a:	f7fe fcd7 	bl	800b84c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800ce9e:	4b2a      	ldr	r3, [pc, #168]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800cea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea2:	4a29      	ldr	r2, [pc, #164]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800cea4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cea8:	6453      	str	r3, [r2, #68]	@ 0x44
 800ceaa:	4b27      	ldr	r3, [pc, #156]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800ceac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ceb6:	4b24      	ldr	r3, [pc, #144]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800ceb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceba:	4a23      	ldr	r2, [pc, #140]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800cebc:	f043 0304 	orr.w	r3, r3, #4
 800cec0:	6313      	str	r3, [r2, #48]	@ 0x30
 800cec2:	4b21      	ldr	r3, [pc, #132]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800cec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cec6:	f003 0304 	and.w	r3, r3, #4
 800ceca:	613b      	str	r3, [r7, #16]
 800cecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cece:	4b1e      	ldr	r3, [pc, #120]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800ced0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ced2:	4a1d      	ldr	r2, [pc, #116]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800ced4:	f043 0308 	orr.w	r3, r3, #8
 800ced8:	6313      	str	r3, [r2, #48]	@ 0x30
 800ceda:	4b1b      	ldr	r3, [pc, #108]	@ (800cf48 <HAL_SD_MspInit+0x100>)
 800cedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cede:	f003 0308 	and.w	r3, r3, #8
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800cee6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800ceea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceee:	2302      	movs	r3, #2
 800cef0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cef4:	2300      	movs	r3, #0
 800cef6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cefa:	2303      	movs	r3, #3
 800cefc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800cf00:	230c      	movs	r3, #12
 800cf02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cf06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	480f      	ldr	r0, [pc, #60]	@ (800cf4c <HAL_SD_MspInit+0x104>)
 800cf0e:	f7f4 fccb 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800cf12:	2304      	movs	r3, #4
 800cf14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf18:	2302      	movs	r3, #2
 800cf1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf24:	2303      	movs	r3, #3
 800cf26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800cf2a:	230c      	movs	r3, #12
 800cf2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800cf30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800cf34:	4619      	mov	r1, r3
 800cf36:	4806      	ldr	r0, [pc, #24]	@ (800cf50 <HAL_SD_MspInit+0x108>)
 800cf38:	f7f4 fcb6 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800cf3c:	bf00      	nop
 800cf3e:	37b0      	adds	r7, #176	@ 0xb0
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	40012c00 	.word	0x40012c00
 800cf48:	40023800 	.word	0x40023800
 800cf4c:	40020800 	.word	0x40020800
 800cf50:	40020c00 	.word	0x40020c00

0800cf54 <MX_SPDIFRX_Init>:

SPDIFRX_HandleTypeDef hspdif;

/* SPDIFRX init function */
void MX_SPDIFRX_Init(void)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 800cf58:	4b15      	ldr	r3, [pc, #84]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf5a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800cf5e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800cf60:	4b13      	ldr	r3, [pc, #76]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800cf66:	4b12      	ldr	r3, [pc, #72]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800cf6c:	4b10      	ldr	r3, [pc, #64]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800cf72:	4b0f      	ldr	r3, [pc, #60]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf74:	2200      	movs	r2, #0
 800cf76:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800cf78:	4b0d      	ldr	r3, [pc, #52]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800cf7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf80:	2200      	movs	r2, #0
 800cf82:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 800cf84:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800cf8a:	4b09      	ldr	r3, [pc, #36]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800cf90:	4b07      	ldr	r3, [pc, #28]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800cf96:	4b06      	ldr	r3, [pc, #24]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800cf9c:	4804      	ldr	r0, [pc, #16]	@ (800cfb0 <MX_SPDIFRX_Init+0x5c>)
 800cf9e:	f7fa fcb9 	bl	8007914 <HAL_SPDIFRX_Init>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800cfa8:	f7fe fc50 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800cfac:	bf00      	nop
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	20000bb0 	.word	0x20000bb0

0800cfb4 <HAL_SPDIFRX_MspInit>:

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* spdifrxHandle)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b0aa      	sub	sp, #168	@ 0xa8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfbc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	605a      	str	r2, [r3, #4]
 800cfc6:	609a      	str	r2, [r3, #8]
 800cfc8:	60da      	str	r2, [r3, #12]
 800cfca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cfcc:	f107 0310 	add.w	r3, r7, #16
 800cfd0:	2284      	movs	r2, #132	@ 0x84
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f006 fc45 	bl	8013864 <memset>
  if(spdifrxHandle->Instance==SPDIFRX)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800cfe2:	d143      	bne.n	800d06c <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 800cfe4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cfe8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 60;
 800cfea:	233c      	movs	r3, #60	@ 0x3c
 800cfec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800cfee:	2302      	movs	r3, #2
 800cff0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800cff2:	2302      	movs	r3, #2
 800cff4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800cff6:	2302      	movs	r3, #2
 800cff8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800cffa:	2301      	movs	r3, #1
 800cffc:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cffe:	f107 0310 	add.w	r3, r7, #16
 800d002:	4618      	mov	r0, r3
 800d004:	f7f8 f900 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800d00e:	f7fe fc1d 	bl	800b84c <Error_Handler>
    }

    /* SPDIFRX clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800d012:	4b18      	ldr	r3, [pc, #96]	@ (800d074 <HAL_SPDIFRX_MspInit+0xc0>)
 800d014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d016:	4a17      	ldr	r2, [pc, #92]	@ (800d074 <HAL_SPDIFRX_MspInit+0xc0>)
 800d018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d01c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d01e:	4b15      	ldr	r3, [pc, #84]	@ (800d074 <HAL_SPDIFRX_MspInit+0xc0>)
 800d020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d026:	60fb      	str	r3, [r7, #12]
 800d028:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d02a:	4b12      	ldr	r3, [pc, #72]	@ (800d074 <HAL_SPDIFRX_MspInit+0xc0>)
 800d02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d02e:	4a11      	ldr	r2, [pc, #68]	@ (800d074 <HAL_SPDIFRX_MspInit+0xc0>)
 800d030:	f043 0308 	orr.w	r3, r3, #8
 800d034:	6313      	str	r3, [r2, #48]	@ 0x30
 800d036:	4b0f      	ldr	r3, [pc, #60]	@ (800d074 <HAL_SPDIFRX_MspInit+0xc0>)
 800d038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d03a:	f003 0308 	and.w	r3, r3, #8
 800d03e:	60bb      	str	r3, [r7, #8]
 800d040:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800d042:	2380      	movs	r3, #128	@ 0x80
 800d044:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d048:	2302      	movs	r3, #2
 800d04a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d04e:	2300      	movs	r3, #0
 800d050:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d054:	2300      	movs	r3, #0
 800d056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800d05a:	2308      	movs	r3, #8
 800d05c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800d060:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800d064:	4619      	mov	r1, r3
 800d066:	4804      	ldr	r0, [pc, #16]	@ (800d078 <HAL_SPDIFRX_MspInit+0xc4>)
 800d068:	f7f4 fc1e 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }
}
 800d06c:	bf00      	nop
 800d06e:	37a8      	adds	r7, #168	@ 0xa8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	40023800 	.word	0x40023800
 800d078:	40020c00 	.word	0x40020c00

0800d07c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800d080:	4b1b      	ldr	r3, [pc, #108]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d082:	4a1c      	ldr	r2, [pc, #112]	@ (800d0f4 <MX_SPI2_Init+0x78>)
 800d084:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d086:	4b1a      	ldr	r3, [pc, #104]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d088:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800d08c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d08e:	4b18      	ldr	r3, [pc, #96]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d090:	2200      	movs	r2, #0
 800d092:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800d094:	4b16      	ldr	r3, [pc, #88]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d096:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800d09a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d09c:	4b14      	ldr	r3, [pc, #80]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d09e:	2200      	movs	r2, #0
 800d0a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d0a2:	4b13      	ldr	r3, [pc, #76]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d0a8:	4b11      	ldr	r3, [pc, #68]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d0b0:	4b0f      	ldr	r3, [pc, #60]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d0b6:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800d0c8:	4b09      	ldr	r3, [pc, #36]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0ca:	2207      	movs	r2, #7
 800d0cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800d0ce:	4b08      	ldr	r3, [pc, #32]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800d0d4:	4b06      	ldr	r3, [pc, #24]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0d6:	2208      	movs	r2, #8
 800d0d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d0da:	4805      	ldr	r0, [pc, #20]	@ (800d0f0 <MX_SPI2_Init+0x74>)
 800d0dc:	f7fa fc76 	bl	80079cc <HAL_SPI_Init>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800d0e6:	f7fe fbb1 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d0ea:	bf00      	nop
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	20000bfc 	.word	0x20000bfc
 800d0f4:	40003800 	.word	0x40003800

0800d0f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08a      	sub	sp, #40	@ 0x28
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d100:	f107 0314 	add.w	r3, r7, #20
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]
 800d108:	605a      	str	r2, [r3, #4]
 800d10a:	609a      	str	r2, [r3, #8]
 800d10c:	60da      	str	r2, [r3, #12]
 800d10e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a25      	ldr	r2, [pc, #148]	@ (800d1ac <HAL_SPI_MspInit+0xb4>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d144      	bne.n	800d1a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d11a:	4b25      	ldr	r3, [pc, #148]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d11e:	4a24      	ldr	r2, [pc, #144]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d124:	6413      	str	r3, [r2, #64]	@ 0x40
 800d126:	4b22      	ldr	r3, [pc, #136]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d12a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d12e:	613b      	str	r3, [r7, #16]
 800d130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800d132:	4b1f      	ldr	r3, [pc, #124]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d136:	4a1e      	ldr	r2, [pc, #120]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d13c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d13e:	4b1c      	ldr	r3, [pc, #112]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d146:	60fb      	str	r3, [r7, #12]
 800d148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d14a:	4b19      	ldr	r3, [pc, #100]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d14e:	4a18      	ldr	r2, [pc, #96]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d150:	f043 0302 	orr.w	r3, r3, #2
 800d154:	6313      	str	r3, [r2, #48]	@ 0x30
 800d156:	4b16      	ldr	r3, [pc, #88]	@ (800d1b0 <HAL_SPI_MspInit+0xb8>)
 800d158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d15a:	f003 0302 	and.w	r3, r3, #2
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800d162:	2302      	movs	r3, #2
 800d164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d166:	2302      	movs	r3, #2
 800d168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d16a:	2300      	movs	r3, #0
 800d16c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d16e:	2300      	movs	r3, #0
 800d170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d172:	2305      	movs	r3, #5
 800d174:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800d176:	f107 0314 	add.w	r3, r7, #20
 800d17a:	4619      	mov	r1, r3
 800d17c:	480d      	ldr	r0, [pc, #52]	@ (800d1b4 <HAL_SPI_MspInit+0xbc>)
 800d17e:	f7f4 fb93 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800d182:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800d186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d188:	2302      	movs	r3, #2
 800d18a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d18c:	2300      	movs	r3, #0
 800d18e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d190:	2300      	movs	r3, #0
 800d192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d194:	2305      	movs	r3, #5
 800d196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d198:	f107 0314 	add.w	r3, r7, #20
 800d19c:	4619      	mov	r1, r3
 800d19e:	4806      	ldr	r0, [pc, #24]	@ (800d1b8 <HAL_SPI_MspInit+0xc0>)
 800d1a0:	f7f4 fb82 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800d1a4:	bf00      	nop
 800d1a6:	3728      	adds	r7, #40	@ 0x28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	40003800 	.word	0x40003800
 800d1b0:	40023800 	.word	0x40023800
 800d1b4:	40022000 	.word	0x40022000
 800d1b8:	40020400 	.word	0x40020400

0800d1bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800d1c2:	4b11      	ldr	r3, [pc, #68]	@ (800d208 <HAL_MspInit+0x4c>)
 800d1c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1c6:	4a10      	ldr	r2, [pc, #64]	@ (800d208 <HAL_MspInit+0x4c>)
 800d1c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d1cc:	6413      	str	r3, [r2, #64]	@ 0x40
 800d1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800d208 <HAL_MspInit+0x4c>)
 800d1d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d1d6:	607b      	str	r3, [r7, #4]
 800d1d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1da:	4b0b      	ldr	r3, [pc, #44]	@ (800d208 <HAL_MspInit+0x4c>)
 800d1dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1de:	4a0a      	ldr	r2, [pc, #40]	@ (800d208 <HAL_MspInit+0x4c>)
 800d1e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d1e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800d1e6:	4b08      	ldr	r3, [pc, #32]	@ (800d208 <HAL_MspInit+0x4c>)
 800d1e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1ee:	603b      	str	r3, [r7, #0]
 800d1f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	210f      	movs	r1, #15
 800d1f6:	f06f 0001 	mvn.w	r0, #1
 800d1fa:	f7f3 fbeb 	bl	80009d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d1fe:	bf00      	nop
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	40023800 	.word	0x40023800

0800d20c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08e      	sub	sp, #56	@ 0x38
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800d218:	2300      	movs	r3, #0
 800d21a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800d21c:	4b33      	ldr	r3, [pc, #204]	@ (800d2ec <HAL_InitTick+0xe0>)
 800d21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d220:	4a32      	ldr	r2, [pc, #200]	@ (800d2ec <HAL_InitTick+0xe0>)
 800d222:	f043 0310 	orr.w	r3, r3, #16
 800d226:	6413      	str	r3, [r2, #64]	@ 0x40
 800d228:	4b30      	ldr	r3, [pc, #192]	@ (800d2ec <HAL_InitTick+0xe0>)
 800d22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d22c:	f003 0310 	and.w	r3, r3, #16
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d234:	f107 0210 	add.w	r2, r7, #16
 800d238:	f107 0314 	add.w	r3, r7, #20
 800d23c:	4611      	mov	r1, r2
 800d23e:	4618      	mov	r0, r3
 800d240:	f7f7 ffb0 	bl	80051a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800d244:	6a3b      	ldr	r3, [r7, #32]
 800d246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d103      	bne.n	800d256 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d24e:	f7f7 ff81 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 800d252:	6378      	str	r0, [r7, #52]	@ 0x34
 800d254:	e004      	b.n	800d260 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d256:	f7f7 ff7d 	bl	8005154 <HAL_RCC_GetPCLK1Freq>
 800d25a:	4603      	mov	r3, r0
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d262:	4a23      	ldr	r2, [pc, #140]	@ (800d2f0 <HAL_InitTick+0xe4>)
 800d264:	fba2 2303 	umull	r2, r3, r2, r3
 800d268:	0c9b      	lsrs	r3, r3, #18
 800d26a:	3b01      	subs	r3, #1
 800d26c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800d26e:	4b21      	ldr	r3, [pc, #132]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d270:	4a21      	ldr	r2, [pc, #132]	@ (800d2f8 <HAL_InitTick+0xec>)
 800d272:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800d274:	4b1f      	ldr	r3, [pc, #124]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d276:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800d27a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800d27c:	4a1d      	ldr	r2, [pc, #116]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d280:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800d282:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d284:	2200      	movs	r2, #0
 800d286:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d288:	4b1a      	ldr	r3, [pc, #104]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d28e:	4b19      	ldr	r3, [pc, #100]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d290:	2200      	movs	r2, #0
 800d292:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800d294:	4817      	ldr	r0, [pc, #92]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d296:	f7fa fc44 	bl	8007b22 <HAL_TIM_Base_Init>
 800d29a:	4603      	mov	r3, r0
 800d29c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800d2a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d11b      	bne.n	800d2e0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800d2a8:	4812      	ldr	r0, [pc, #72]	@ (800d2f4 <HAL_InitTick+0xe8>)
 800d2aa:	f7fa fc91 	bl	8007bd0 <HAL_TIM_Base_Start_IT>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800d2b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d111      	bne.n	800d2e0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d2bc:	2036      	movs	r0, #54	@ 0x36
 800d2be:	f7f3 fba5 	bl	8000a0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2b0f      	cmp	r3, #15
 800d2c6:	d808      	bhi.n	800d2da <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	2036      	movs	r0, #54	@ 0x36
 800d2ce:	f7f3 fb81 	bl	80009d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d2d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d2fc <HAL_InitTick+0xf0>)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6013      	str	r3, [r2, #0]
 800d2d8:	e002      	b.n	800d2e0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800d2e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3738      	adds	r7, #56	@ 0x38
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	40023800 	.word	0x40023800
 800d2f0:	431bde83 	.word	0x431bde83
 800d2f4:	20000c60 	.word	0x20000c60
 800d2f8:	40001000 	.word	0x40001000
 800d2fc:	20000000 	.word	0x20000000

0800d300 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b09a      	sub	sp, #104	@ 0x68
 800d304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d306:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d30a:	2200      	movs	r2, #0
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	605a      	str	r2, [r3, #4]
 800d310:	609a      	str	r2, [r3, #8]
 800d312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d314:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	605a      	str	r2, [r3, #4]
 800d31e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d320:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d324:	2200      	movs	r2, #0
 800d326:	601a      	str	r2, [r3, #0]
 800d328:	605a      	str	r2, [r3, #4]
 800d32a:	609a      	str	r2, [r3, #8]
 800d32c:	60da      	str	r2, [r3, #12]
 800d32e:	611a      	str	r2, [r3, #16]
 800d330:	615a      	str	r2, [r3, #20]
 800d332:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800d334:	1d3b      	adds	r3, r7, #4
 800d336:	222c      	movs	r2, #44	@ 0x2c
 800d338:	2100      	movs	r1, #0
 800d33a:	4618      	mov	r0, r3
 800d33c:	f006 fa92 	bl	8013864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d340:	4b43      	ldr	r3, [pc, #268]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d342:	4a44      	ldr	r2, [pc, #272]	@ (800d454 <MX_TIM1_Init+0x154>)
 800d344:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800d346:	4b42      	ldr	r3, [pc, #264]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d348:	2200      	movs	r2, #0
 800d34a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d34c:	4b40      	ldr	r3, [pc, #256]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d34e:	2200      	movs	r2, #0
 800d350:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800d352:	4b3f      	ldr	r3, [pc, #252]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d354:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d358:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d35a:	4b3d      	ldr	r3, [pc, #244]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d360:	4b3b      	ldr	r3, [pc, #236]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d362:	2200      	movs	r2, #0
 800d364:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d366:	4b3a      	ldr	r3, [pc, #232]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d368:	2200      	movs	r2, #0
 800d36a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d36c:	4838      	ldr	r0, [pc, #224]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d36e:	f7fa fbd8 	bl	8007b22 <HAL_TIM_Base_Init>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d001      	beq.n	800d37c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800d378:	f7fe fa68 	bl	800b84c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d37c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d380:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d382:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d386:	4619      	mov	r1, r3
 800d388:	4831      	ldr	r0, [pc, #196]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d38a:	f7fa ff0b 	bl	80081a4 <HAL_TIM_ConfigClockSource>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800d394:	f7fe fa5a 	bl	800b84c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800d398:	482d      	ldr	r0, [pc, #180]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d39a:	f7fa fc91 	bl	8007cc0 <HAL_TIM_PWM_Init>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800d3a4:	f7fe fa52 	bl	800b84c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d3b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4825      	ldr	r0, [pc, #148]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d3bc:	f7fb fb82 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800d3c6:	f7fe fa41 	bl	800b84c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d3ca:	2360      	movs	r3, #96	@ 0x60
 800d3cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d3e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4818      	ldr	r0, [pc, #96]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d3f0:	f7fa fdc4 	bl	8007f7c <HAL_TIM_PWM_ConfigChannel>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800d3fa:	f7fe fa27 	bl	800b84c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800d3fe:	2300      	movs	r3, #0
 800d400:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800d402:	2300      	movs	r3, #0
 800d404:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800d406:	2300      	movs	r3, #0
 800d408:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800d40e:	2300      	movs	r3, #0
 800d410:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800d412:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d416:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800d418:	2300      	movs	r3, #0
 800d41a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800d41c:	2300      	movs	r3, #0
 800d41e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800d420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d424:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800d42e:	1d3b      	adds	r3, r7, #4
 800d430:	4619      	mov	r1, r3
 800d432:	4807      	ldr	r0, [pc, #28]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d434:	f7fb fbd4 	bl	8008be0 <HAL_TIMEx_ConfigBreakDeadTime>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800d43e:	f7fe fa05 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800d442:	4803      	ldr	r0, [pc, #12]	@ (800d450 <MX_TIM1_Init+0x150>)
 800d444:	f000 fa96 	bl	800d974 <HAL_TIM_MspPostInit>

}
 800d448:	bf00      	nop
 800d44a:	3768      	adds	r7, #104	@ 0x68
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20000cac 	.word	0x20000cac
 800d454:	40010000 	.word	0x40010000

0800d458 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08e      	sub	sp, #56	@ 0x38
 800d45c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d45e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	605a      	str	r2, [r3, #4]
 800d468:	609a      	str	r2, [r3, #8]
 800d46a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d46c:	f107 031c 	add.w	r3, r7, #28
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]
 800d474:	605a      	str	r2, [r3, #4]
 800d476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d478:	463b      	mov	r3, r7
 800d47a:	2200      	movs	r2, #0
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	605a      	str	r2, [r3, #4]
 800d480:	609a      	str	r2, [r3, #8]
 800d482:	60da      	str	r2, [r3, #12]
 800d484:	611a      	str	r2, [r3, #16]
 800d486:	615a      	str	r2, [r3, #20]
 800d488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d48a:	4b2d      	ldr	r3, [pc, #180]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d48c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800d490:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d492:	4b2b      	ldr	r3, [pc, #172]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d494:	2200      	movs	r2, #0
 800d496:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d498:	4b29      	ldr	r3, [pc, #164]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d49a:	2200      	movs	r2, #0
 800d49c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800d49e:	4b28      	ldr	r3, [pc, #160]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d4a6:	4b26      	ldr	r3, [pc, #152]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d4ac:	4b24      	ldr	r3, [pc, #144]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d4b2:	4823      	ldr	r0, [pc, #140]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d4b4:	f7fa fb35 	bl	8007b22 <HAL_TIM_Base_Init>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800d4be:	f7fe f9c5 	bl	800b84c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d4c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d4c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	481c      	ldr	r0, [pc, #112]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d4d0:	f7fa fe68 	bl	80081a4 <HAL_TIM_ConfigClockSource>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d001      	beq.n	800d4de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800d4da:	f7fe f9b7 	bl	800b84c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d4de:	4818      	ldr	r0, [pc, #96]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d4e0:	f7fa fbee 	bl	8007cc0 <HAL_TIM_PWM_Init>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d001      	beq.n	800d4ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800d4ea:	f7fe f9af 	bl	800b84c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d4f6:	f107 031c 	add.w	r3, r7, #28
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4810      	ldr	r0, [pc, #64]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d4fe:	f7fb fae1 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d001      	beq.n	800d50c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800d508:	f7fe f9a0 	bl	800b84c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d50c:	2360      	movs	r3, #96	@ 0x60
 800d50e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d514:	2300      	movs	r3, #0
 800d516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d518:	2300      	movs	r3, #0
 800d51a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d51c:	463b      	mov	r3, r7
 800d51e:	2200      	movs	r2, #0
 800d520:	4619      	mov	r1, r3
 800d522:	4807      	ldr	r0, [pc, #28]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d524:	f7fa fd2a 	bl	8007f7c <HAL_TIM_PWM_ConfigChannel>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800d52e:	f7fe f98d 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d532:	4803      	ldr	r0, [pc, #12]	@ (800d540 <MX_TIM2_Init+0xe8>)
 800d534:	f000 fa1e 	bl	800d974 <HAL_TIM_MspPostInit>

}
 800d538:	bf00      	nop
 800d53a:	3738      	adds	r7, #56	@ 0x38
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	20000cf8 	.word	0x20000cf8

0800d544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08e      	sub	sp, #56	@ 0x38
 800d548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d54a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d54e:	2200      	movs	r2, #0
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	605a      	str	r2, [r3, #4]
 800d554:	609a      	str	r2, [r3, #8]
 800d556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d558:	f107 031c 	add.w	r3, r7, #28
 800d55c:	2200      	movs	r2, #0
 800d55e:	601a      	str	r2, [r3, #0]
 800d560:	605a      	str	r2, [r3, #4]
 800d562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d564:	463b      	mov	r3, r7
 800d566:	2200      	movs	r2, #0
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	605a      	str	r2, [r3, #4]
 800d56c:	609a      	str	r2, [r3, #8]
 800d56e:	60da      	str	r2, [r3, #12]
 800d570:	611a      	str	r2, [r3, #16]
 800d572:	615a      	str	r2, [r3, #20]
 800d574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d576:	4b2d      	ldr	r3, [pc, #180]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d578:	4a2d      	ldr	r2, [pc, #180]	@ (800d630 <MX_TIM3_Init+0xec>)
 800d57a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d57c:	4b2b      	ldr	r3, [pc, #172]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d57e:	2200      	movs	r2, #0
 800d580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d582:	4b2a      	ldr	r3, [pc, #168]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d584:	2200      	movs	r2, #0
 800d586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d588:	4b28      	ldr	r3, [pc, #160]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d58a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d58e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d590:	4b26      	ldr	r3, [pc, #152]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d592:	2200      	movs	r2, #0
 800d594:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d596:	4b25      	ldr	r3, [pc, #148]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d598:	2200      	movs	r2, #0
 800d59a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d59c:	4823      	ldr	r0, [pc, #140]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d59e:	f7fa fac0 	bl	8007b22 <HAL_TIM_Base_Init>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800d5a8:	f7fe f950 	bl	800b84c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d5ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d5b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	481c      	ldr	r0, [pc, #112]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d5ba:	f7fa fdf3 	bl	80081a4 <HAL_TIM_ConfigClockSource>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800d5c4:	f7fe f942 	bl	800b84c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d5c8:	4818      	ldr	r0, [pc, #96]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d5ca:	f7fa fb79 	bl	8007cc0 <HAL_TIM_PWM_Init>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800d5d4:	f7fe f93a 	bl	800b84c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d5e0:	f107 031c 	add.w	r3, r7, #28
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4811      	ldr	r0, [pc, #68]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d5e8:	f7fb fa6c 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d001      	beq.n	800d5f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800d5f2:	f7fe f92b 	bl	800b84c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d5f6:	2360      	movs	r3, #96	@ 0x60
 800d5f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d602:	2300      	movs	r3, #0
 800d604:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d606:	463b      	mov	r3, r7
 800d608:	2200      	movs	r2, #0
 800d60a:	4619      	mov	r1, r3
 800d60c:	4807      	ldr	r0, [pc, #28]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d60e:	f7fa fcb5 	bl	8007f7c <HAL_TIM_PWM_ConfigChannel>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800d618:	f7fe f918 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d61c:	4803      	ldr	r0, [pc, #12]	@ (800d62c <MX_TIM3_Init+0xe8>)
 800d61e:	f000 f9a9 	bl	800d974 <HAL_TIM_MspPostInit>

}
 800d622:	bf00      	nop
 800d624:	3738      	adds	r7, #56	@ 0x38
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	20000d44 	.word	0x20000d44
 800d630:	40000400 	.word	0x40000400

0800d634 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b08e      	sub	sp, #56	@ 0x38
 800d638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d63a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d63e:	2200      	movs	r2, #0
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	605a      	str	r2, [r3, #4]
 800d644:	609a      	str	r2, [r3, #8]
 800d646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d648:	f107 031c 	add.w	r3, r7, #28
 800d64c:	2200      	movs	r2, #0
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	605a      	str	r2, [r3, #4]
 800d652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d654:	463b      	mov	r3, r7
 800d656:	2200      	movs	r2, #0
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	605a      	str	r2, [r3, #4]
 800d65c:	609a      	str	r2, [r3, #8]
 800d65e:	60da      	str	r2, [r3, #12]
 800d660:	611a      	str	r2, [r3, #16]
 800d662:	615a      	str	r2, [r3, #20]
 800d664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800d666:	4b2d      	ldr	r3, [pc, #180]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d668:	4a2d      	ldr	r2, [pc, #180]	@ (800d720 <MX_TIM5_Init+0xec>)
 800d66a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800d66c:	4b2b      	ldr	r3, [pc, #172]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d66e:	2200      	movs	r2, #0
 800d670:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d672:	4b2a      	ldr	r3, [pc, #168]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d674:	2200      	movs	r2, #0
 800d676:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800d678:	4b28      	ldr	r3, [pc, #160]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d67a:	f04f 32ff 	mov.w	r2, #4294967295
 800d67e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d680:	4b26      	ldr	r3, [pc, #152]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d682:	2200      	movs	r2, #0
 800d684:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d686:	4b25      	ldr	r3, [pc, #148]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d688:	2200      	movs	r2, #0
 800d68a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800d68c:	4823      	ldr	r0, [pc, #140]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d68e:	f7fa fa48 	bl	8007b22 <HAL_TIM_Base_Init>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800d698:	f7fe f8d8 	bl	800b84c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d69c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800d6a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	481c      	ldr	r0, [pc, #112]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d6aa:	f7fa fd7b 	bl	80081a4 <HAL_TIM_ConfigClockSource>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d001      	beq.n	800d6b8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800d6b4:	f7fe f8ca 	bl	800b84c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800d6b8:	4818      	ldr	r0, [pc, #96]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d6ba:	f7fa fb01 	bl	8007cc0 <HAL_TIM_PWM_Init>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800d6c4:	f7fe f8c2 	bl	800b84c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800d6d0:	f107 031c 	add.w	r3, r7, #28
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4811      	ldr	r0, [pc, #68]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d6d8:	f7fb f9f4 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800d6e2:	f7fe f8b3 	bl	800b84c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d6e6:	2360      	movs	r3, #96	@ 0x60
 800d6e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d6f6:	463b      	mov	r3, r7
 800d6f8:	220c      	movs	r2, #12
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4807      	ldr	r0, [pc, #28]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d6fe:	f7fa fc3d 	bl	8007f7c <HAL_TIM_PWM_ConfigChannel>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d001      	beq.n	800d70c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800d708:	f7fe f8a0 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800d70c:	4803      	ldr	r0, [pc, #12]	@ (800d71c <MX_TIM5_Init+0xe8>)
 800d70e:	f000 f931 	bl	800d974 <HAL_TIM_MspPostInit>

}
 800d712:	bf00      	nop
 800d714:	3738      	adds	r7, #56	@ 0x38
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	20000d90 	.word	0x20000d90
 800d720:	40000c00 	.word	0x40000c00

0800d724 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b088      	sub	sp, #32
 800d728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d72a:	f107 0310 	add.w	r3, r7, #16
 800d72e:	2200      	movs	r2, #0
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	605a      	str	r2, [r3, #4]
 800d734:	609a      	str	r2, [r3, #8]
 800d736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d738:	1d3b      	adds	r3, r7, #4
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]
 800d73e:	605a      	str	r2, [r3, #4]
 800d740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800d742:	4b20      	ldr	r3, [pc, #128]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d744:	4a20      	ldr	r2, [pc, #128]	@ (800d7c8 <MX_TIM8_Init+0xa4>)
 800d746:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800d748:	4b1e      	ldr	r3, [pc, #120]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d74e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d750:	2200      	movs	r2, #0
 800d752:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800d754:	4b1b      	ldr	r3, [pc, #108]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d75a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d75c:	4b19      	ldr	r3, [pc, #100]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d75e:	2200      	movs	r2, #0
 800d760:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800d762:	4b18      	ldr	r3, [pc, #96]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d764:	2200      	movs	r2, #0
 800d766:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d768:	4b16      	ldr	r3, [pc, #88]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800d76e:	4815      	ldr	r0, [pc, #84]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d770:	f7fa f9d7 	bl	8007b22 <HAL_TIM_Base_Init>
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800d77a:	f7fe f867 	bl	800b84c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d77e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d782:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800d784:	f107 0310 	add.w	r3, r7, #16
 800d788:	4619      	mov	r1, r3
 800d78a:	480e      	ldr	r0, [pc, #56]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d78c:	f7fa fd0a 	bl	80081a4 <HAL_TIM_ConfigClockSource>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800d796:	f7fe f859 	bl	800b84c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d79a:	2300      	movs	r3, #0
 800d79c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800d7a6:	1d3b      	adds	r3, r7, #4
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4806      	ldr	r0, [pc, #24]	@ (800d7c4 <MX_TIM8_Init+0xa0>)
 800d7ac:	f7fb f98a 	bl	8008ac4 <HAL_TIMEx_MasterConfigSynchronization>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d001      	beq.n	800d7ba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800d7b6:	f7fe f849 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800d7ba:	bf00      	nop
 800d7bc:	3720      	adds	r7, #32
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20000ddc 	.word	0x20000ddc
 800d7c8:	40010400 	.word	0x40010400

0800d7cc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b088      	sub	sp, #32
 800d7d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800d7d2:	1d3b      	adds	r3, r7, #4
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	601a      	str	r2, [r3, #0]
 800d7d8:	605a      	str	r2, [r3, #4]
 800d7da:	609a      	str	r2, [r3, #8]
 800d7dc:	60da      	str	r2, [r3, #12]
 800d7de:	611a      	str	r2, [r3, #16]
 800d7e0:	615a      	str	r2, [r3, #20]
 800d7e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800d7e4:	4b1a      	ldr	r3, [pc, #104]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d7e6:	4a1b      	ldr	r2, [pc, #108]	@ (800d854 <MX_TIM12_Init+0x88>)
 800d7e8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800d7ea:	4b19      	ldr	r3, [pc, #100]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d7f0:	4b17      	ldr	r3, [pc, #92]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800d7f6:	4b16      	ldr	r3, [pc, #88]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d7f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7fc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d7fe:	4b14      	ldr	r3, [pc, #80]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d800:	2200      	movs	r2, #0
 800d802:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d804:	4b12      	ldr	r3, [pc, #72]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d806:	2200      	movs	r2, #0
 800d808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800d80a:	4811      	ldr	r0, [pc, #68]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d80c:	f7fa fa58 	bl	8007cc0 <HAL_TIM_PWM_Init>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d001      	beq.n	800d81a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800d816:	f7fe f819 	bl	800b84c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d81a:	2360      	movs	r3, #96	@ 0x60
 800d81c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800d81e:	2300      	movs	r3, #0
 800d820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d822:	2300      	movs	r3, #0
 800d824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d826:	2300      	movs	r3, #0
 800d828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d82a:	1d3b      	adds	r3, r7, #4
 800d82c:	2200      	movs	r2, #0
 800d82e:	4619      	mov	r1, r3
 800d830:	4807      	ldr	r0, [pc, #28]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d832:	f7fa fba3 	bl	8007f7c <HAL_TIM_PWM_ConfigChannel>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800d83c:	f7fe f806 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800d840:	4803      	ldr	r0, [pc, #12]	@ (800d850 <MX_TIM12_Init+0x84>)
 800d842:	f000 f897 	bl	800d974 <HAL_TIM_MspPostInit>

}
 800d846:	bf00      	nop
 800d848:	3720      	adds	r7, #32
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	20000e28 	.word	0x20000e28
 800d854:	40001800 	.word	0x40001800

0800d858 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d858:	b480      	push	{r7}
 800d85a:	b089      	sub	sp, #36	@ 0x24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a2e      	ldr	r2, [pc, #184]	@ (800d920 <HAL_TIM_Base_MspInit+0xc8>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d10c      	bne.n	800d884 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d86a:	4b2e      	ldr	r3, [pc, #184]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d86c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d86e:	4a2d      	ldr	r2, [pc, #180]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d870:	f043 0301 	orr.w	r3, r3, #1
 800d874:	6453      	str	r3, [r2, #68]	@ 0x44
 800d876:	4b2b      	ldr	r3, [pc, #172]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800d882:	e046      	b.n	800d912 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d88c:	d10c      	bne.n	800d8a8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d88e:	4b25      	ldr	r3, [pc, #148]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d892:	4a24      	ldr	r2, [pc, #144]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d894:	f043 0301 	orr.w	r3, r3, #1
 800d898:	6413      	str	r3, [r2, #64]	@ 0x40
 800d89a:	4b22      	ldr	r3, [pc, #136]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	61bb      	str	r3, [r7, #24]
 800d8a4:	69bb      	ldr	r3, [r7, #24]
}
 800d8a6:	e034      	b.n	800d912 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a1e      	ldr	r2, [pc, #120]	@ (800d928 <HAL_TIM_Base_MspInit+0xd0>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d10c      	bne.n	800d8cc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d8b2:	4b1c      	ldr	r3, [pc, #112]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8b6:	4a1b      	ldr	r2, [pc, #108]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d8b8:	f043 0302 	orr.w	r3, r3, #2
 800d8bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800d8be:	4b19      	ldr	r3, [pc, #100]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c2:	f003 0302 	and.w	r3, r3, #2
 800d8c6:	617b      	str	r3, [r7, #20]
 800d8c8:	697b      	ldr	r3, [r7, #20]
}
 800d8ca:	e022      	b.n	800d912 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a16      	ldr	r2, [pc, #88]	@ (800d92c <HAL_TIM_Base_MspInit+0xd4>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d10c      	bne.n	800d8f0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d8d6:	4b13      	ldr	r3, [pc, #76]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8da:	4a12      	ldr	r2, [pc, #72]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d8dc:	f043 0308 	orr.w	r3, r3, #8
 800d8e0:	6413      	str	r3, [r2, #64]	@ 0x40
 800d8e2:	4b10      	ldr	r3, [pc, #64]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8e6:	f003 0308 	and.w	r3, r3, #8
 800d8ea:	613b      	str	r3, [r7, #16]
 800d8ec:	693b      	ldr	r3, [r7, #16]
}
 800d8ee:	e010      	b.n	800d912 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a0e      	ldr	r2, [pc, #56]	@ (800d930 <HAL_TIM_Base_MspInit+0xd8>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d10b      	bne.n	800d912 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d8fa:	4b0a      	ldr	r3, [pc, #40]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d8fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8fe:	4a09      	ldr	r2, [pc, #36]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d900:	f043 0302 	orr.w	r3, r3, #2
 800d904:	6453      	str	r3, [r2, #68]	@ 0x44
 800d906:	4b07      	ldr	r3, [pc, #28]	@ (800d924 <HAL_TIM_Base_MspInit+0xcc>)
 800d908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d90a:	f003 0302 	and.w	r3, r3, #2
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	68fb      	ldr	r3, [r7, #12]
}
 800d912:	bf00      	nop
 800d914:	3724      	adds	r7, #36	@ 0x24
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	40010000 	.word	0x40010000
 800d924:	40023800 	.word	0x40023800
 800d928:	40000400 	.word	0x40000400
 800d92c:	40000c00 	.word	0x40000c00
 800d930:	40010400 	.word	0x40010400

0800d934 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a0a      	ldr	r2, [pc, #40]	@ (800d96c <HAL_TIM_PWM_MspInit+0x38>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d10b      	bne.n	800d95e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800d946:	4b0a      	ldr	r3, [pc, #40]	@ (800d970 <HAL_TIM_PWM_MspInit+0x3c>)
 800d948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d94a:	4a09      	ldr	r2, [pc, #36]	@ (800d970 <HAL_TIM_PWM_MspInit+0x3c>)
 800d94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d950:	6413      	str	r3, [r2, #64]	@ 0x40
 800d952:	4b07      	ldr	r3, [pc, #28]	@ (800d970 <HAL_TIM_PWM_MspInit+0x3c>)
 800d954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800d95e:	bf00      	nop
 800d960:	3714      	adds	r7, #20
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	40001800 	.word	0x40001800
 800d970:	40023800 	.word	0x40023800

0800d974 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b08c      	sub	sp, #48	@ 0x30
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d97c:	f107 031c 	add.w	r3, r7, #28
 800d980:	2200      	movs	r2, #0
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	605a      	str	r2, [r3, #4]
 800d986:	609a      	str	r2, [r3, #8]
 800d988:	60da      	str	r2, [r3, #12]
 800d98a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a56      	ldr	r2, [pc, #344]	@ (800daec <HAL_TIM_MspPostInit+0x178>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d11d      	bne.n	800d9d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d996:	4b56      	ldr	r3, [pc, #344]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800d998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d99a:	4a55      	ldr	r2, [pc, #340]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800d99c:	f043 0301 	orr.w	r3, r3, #1
 800d9a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9a2:	4b53      	ldr	r3, [pc, #332]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800d9a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9a6:	f003 0301 	and.w	r3, r3, #1
 800d9aa:	61bb      	str	r3, [r7, #24]
 800d9ac:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800d9ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d9b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9b4:	2302      	movs	r3, #2
 800d9b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800d9c4:	f107 031c 	add.w	r3, r7, #28
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	484a      	ldr	r0, [pc, #296]	@ (800daf4 <HAL_TIM_MspPostInit+0x180>)
 800d9cc:	f7f3 ff6c 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800d9d0:	e087      	b.n	800dae2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM2)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9da:	d11d      	bne.n	800da18 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9dc:	4b44      	ldr	r3, [pc, #272]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800d9de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9e0:	4a43      	ldr	r2, [pc, #268]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800d9e2:	f043 0301 	orr.w	r3, r3, #1
 800d9e6:	6313      	str	r3, [r2, #48]	@ 0x30
 800d9e8:	4b41      	ldr	r3, [pc, #260]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800d9ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	617b      	str	r3, [r7, #20]
 800d9f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800d9f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9fa:	2302      	movs	r3, #2
 800d9fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da02:	2300      	movs	r3, #0
 800da04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800da06:	2301      	movs	r3, #1
 800da08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800da0a:	f107 031c 	add.w	r3, r7, #28
 800da0e:	4619      	mov	r1, r3
 800da10:	4838      	ldr	r0, [pc, #224]	@ (800daf4 <HAL_TIM_MspPostInit+0x180>)
 800da12:	f7f3 ff49 	bl	80018a8 <HAL_GPIO_Init>
}
 800da16:	e064      	b.n	800dae2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM3)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a36      	ldr	r2, [pc, #216]	@ (800daf8 <HAL_TIM_MspPostInit+0x184>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d11c      	bne.n	800da5c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800da22:	4b33      	ldr	r3, [pc, #204]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800da24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da26:	4a32      	ldr	r2, [pc, #200]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800da28:	f043 0302 	orr.w	r3, r3, #2
 800da2c:	6313      	str	r3, [r2, #48]	@ 0x30
 800da2e:	4b30      	ldr	r3, [pc, #192]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800da30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da32:	f003 0302 	and.w	r3, r3, #2
 800da36:	613b      	str	r3, [r7, #16]
 800da38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800da3a:	2310      	movs	r3, #16
 800da3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da3e:	2302      	movs	r3, #2
 800da40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da42:	2300      	movs	r3, #0
 800da44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da46:	2300      	movs	r3, #0
 800da48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800da4a:	2302      	movs	r3, #2
 800da4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800da4e:	f107 031c 	add.w	r3, r7, #28
 800da52:	4619      	mov	r1, r3
 800da54:	4829      	ldr	r0, [pc, #164]	@ (800dafc <HAL_TIM_MspPostInit+0x188>)
 800da56:	f7f3 ff27 	bl	80018a8 <HAL_GPIO_Init>
}
 800da5a:	e042      	b.n	800dae2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM5)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a27      	ldr	r2, [pc, #156]	@ (800db00 <HAL_TIM_MspPostInit+0x18c>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d11c      	bne.n	800daa0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800da66:	4b22      	ldr	r3, [pc, #136]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800da68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da6a:	4a21      	ldr	r2, [pc, #132]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800da6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da70:	6313      	str	r3, [r2, #48]	@ 0x30
 800da72:	4b1f      	ldr	r3, [pc, #124]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800da74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da7a:	60fb      	str	r3, [r7, #12]
 800da7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800da7e:	2301      	movs	r3, #1
 800da80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800da82:	2302      	movs	r3, #2
 800da84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da86:	2300      	movs	r3, #0
 800da88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800da8a:	2300      	movs	r3, #0
 800da8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800da8e:	2302      	movs	r3, #2
 800da90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800da92:	f107 031c 	add.w	r3, r7, #28
 800da96:	4619      	mov	r1, r3
 800da98:	481a      	ldr	r0, [pc, #104]	@ (800db04 <HAL_TIM_MspPostInit+0x190>)
 800da9a:	f7f3 ff05 	bl	80018a8 <HAL_GPIO_Init>
}
 800da9e:	e020      	b.n	800dae2 <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM12)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a18      	ldr	r2, [pc, #96]	@ (800db08 <HAL_TIM_MspPostInit+0x194>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d11b      	bne.n	800dae2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800daaa:	4b11      	ldr	r3, [pc, #68]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800daac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daae:	4a10      	ldr	r2, [pc, #64]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800dab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dab4:	6313      	str	r3, [r2, #48]	@ 0x30
 800dab6:	4b0e      	ldr	r3, [pc, #56]	@ (800daf0 <HAL_TIM_MspPostInit+0x17c>)
 800dab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dabe:	60bb      	str	r3, [r7, #8]
 800dac0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800dac2:	2340      	movs	r3, #64	@ 0x40
 800dac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dac6:	2302      	movs	r3, #2
 800dac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dace:	2300      	movs	r3, #0
 800dad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800dad2:	2309      	movs	r3, #9
 800dad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800dad6:	f107 031c 	add.w	r3, r7, #28
 800dada:	4619      	mov	r1, r3
 800dadc:	480b      	ldr	r0, [pc, #44]	@ (800db0c <HAL_TIM_MspPostInit+0x198>)
 800dade:	f7f3 fee3 	bl	80018a8 <HAL_GPIO_Init>
}
 800dae2:	bf00      	nop
 800dae4:	3730      	adds	r7, #48	@ 0x30
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	40010000 	.word	0x40010000
 800daf0:	40023800 	.word	0x40023800
 800daf4:	40020000 	.word	0x40020000
 800daf8:	40000400 	.word	0x40000400
 800dafc:	40020400 	.word	0x40020400
 800db00:	40000c00 	.word	0x40000c00
 800db04:	40022000 	.word	0x40022000
 800db08:	40001800 	.word	0x40001800
 800db0c:	40021c00 	.word	0x40021c00

0800db10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800db14:	4b14      	ldr	r3, [pc, #80]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db16:	4a15      	ldr	r2, [pc, #84]	@ (800db6c <MX_USART1_UART_Init+0x5c>)
 800db18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800db1a:	4b13      	ldr	r3, [pc, #76]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800db20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800db22:	4b11      	ldr	r3, [pc, #68]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db24:	2200      	movs	r2, #0
 800db26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800db28:	4b0f      	ldr	r3, [pc, #60]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db2a:	2200      	movs	r2, #0
 800db2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800db2e:	4b0e      	ldr	r3, [pc, #56]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db30:	2200      	movs	r2, #0
 800db32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800db34:	4b0c      	ldr	r3, [pc, #48]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db36:	220c      	movs	r2, #12
 800db38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db3a:	4b0b      	ldr	r3, [pc, #44]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800db40:	4b09      	ldr	r3, [pc, #36]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db42:	2200      	movs	r2, #0
 800db44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800db46:	4b08      	ldr	r3, [pc, #32]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db48:	2200      	movs	r2, #0
 800db4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db4c:	4b06      	ldr	r3, [pc, #24]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db4e:	2200      	movs	r2, #0
 800db50:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800db52:	4805      	ldr	r0, [pc, #20]	@ (800db68 <MX_USART1_UART_Init+0x58>)
 800db54:	f7fb f8e0 	bl	8008d18 <HAL_UART_Init>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800db5e:	f7fd fe75 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800db62:	bf00      	nop
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	20000e74 	.word	0x20000e74
 800db6c:	40011000 	.word	0x40011000

0800db70 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800db74:	4b14      	ldr	r3, [pc, #80]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800db76:	4a15      	ldr	r2, [pc, #84]	@ (800dbcc <MX_USART6_UART_Init+0x5c>)
 800db78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800db7a:	4b13      	ldr	r3, [pc, #76]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800db7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800db80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800db82:	4b11      	ldr	r3, [pc, #68]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800db84:	2200      	movs	r2, #0
 800db86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800db88:	4b0f      	ldr	r3, [pc, #60]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800db8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800db90:	2200      	movs	r2, #0
 800db92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800db94:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800db96:	220c      	movs	r2, #12
 800db98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dba0:	4b09      	ldr	r3, [pc, #36]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dba6:	4b08      	ldr	r3, [pc, #32]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dbac:	4b06      	ldr	r3, [pc, #24]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800dbb2:	4805      	ldr	r0, [pc, #20]	@ (800dbc8 <MX_USART6_UART_Init+0x58>)
 800dbb4:	f7fb f8b0 	bl	8008d18 <HAL_UART_Init>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d001      	beq.n	800dbc2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800dbbe:	f7fd fe45 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800dbc2:	bf00      	nop
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20000efc 	.word	0x20000efc
 800dbcc:	40011400 	.word	0x40011400

0800dbd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b0ae      	sub	sp, #184	@ 0xb8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dbd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dbdc:	2200      	movs	r2, #0
 800dbde:	601a      	str	r2, [r3, #0]
 800dbe0:	605a      	str	r2, [r3, #4]
 800dbe2:	609a      	str	r2, [r3, #8]
 800dbe4:	60da      	str	r2, [r3, #12]
 800dbe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dbe8:	f107 0320 	add.w	r3, r7, #32
 800dbec:	2284      	movs	r2, #132	@ 0x84
 800dbee:	2100      	movs	r1, #0
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f005 fe37 	bl	8013864 <memset>
  if(uartHandle->Instance==USART1)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a53      	ldr	r2, [pc, #332]	@ (800dd48 <HAL_UART_MspInit+0x178>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d15d      	bne.n	800dcbc <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800dc00:	2340      	movs	r3, #64	@ 0x40
 800dc02:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800dc04:	2300      	movs	r3, #0
 800dc06:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dc08:	f107 0320 	add.w	r3, r7, #32
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7f7 fafb 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d001      	beq.n	800dc1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800dc18:	f7fd fe18 	bl	800b84c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800dc1c:	4b4b      	ldr	r3, [pc, #300]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc20:	4a4a      	ldr	r2, [pc, #296]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc22:	f043 0310 	orr.w	r3, r3, #16
 800dc26:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc28:	4b48      	ldr	r3, [pc, #288]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc2c:	f003 0310 	and.w	r3, r3, #16
 800dc30:	61fb      	str	r3, [r7, #28]
 800dc32:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dc34:	4b45      	ldr	r3, [pc, #276]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc38:	4a44      	ldr	r2, [pc, #272]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc3a:	f043 0302 	orr.w	r3, r3, #2
 800dc3e:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc40:	4b42      	ldr	r3, [pc, #264]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc44:	f003 0302 	and.w	r3, r3, #2
 800dc48:	61bb      	str	r3, [r7, #24]
 800dc4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc4c:	4b3f      	ldr	r3, [pc, #252]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc50:	4a3e      	ldr	r2, [pc, #248]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc52:	f043 0301 	orr.w	r3, r3, #1
 800dc56:	6313      	str	r3, [r2, #48]	@ 0x30
 800dc58:	4b3c      	ldr	r3, [pc, #240]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dc5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	617b      	str	r3, [r7, #20]
 800dc62:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800dc64:	2380      	movs	r3, #128	@ 0x80
 800dc66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc6a:	2302      	movs	r3, #2
 800dc6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc70:	2300      	movs	r3, #0
 800dc72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dc76:	2300      	movs	r3, #0
 800dc78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dc7c:	2307      	movs	r3, #7
 800dc7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800dc82:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dc86:	4619      	mov	r1, r3
 800dc88:	4831      	ldr	r0, [pc, #196]	@ (800dd50 <HAL_UART_MspInit+0x180>)
 800dc8a:	f7f3 fe0d 	bl	80018a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800dc8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc96:	2302      	movs	r3, #2
 800dc98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dca2:	2300      	movs	r3, #0
 800dca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dca8:	2307      	movs	r3, #7
 800dcaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800dcae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	4827      	ldr	r0, [pc, #156]	@ (800dd54 <HAL_UART_MspInit+0x184>)
 800dcb6:	f7f3 fdf7 	bl	80018a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800dcba:	e040      	b.n	800dd3e <HAL_UART_MspInit+0x16e>
  else if(uartHandle->Instance==USART6)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a25      	ldr	r2, [pc, #148]	@ (800dd58 <HAL_UART_MspInit+0x188>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d13b      	bne.n	800dd3e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800dcc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dcca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800dccc:	2300      	movs	r3, #0
 800dcce:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dcd0:	f107 0320 	add.w	r3, r7, #32
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f7f7 fa97 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 800dce0:	f7fd fdb4 	bl	800b84c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800dce4:	4b19      	ldr	r3, [pc, #100]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dce8:	4a18      	ldr	r2, [pc, #96]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dcea:	f043 0320 	orr.w	r3, r3, #32
 800dcee:	6453      	str	r3, [r2, #68]	@ 0x44
 800dcf0:	4b16      	ldr	r3, [pc, #88]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dcf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcf4:	f003 0320 	and.w	r3, r3, #32
 800dcf8:	613b      	str	r3, [r7, #16]
 800dcfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800dcfc:	4b13      	ldr	r3, [pc, #76]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dcfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd00:	4a12      	ldr	r2, [pc, #72]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dd02:	f043 0304 	orr.w	r3, r3, #4
 800dd06:	6313      	str	r3, [r2, #48]	@ 0x30
 800dd08:	4b10      	ldr	r3, [pc, #64]	@ (800dd4c <HAL_UART_MspInit+0x17c>)
 800dd0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd0c:	f003 0304 	and.w	r3, r3, #4
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800dd14:	23c0      	movs	r3, #192	@ 0xc0
 800dd16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd20:	2300      	movs	r3, #0
 800dd22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd26:	2303      	movs	r3, #3
 800dd28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800dd2c:	2308      	movs	r3, #8
 800dd2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dd32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dd36:	4619      	mov	r1, r3
 800dd38:	4808      	ldr	r0, [pc, #32]	@ (800dd5c <HAL_UART_MspInit+0x18c>)
 800dd3a:	f7f3 fdb5 	bl	80018a8 <HAL_GPIO_Init>
}
 800dd3e:	bf00      	nop
 800dd40:	37b8      	adds	r7, #184	@ 0xb8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	40011000 	.word	0x40011000
 800dd4c:	40023800 	.word	0x40023800
 800dd50:	40020400 	.word	0x40020400
 800dd54:	40020000 	.word	0x40020000
 800dd58:	40011400 	.word	0x40011400
 800dd5c:	40020800 	.word	0x40020800

0800dd60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f103 0208 	add.w	r2, r3, #8
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f04f 32ff 	mov.w	r2, #4294967295
 800dd78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f103 0208 	add.w	r2, r3, #8
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f103 0208 	add.w	r2, r3, #8
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2200      	movs	r2, #0
 800dd92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd94:	bf00      	nop
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddae:	bf00      	nop
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b085      	sub	sp, #20
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	68fa      	ldr	r2, [r7, #12]
 800ddce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	689a      	ldr	r2, [r3, #8]
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	1c5a      	adds	r2, r3, #1
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	601a      	str	r2, [r3, #0]
}
 800ddf6:	bf00      	nop
 800ddf8:	3714      	adds	r7, #20
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr

0800de02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de02:	b480      	push	{r7}
 800de04:	b085      	sub	sp, #20
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de18:	d103      	bne.n	800de22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e00c      	b.n	800de3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	3308      	adds	r3, #8
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	e002      	b.n	800de30 <vListInsert+0x2e>
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	60fb      	str	r3, [r7, #12]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	68ba      	ldr	r2, [r7, #8]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d2f6      	bcs.n	800de2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	1c5a      	adds	r2, r3, #1
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	601a      	str	r2, [r3, #0]
}
 800de68:	bf00      	nop
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	6892      	ldr	r2, [r2, #8]
 800de8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	6852      	ldr	r2, [r2, #4]
 800de94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d103      	bne.n	800dea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	689a      	ldr	r2, [r3, #8]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	1e5a      	subs	r2, r3, #1
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
}
 800debc:	4618      	mov	r0, r3
 800debe:	3714      	adds	r7, #20
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10d      	bne.n	800def8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee0:	b672      	cpsid	i
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	b662      	cpsie	i
 800def0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800def2:	bf00      	nop
 800def4:	bf00      	nop
 800def6:	e7fd      	b.n	800def4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800def8:	f001 ffb8 	bl	800fe6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df04:	68f9      	ldr	r1, [r7, #12]
 800df06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df08:	fb01 f303 	mul.w	r3, r1, r3
 800df0c:	441a      	add	r2, r3
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2200      	movs	r2, #0
 800df16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df28:	3b01      	subs	r3, #1
 800df2a:	68f9      	ldr	r1, [r7, #12]
 800df2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df2e:	fb01 f303 	mul.w	r3, r1, r3
 800df32:	441a      	add	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	22ff      	movs	r2, #255	@ 0xff
 800df3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	22ff      	movs	r2, #255	@ 0xff
 800df44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d114      	bne.n	800df78 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d01a      	beq.n	800df8c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	3310      	adds	r3, #16
 800df5a:	4618      	mov	r0, r3
 800df5c:	f001 f9fa 	bl	800f354 <xTaskRemoveFromEventList>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d012      	beq.n	800df8c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df66:	4b0d      	ldr	r3, [pc, #52]	@ (800df9c <xQueueGenericReset+0xd4>)
 800df68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	e009      	b.n	800df8c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	3310      	adds	r3, #16
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff feef 	bl	800dd60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	3324      	adds	r3, #36	@ 0x24
 800df86:	4618      	mov	r0, r3
 800df88:	f7ff feea 	bl	800dd60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df8c:	f001 ffa4 	bl	800fed8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df90:	2301      	movs	r3, #1
}
 800df92:	4618      	mov	r0, r3
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	e000ed04 	.word	0xe000ed04

0800dfa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b08e      	sub	sp, #56	@ 0x38
 800dfa4:	af02      	add	r7, sp, #8
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	60b9      	str	r1, [r7, #8]
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10d      	bne.n	800dfd0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800dfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb8:	b672      	cpsid	i
 800dfba:	f383 8811 	msr	BASEPRI, r3
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f3bf 8f4f 	dsb	sy
 800dfc6:	b662      	cpsie	i
 800dfc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfca:	bf00      	nop
 800dfcc:	bf00      	nop
 800dfce:	e7fd      	b.n	800dfcc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10d      	bne.n	800dff2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfda:	b672      	cpsid	i
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	b662      	cpsie	i
 800dfea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dfec:	bf00      	nop
 800dfee:	bf00      	nop
 800dff0:	e7fd      	b.n	800dfee <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d002      	beq.n	800dffe <xQueueGenericCreateStatic+0x5e>
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <xQueueGenericCreateStatic+0x62>
 800dffe:	2301      	movs	r3, #1
 800e000:	e000      	b.n	800e004 <xQueueGenericCreateStatic+0x64>
 800e002:	2300      	movs	r3, #0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10d      	bne.n	800e024 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00c:	b672      	cpsid	i
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	b662      	cpsie	i
 800e01c:	623b      	str	r3, [r7, #32]
}
 800e01e:	bf00      	nop
 800e020:	bf00      	nop
 800e022:	e7fd      	b.n	800e020 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d102      	bne.n	800e030 <xQueueGenericCreateStatic+0x90>
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d101      	bne.n	800e034 <xQueueGenericCreateStatic+0x94>
 800e030:	2301      	movs	r3, #1
 800e032:	e000      	b.n	800e036 <xQueueGenericCreateStatic+0x96>
 800e034:	2300      	movs	r3, #0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d10d      	bne.n	800e056 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03e:	b672      	cpsid	i
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	b662      	cpsie	i
 800e04e:	61fb      	str	r3, [r7, #28]
}
 800e050:	bf00      	nop
 800e052:	bf00      	nop
 800e054:	e7fd      	b.n	800e052 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e056:	2348      	movs	r3, #72	@ 0x48
 800e058:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2b48      	cmp	r3, #72	@ 0x48
 800e05e:	d00d      	beq.n	800e07c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e064:	b672      	cpsid	i
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	b662      	cpsie	i
 800e074:	61bb      	str	r3, [r7, #24]
}
 800e076:	bf00      	nop
 800e078:	bf00      	nop
 800e07a:	e7fd      	b.n	800e078 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e07c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00d      	beq.n	800e0a4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e090:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	4613      	mov	r3, r2
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	68b9      	ldr	r1, [r7, #8]
 800e09e:	68f8      	ldr	r0, [r7, #12]
 800e0a0:	f000 f848 	bl	800e134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3730      	adds	r7, #48	@ 0x30
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b08a      	sub	sp, #40	@ 0x28
 800e0b2:	af02      	add	r7, sp, #8
 800e0b4:	60f8      	str	r0, [r7, #12]
 800e0b6:	60b9      	str	r1, [r7, #8]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10d      	bne.n	800e0de <xQueueGenericCreate+0x30>
	__asm volatile
 800e0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c6:	b672      	cpsid	i
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	b662      	cpsie	i
 800e0d6:	613b      	str	r3, [r7, #16]
}
 800e0d8:	bf00      	nop
 800e0da:	bf00      	nop
 800e0dc:	e7fd      	b.n	800e0da <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d102      	bne.n	800e0ea <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	61fb      	str	r3, [r7, #28]
 800e0e8:	e004      	b.n	800e0f4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	fb02 f303 	mul.w	r3, r2, r3
 800e0f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	3348      	adds	r3, #72	@ 0x48
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f001 ffe5 	bl	80100c8 <pvPortMalloc>
 800e0fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e100:	69bb      	ldr	r3, [r7, #24]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d011      	beq.n	800e12a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	3348      	adds	r3, #72	@ 0x48
 800e10e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	2200      	movs	r2, #0
 800e114:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e118:	79fa      	ldrb	r2, [r7, #7]
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	4613      	mov	r3, r2
 800e120:	697a      	ldr	r2, [r7, #20]
 800e122:	68b9      	ldr	r1, [r7, #8]
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f000 f805 	bl	800e134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e12a:	69bb      	ldr	r3, [r7, #24]
	}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3720      	adds	r7, #32
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
 800e140:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d103      	bne.n	800e150 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	69ba      	ldr	r2, [r7, #24]
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	e002      	b.n	800e156 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e162:	2101      	movs	r1, #1
 800e164:	69b8      	ldr	r0, [r7, #24]
 800e166:	f7ff feaf 	bl	800dec8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e16a:	bf00      	nop
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
	...

0800e174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b08e      	sub	sp, #56	@ 0x38
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
 800e180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e182:	2300      	movs	r3, #0
 800e184:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10d      	bne.n	800e1ac <xQueueGenericSend+0x38>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e194:	b672      	cpsid	i
 800e196:	f383 8811 	msr	BASEPRI, r3
 800e19a:	f3bf 8f6f 	isb	sy
 800e19e:	f3bf 8f4f 	dsb	sy
 800e1a2:	b662      	cpsie	i
 800e1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e1a6:	bf00      	nop
 800e1a8:	bf00      	nop
 800e1aa:	e7fd      	b.n	800e1a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d103      	bne.n	800e1ba <xQueueGenericSend+0x46>
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <xQueueGenericSend+0x4a>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e000      	b.n	800e1c0 <xQueueGenericSend+0x4c>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10d      	bne.n	800e1e0 <xQueueGenericSend+0x6c>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c8:	b672      	cpsid	i
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	b662      	cpsie	i
 800e1d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e1da:	bf00      	nop
 800e1dc:	bf00      	nop
 800e1de:	e7fd      	b.n	800e1dc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d103      	bne.n	800e1ee <xQueueGenericSend+0x7a>
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d101      	bne.n	800e1f2 <xQueueGenericSend+0x7e>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <xQueueGenericSend+0x80>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10d      	bne.n	800e214 <xQueueGenericSend+0xa0>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fc:	b672      	cpsid	i
 800e1fe:	f383 8811 	msr	BASEPRI, r3
 800e202:	f3bf 8f6f 	isb	sy
 800e206:	f3bf 8f4f 	dsb	sy
 800e20a:	b662      	cpsie	i
 800e20c:	623b      	str	r3, [r7, #32]
}
 800e20e:	bf00      	nop
 800e210:	bf00      	nop
 800e212:	e7fd      	b.n	800e210 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e214:	f001 fa68 	bl	800f6e8 <xTaskGetSchedulerState>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d102      	bne.n	800e224 <xQueueGenericSend+0xb0>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <xQueueGenericSend+0xb4>
 800e224:	2301      	movs	r3, #1
 800e226:	e000      	b.n	800e22a <xQueueGenericSend+0xb6>
 800e228:	2300      	movs	r3, #0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10d      	bne.n	800e24a <xQueueGenericSend+0xd6>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	b672      	cpsid	i
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	b662      	cpsie	i
 800e242:	61fb      	str	r3, [r7, #28]
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop
 800e248:	e7fd      	b.n	800e246 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e24a:	f001 fe0f 	bl	800fe6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e256:	429a      	cmp	r2, r3
 800e258:	d302      	bcc.n	800e260 <xQueueGenericSend+0xec>
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d129      	bne.n	800e2b4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e260:	683a      	ldr	r2, [r7, #0]
 800e262:	68b9      	ldr	r1, [r7, #8]
 800e264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e266:	f000 fae5 	bl	800e834 <prvCopyDataToQueue>
 800e26a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e270:	2b00      	cmp	r3, #0
 800e272:	d010      	beq.n	800e296 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e276:	3324      	adds	r3, #36	@ 0x24
 800e278:	4618      	mov	r0, r3
 800e27a:	f001 f86b 	bl	800f354 <xTaskRemoveFromEventList>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d013      	beq.n	800e2ac <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e284:	4b3f      	ldr	r3, [pc, #252]	@ (800e384 <xQueueGenericSend+0x210>)
 800e286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	f3bf 8f6f 	isb	sy
 800e294:	e00a      	b.n	800e2ac <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d007      	beq.n	800e2ac <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e29c:	4b39      	ldr	r3, [pc, #228]	@ (800e384 <xQueueGenericSend+0x210>)
 800e29e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2a2:	601a      	str	r2, [r3, #0]
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e2ac:	f001 fe14 	bl	800fed8 <vPortExitCritical>
				return pdPASS;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e063      	b.n	800e37c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d103      	bne.n	800e2c2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e2ba:	f001 fe0d 	bl	800fed8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e05c      	b.n	800e37c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d106      	bne.n	800e2d6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e2c8:	f107 0314 	add.w	r3, r7, #20
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f001 f8a7 	bl	800f420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2d6:	f001 fdff 	bl	800fed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2da:	f000 fe03 	bl	800eee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2de:	f001 fdc5 	bl	800fe6c <vPortEnterCritical>
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2e8:	b25b      	sxtb	r3, r3
 800e2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ee:	d103      	bne.n	800e2f8 <xQueueGenericSend+0x184>
 800e2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2fe:	b25b      	sxtb	r3, r3
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d103      	bne.n	800e30e <xQueueGenericSend+0x19a>
 800e306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e308:	2200      	movs	r2, #0
 800e30a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e30e:	f001 fde3 	bl	800fed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e312:	1d3a      	adds	r2, r7, #4
 800e314:	f107 0314 	add.w	r3, r7, #20
 800e318:	4611      	mov	r1, r2
 800e31a:	4618      	mov	r0, r3
 800e31c:	f001 f896 	bl	800f44c <xTaskCheckForTimeOut>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d124      	bne.n	800e370 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e326:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e328:	f000 fb7c 	bl	800ea24 <prvIsQueueFull>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d018      	beq.n	800e364 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e334:	3310      	adds	r3, #16
 800e336:	687a      	ldr	r2, [r7, #4]
 800e338:	4611      	mov	r1, r2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 ffe2 	bl	800f304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e342:	f000 fb07 	bl	800e954 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e346:	f000 fddb 	bl	800ef00 <xTaskResumeAll>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f47f af7c 	bne.w	800e24a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e352:	4b0c      	ldr	r3, [pc, #48]	@ (800e384 <xQueueGenericSend+0x210>)
 800e354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e358:	601a      	str	r2, [r3, #0]
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	e772      	b.n	800e24a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e366:	f000 faf5 	bl	800e954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e36a:	f000 fdc9 	bl	800ef00 <xTaskResumeAll>
 800e36e:	e76c      	b.n	800e24a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e372:	f000 faef 	bl	800e954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e376:	f000 fdc3 	bl	800ef00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e37a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3738      	adds	r7, #56	@ 0x38
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	e000ed04 	.word	0xe000ed04

0800e388 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b08e      	sub	sp, #56	@ 0x38
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10d      	bne.n	800e3bc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a4:	b672      	cpsid	i
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	b662      	cpsie	i
 800e3b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e3b6:	bf00      	nop
 800e3b8:	bf00      	nop
 800e3ba:	e7fd      	b.n	800e3b8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d103      	bne.n	800e3ca <xQueueGenericSendFromISR+0x42>
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <xQueueGenericSendFromISR+0x46>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e000      	b.n	800e3d0 <xQueueGenericSendFromISR+0x48>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10d      	bne.n	800e3f0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d8:	b672      	cpsid	i
 800e3da:	f383 8811 	msr	BASEPRI, r3
 800e3de:	f3bf 8f6f 	isb	sy
 800e3e2:	f3bf 8f4f 	dsb	sy
 800e3e6:	b662      	cpsie	i
 800e3e8:	623b      	str	r3, [r7, #32]
}
 800e3ea:	bf00      	nop
 800e3ec:	bf00      	nop
 800e3ee:	e7fd      	b.n	800e3ec <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b02      	cmp	r3, #2
 800e3f4:	d103      	bne.n	800e3fe <xQueueGenericSendFromISR+0x76>
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d101      	bne.n	800e402 <xQueueGenericSendFromISR+0x7a>
 800e3fe:	2301      	movs	r3, #1
 800e400:	e000      	b.n	800e404 <xQueueGenericSendFromISR+0x7c>
 800e402:	2300      	movs	r3, #0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10d      	bne.n	800e424 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40c:	b672      	cpsid	i
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	b662      	cpsie	i
 800e41c:	61fb      	str	r3, [r7, #28]
}
 800e41e:	bf00      	nop
 800e420:	bf00      	nop
 800e422:	e7fd      	b.n	800e420 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e424:	f001 fe0a 	bl	801003c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e428:	f3ef 8211 	mrs	r2, BASEPRI
 800e42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e430:	b672      	cpsid	i
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	b662      	cpsie	i
 800e440:	61ba      	str	r2, [r7, #24]
 800e442:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e444:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e446:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e450:	429a      	cmp	r2, r3
 800e452:	d302      	bcc.n	800e45a <xQueueGenericSendFromISR+0xd2>
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	2b02      	cmp	r3, #2
 800e458:	d12c      	bne.n	800e4b4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e45c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e460:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	68b9      	ldr	r1, [r7, #8]
 800e468:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e46a:	f000 f9e3 	bl	800e834 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e46e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e476:	d112      	bne.n	800e49e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d016      	beq.n	800e4ae <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e482:	3324      	adds	r3, #36	@ 0x24
 800e484:	4618      	mov	r0, r3
 800e486:	f000 ff65 	bl	800f354 <xTaskRemoveFromEventList>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d00e      	beq.n	800e4ae <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00b      	beq.n	800e4ae <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2201      	movs	r2, #1
 800e49a:	601a      	str	r2, [r3, #0]
 800e49c:	e007      	b.n	800e4ae <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e49e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	b25a      	sxtb	r2, r3
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e4b2:	e001      	b.n	800e4b8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e4c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e4c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3738      	adds	r7, #56	@ 0x38
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
	...

0800e4d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b08c      	sub	sp, #48	@ 0x30
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10d      	bne.n	800e506 <xQueueReceive+0x36>
	__asm volatile
 800e4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ee:	b672      	cpsid	i
 800e4f0:	f383 8811 	msr	BASEPRI, r3
 800e4f4:	f3bf 8f6f 	isb	sy
 800e4f8:	f3bf 8f4f 	dsb	sy
 800e4fc:	b662      	cpsie	i
 800e4fe:	623b      	str	r3, [r7, #32]
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	e7fd      	b.n	800e502 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d103      	bne.n	800e514 <xQueueReceive+0x44>
 800e50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <xQueueReceive+0x48>
 800e514:	2301      	movs	r3, #1
 800e516:	e000      	b.n	800e51a <xQueueReceive+0x4a>
 800e518:	2300      	movs	r3, #0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10d      	bne.n	800e53a <xQueueReceive+0x6a>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e522:	b672      	cpsid	i
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	b662      	cpsie	i
 800e532:	61fb      	str	r3, [r7, #28]
}
 800e534:	bf00      	nop
 800e536:	bf00      	nop
 800e538:	e7fd      	b.n	800e536 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e53a:	f001 f8d5 	bl	800f6e8 <xTaskGetSchedulerState>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d102      	bne.n	800e54a <xQueueReceive+0x7a>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d101      	bne.n	800e54e <xQueueReceive+0x7e>
 800e54a:	2301      	movs	r3, #1
 800e54c:	e000      	b.n	800e550 <xQueueReceive+0x80>
 800e54e:	2300      	movs	r3, #0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d10d      	bne.n	800e570 <xQueueReceive+0xa0>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e558:	b672      	cpsid	i
 800e55a:	f383 8811 	msr	BASEPRI, r3
 800e55e:	f3bf 8f6f 	isb	sy
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	b662      	cpsie	i
 800e568:	61bb      	str	r3, [r7, #24]
}
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	e7fd      	b.n	800e56c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e570:	f001 fc7c 	bl	800fe6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e578:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d01f      	beq.n	800e5c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e580:	68b9      	ldr	r1, [r7, #8]
 800e582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e584:	f000 f9c0 	bl	800e908 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e58a:	1e5a      	subs	r2, r3, #1
 800e58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e58e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e592:	691b      	ldr	r3, [r3, #16]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00f      	beq.n	800e5b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e59a:	3310      	adds	r3, #16
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 fed9 	bl	800f354 <xTaskRemoveFromEventList>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d007      	beq.n	800e5b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e5a8:	4b3c      	ldr	r3, [pc, #240]	@ (800e69c <xQueueReceive+0x1cc>)
 800e5aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5ae:	601a      	str	r2, [r3, #0]
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e5b8:	f001 fc8e 	bl	800fed8 <vPortExitCritical>
				return pdPASS;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e069      	b.n	800e694 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d103      	bne.n	800e5ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e5c6:	f001 fc87 	bl	800fed8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	e062      	b.n	800e694 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d106      	bne.n	800e5e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5d4:	f107 0310 	add.w	r3, r7, #16
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 ff21 	bl	800f420 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5e2:	f001 fc79 	bl	800fed8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5e6:	f000 fc7d 	bl	800eee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5ea:	f001 fc3f 	bl	800fe6c <vPortEnterCritical>
 800e5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5f4:	b25b      	sxtb	r3, r3
 800e5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5fa:	d103      	bne.n	800e604 <xQueueReceive+0x134>
 800e5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e60a:	b25b      	sxtb	r3, r3
 800e60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e610:	d103      	bne.n	800e61a <xQueueReceive+0x14a>
 800e612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e614:	2200      	movs	r2, #0
 800e616:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e61a:	f001 fc5d 	bl	800fed8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e61e:	1d3a      	adds	r2, r7, #4
 800e620:	f107 0310 	add.w	r3, r7, #16
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f000 ff10 	bl	800f44c <xTaskCheckForTimeOut>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d123      	bne.n	800e67a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e634:	f000 f9e0 	bl	800e9f8 <prvIsQueueEmpty>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d017      	beq.n	800e66e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e640:	3324      	adds	r3, #36	@ 0x24
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f000 fe5c 	bl	800f304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e64c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e64e:	f000 f981 	bl	800e954 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e652:	f000 fc55 	bl	800ef00 <xTaskResumeAll>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d189      	bne.n	800e570 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e65c:	4b0f      	ldr	r3, [pc, #60]	@ (800e69c <xQueueReceive+0x1cc>)
 800e65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	f3bf 8f4f 	dsb	sy
 800e668:	f3bf 8f6f 	isb	sy
 800e66c:	e780      	b.n	800e570 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e66e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e670:	f000 f970 	bl	800e954 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e674:	f000 fc44 	bl	800ef00 <xTaskResumeAll>
 800e678:	e77a      	b.n	800e570 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e67a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e67c:	f000 f96a 	bl	800e954 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e680:	f000 fc3e 	bl	800ef00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e686:	f000 f9b7 	bl	800e9f8 <prvIsQueueEmpty>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f43f af6f 	beq.w	800e570 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e692:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e694:	4618      	mov	r0, r3
 800e696:	3730      	adds	r7, #48	@ 0x30
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	e000ed04 	.word	0xe000ed04

0800e6a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b08e      	sub	sp, #56	@ 0x38
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	60f8      	str	r0, [r7, #12]
 800e6a8:	60b9      	str	r1, [r7, #8]
 800e6aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10d      	bne.n	800e6d2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ba:	b672      	cpsid	i
 800e6bc:	f383 8811 	msr	BASEPRI, r3
 800e6c0:	f3bf 8f6f 	isb	sy
 800e6c4:	f3bf 8f4f 	dsb	sy
 800e6c8:	b662      	cpsie	i
 800e6ca:	623b      	str	r3, [r7, #32]
}
 800e6cc:	bf00      	nop
 800e6ce:	bf00      	nop
 800e6d0:	e7fd      	b.n	800e6ce <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d103      	bne.n	800e6e0 <xQueueReceiveFromISR+0x40>
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <xQueueReceiveFromISR+0x44>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e000      	b.n	800e6e6 <xQueueReceiveFromISR+0x46>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d10d      	bne.n	800e706 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ee:	b672      	cpsid	i
 800e6f0:	f383 8811 	msr	BASEPRI, r3
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	b662      	cpsie	i
 800e6fe:	61fb      	str	r3, [r7, #28]
}
 800e700:	bf00      	nop
 800e702:	bf00      	nop
 800e704:	e7fd      	b.n	800e702 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e706:	f001 fc99 	bl	801003c <vPortValidateInterruptPriority>
	__asm volatile
 800e70a:	f3ef 8211 	mrs	r2, BASEPRI
 800e70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e712:	b672      	cpsid	i
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	b662      	cpsie	i
 800e722:	61ba      	str	r2, [r7, #24]
 800e724:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e726:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e728:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e72e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e732:	2b00      	cmp	r3, #0
 800e734:	d02f      	beq.n	800e796 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e73c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e740:	68b9      	ldr	r1, [r7, #8]
 800e742:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e744:	f000 f8e0 	bl	800e908 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74a:	1e5a      	subs	r2, r3, #1
 800e74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e74e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e750:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e758:	d112      	bne.n	800e780 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d016      	beq.n	800e790 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e764:	3310      	adds	r3, #16
 800e766:	4618      	mov	r0, r3
 800e768:	f000 fdf4 	bl	800f354 <xTaskRemoveFromEventList>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00e      	beq.n	800e790 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d00b      	beq.n	800e790 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2201      	movs	r2, #1
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	e007      	b.n	800e790 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e784:	3301      	adds	r3, #1
 800e786:	b2db      	uxtb	r3, r3
 800e788:	b25a      	sxtb	r2, r3
 800e78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e78c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e790:	2301      	movs	r3, #1
 800e792:	637b      	str	r3, [r7, #52]	@ 0x34
 800e794:	e001      	b.n	800e79a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e796:	2300      	movs	r3, #0
 800e798:	637b      	str	r3, [r7, #52]	@ 0x34
 800e79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	f383 8811 	msr	BASEPRI, r3
}
 800e7a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3738      	adds	r7, #56	@ 0x38
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10d      	bne.n	800e7da <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c2:	b672      	cpsid	i
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	b662      	cpsie	i
 800e7d2:	60bb      	str	r3, [r7, #8]
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop
 800e7d8:	e7fd      	b.n	800e7d6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800e7da:	f001 fb47 	bl	800fe6c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7e2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e7e4:	f001 fb78 	bl	800fed8 <vPortExitCritical>

	return uxReturn;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	b087      	sub	sp, #28
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10d      	bne.n	800e820 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e808:	b672      	cpsid	i
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	b662      	cpsie	i
 800e818:	60fb      	str	r3, [r7, #12]
}
 800e81a:	bf00      	nop
 800e81c:	bf00      	nop
 800e81e:	e7fd      	b.n	800e81c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e824:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e826:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e828:	4618      	mov	r0, r3
 800e82a:	371c      	adds	r7, #28
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e840:	2300      	movs	r3, #0
 800e842:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e848:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10d      	bne.n	800e86e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d14d      	bne.n	800e8f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	4618      	mov	r0, r3
 800e860:	f000 ff60 	bl	800f724 <xTaskPriorityDisinherit>
 800e864:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	609a      	str	r2, [r3, #8]
 800e86c:	e043      	b.n	800e8f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d119      	bne.n	800e8a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	6858      	ldr	r0, [r3, #4]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e87c:	461a      	mov	r2, r3
 800e87e:	68b9      	ldr	r1, [r7, #8]
 800e880:	f005 f82e 	bl	80138e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	685a      	ldr	r2, [r3, #4]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e88c:	441a      	add	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	685a      	ldr	r2, [r3, #4]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	689b      	ldr	r3, [r3, #8]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d32b      	bcc.n	800e8f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	605a      	str	r2, [r3, #4]
 800e8a6:	e026      	b.n	800e8f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	68d8      	ldr	r0, [r3, #12]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b0:	461a      	mov	r2, r3
 800e8b2:	68b9      	ldr	r1, [r7, #8]
 800e8b4:	f005 f814 	bl	80138e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	68da      	ldr	r2, [r3, #12]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8c0:	425b      	negs	r3, r3
 800e8c2:	441a      	add	r2, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	68da      	ldr	r2, [r3, #12]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d207      	bcs.n	800e8e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	689a      	ldr	r2, [r3, #8]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8dc:	425b      	negs	r3, r3
 800e8de:	441a      	add	r2, r3
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d105      	bne.n	800e8f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	3b01      	subs	r3, #1
 800e8f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e8fe:	697b      	ldr	r3, [r7, #20]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3718      	adds	r7, #24
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e916:	2b00      	cmp	r3, #0
 800e918:	d018      	beq.n	800e94c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68da      	ldr	r2, [r3, #12]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e922:	441a      	add	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68da      	ldr	r2, [r3, #12]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	429a      	cmp	r2, r3
 800e932:	d303      	bcc.n	800e93c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	68d9      	ldr	r1, [r3, #12]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e944:	461a      	mov	r2, r3
 800e946:	6838      	ldr	r0, [r7, #0]
 800e948:	f004 ffca 	bl	80138e0 <memcpy>
	}
}
 800e94c:	bf00      	nop
 800e94e:	3708      	adds	r7, #8
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e95c:	f001 fa86 	bl	800fe6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e966:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e968:	e011      	b.n	800e98e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d012      	beq.n	800e998 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	3324      	adds	r3, #36	@ 0x24
 800e976:	4618      	mov	r0, r3
 800e978:	f000 fcec 	bl	800f354 <xTaskRemoveFromEventList>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d001      	beq.n	800e986 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e982:	f000 fdcb 	bl	800f51c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e986:	7bfb      	ldrb	r3, [r7, #15]
 800e988:	3b01      	subs	r3, #1
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e992:	2b00      	cmp	r3, #0
 800e994:	dce9      	bgt.n	800e96a <prvUnlockQueue+0x16>
 800e996:	e000      	b.n	800e99a <prvUnlockQueue+0x46>
					break;
 800e998:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	22ff      	movs	r2, #255	@ 0xff
 800e99e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e9a2:	f001 fa99 	bl	800fed8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9a6:	f001 fa61 	bl	800fe6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9b2:	e011      	b.n	800e9d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d012      	beq.n	800e9e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	3310      	adds	r3, #16
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f000 fcc7 	bl	800f354 <xTaskRemoveFromEventList>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e9cc:	f000 fda6 	bl	800f51c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e9d0:	7bbb      	ldrb	r3, [r7, #14]
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e9d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dce9      	bgt.n	800e9b4 <prvUnlockQueue+0x60>
 800e9e0:	e000      	b.n	800e9e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e9e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	22ff      	movs	r2, #255	@ 0xff
 800e9e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e9ec:	f001 fa74 	bl	800fed8 <vPortExitCritical>
}
 800e9f0:	bf00      	nop
 800e9f2:	3710      	adds	r7, #16
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea00:	f001 fa34 	bl	800fe6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d102      	bne.n	800ea12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	60fb      	str	r3, [r7, #12]
 800ea10:	e001      	b.n	800ea16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea12:	2300      	movs	r3, #0
 800ea14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea16:	f001 fa5f 	bl	800fed8 <vPortExitCritical>

	return xReturn;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea2c:	f001 fa1e 	bl	800fe6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d102      	bne.n	800ea42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	60fb      	str	r3, [r7, #12]
 800ea40:	e001      	b.n	800ea46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ea42:	2300      	movs	r3, #0
 800ea44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea46:	f001 fa47 	bl	800fed8 <vPortExitCritical>

	return xReturn;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b08e      	sub	sp, #56	@ 0x38
 800ea58:	af04      	add	r7, sp, #16
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	607a      	str	r2, [r7, #4]
 800ea60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d10d      	bne.n	800ea84 <xTaskCreateStatic+0x30>
	__asm volatile
 800ea68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea6c:	b672      	cpsid	i
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	b662      	cpsie	i
 800ea7c:	623b      	str	r3, [r7, #32]
}
 800ea7e:	bf00      	nop
 800ea80:	bf00      	nop
 800ea82:	e7fd      	b.n	800ea80 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ea84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10d      	bne.n	800eaa6 <xTaskCreateStatic+0x52>
	__asm volatile
 800ea8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8e:	b672      	cpsid	i
 800ea90:	f383 8811 	msr	BASEPRI, r3
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	b662      	cpsie	i
 800ea9e:	61fb      	str	r3, [r7, #28]
}
 800eaa0:	bf00      	nop
 800eaa2:	bf00      	nop
 800eaa4:	e7fd      	b.n	800eaa2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eaa6:	2358      	movs	r3, #88	@ 0x58
 800eaa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	2b58      	cmp	r3, #88	@ 0x58
 800eaae:	d00d      	beq.n	800eacc <xTaskCreateStatic+0x78>
	__asm volatile
 800eab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab4:	b672      	cpsid	i
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	b662      	cpsie	i
 800eac4:	61bb      	str	r3, [r7, #24]
}
 800eac6:	bf00      	nop
 800eac8:	bf00      	nop
 800eaca:	e7fd      	b.n	800eac8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eacc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d01e      	beq.n	800eb12 <xTaskCreateStatic+0xbe>
 800ead4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d01b      	beq.n	800eb12 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800eada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eadc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800eade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eae2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae6:	2202      	movs	r2, #2
 800eae8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eaec:	2300      	movs	r3, #0
 800eaee:	9303      	str	r3, [sp, #12]
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf2:	9302      	str	r3, [sp, #8]
 800eaf4:	f107 0314 	add.w	r3, r7, #20
 800eaf8:	9301      	str	r3, [sp, #4]
 800eafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	68b9      	ldr	r1, [r7, #8]
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f000 f850 	bl	800ebaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb0c:	f000 f8e2 	bl	800ecd4 <prvAddNewTaskToReadyList>
 800eb10:	e001      	b.n	800eb16 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800eb12:	2300      	movs	r3, #0
 800eb14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eb16:	697b      	ldr	r3, [r7, #20]
	}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3728      	adds	r7, #40	@ 0x28
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08c      	sub	sp, #48	@ 0x30
 800eb24:	af04      	add	r7, sp, #16
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	603b      	str	r3, [r7, #0]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eb30:	88fb      	ldrh	r3, [r7, #6]
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4618      	mov	r0, r3
 800eb36:	f001 fac7 	bl	80100c8 <pvPortMalloc>
 800eb3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00e      	beq.n	800eb60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb42:	2058      	movs	r0, #88	@ 0x58
 800eb44:	f001 fac0 	bl	80100c8 <pvPortMalloc>
 800eb48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d003      	beq.n	800eb58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb56:	e005      	b.n	800eb64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb58:	6978      	ldr	r0, [r7, #20]
 800eb5a:	f001 fb87 	bl	801026c <vPortFree>
 800eb5e:	e001      	b.n	800eb64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb60:	2300      	movs	r3, #0
 800eb62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d017      	beq.n	800eb9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb72:	88fa      	ldrh	r2, [r7, #6]
 800eb74:	2300      	movs	r3, #0
 800eb76:	9303      	str	r3, [sp, #12]
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	9302      	str	r3, [sp, #8]
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	9301      	str	r3, [sp, #4]
 800eb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb82:	9300      	str	r3, [sp, #0]
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	68f8      	ldr	r0, [r7, #12]
 800eb8a:	f000 f80e 	bl	800ebaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb8e:	69f8      	ldr	r0, [r7, #28]
 800eb90:	f000 f8a0 	bl	800ecd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb94:	2301      	movs	r3, #1
 800eb96:	61bb      	str	r3, [r7, #24]
 800eb98:	e002      	b.n	800eba0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eba0:	69bb      	ldr	r3, [r7, #24]
	}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3720      	adds	r7, #32
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b088      	sub	sp, #32
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	60f8      	str	r0, [r7, #12]
 800ebb2:	60b9      	str	r1, [r7, #8]
 800ebb4:	607a      	str	r2, [r7, #4]
 800ebb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	21a5      	movs	r1, #165	@ 0xa5
 800ebc4:	f004 fe4e 	bl	8013864 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ebd2:	440b      	add	r3, r1
 800ebd4:	009b      	lsls	r3, r3, #2
 800ebd6:	4413      	add	r3, r2
 800ebd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	f023 0307 	bic.w	r3, r3, #7
 800ebe0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	f003 0307 	and.w	r3, r3, #7
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d00d      	beq.n	800ec08 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800ebec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf0:	b672      	cpsid	i
 800ebf2:	f383 8811 	msr	BASEPRI, r3
 800ebf6:	f3bf 8f6f 	isb	sy
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	b662      	cpsie	i
 800ec00:	617b      	str	r3, [r7, #20]
}
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	e7fd      	b.n	800ec04 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d01f      	beq.n	800ec4e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec0e:	2300      	movs	r3, #0
 800ec10:	61fb      	str	r3, [r7, #28]
 800ec12:	e012      	b.n	800ec3a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec14:	68ba      	ldr	r2, [r7, #8]
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	4413      	add	r3, r2
 800ec1a:	7819      	ldrb	r1, [r3, #0]
 800ec1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	4413      	add	r3, r2
 800ec22:	3334      	adds	r3, #52	@ 0x34
 800ec24:	460a      	mov	r2, r1
 800ec26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d006      	beq.n	800ec42 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	3301      	adds	r3, #1
 800ec38:	61fb      	str	r3, [r7, #28]
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	2b0f      	cmp	r3, #15
 800ec3e:	d9e9      	bls.n	800ec14 <prvInitialiseNewTask+0x6a>
 800ec40:	e000      	b.n	800ec44 <prvInitialiseNewTask+0x9a>
			{
				break;
 800ec42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec46:	2200      	movs	r2, #0
 800ec48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ec4c:	e003      	b.n	800ec56 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec58:	2b06      	cmp	r3, #6
 800ec5a:	d901      	bls.n	800ec60 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec5c:	2306      	movs	r3, #6
 800ec5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec64:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec6a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec6e:	2200      	movs	r2, #0
 800ec70:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec74:	3304      	adds	r3, #4
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff f892 	bl	800dda0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7e:	3318      	adds	r3, #24
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff f88d 	bl	800dda0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8e:	f1c3 0207 	rsb	r2, r3, #7
 800ec92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec9a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec9e:	2200      	movs	r2, #0
 800eca0:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca4:	2200      	movs	r2, #0
 800eca6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ecb0:	683a      	ldr	r2, [r7, #0]
 800ecb2:	68f9      	ldr	r1, [r7, #12]
 800ecb4:	69b8      	ldr	r0, [r7, #24]
 800ecb6:	f000 ffc7 	bl	800fc48 <pxPortInitialiseStack>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eccc:	bf00      	nop
 800ecce:	3720      	adds	r7, #32
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ecdc:	f001 f8c6 	bl	800fe6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ece0:	4b2a      	ldr	r3, [pc, #168]	@ (800ed8c <prvAddNewTaskToReadyList+0xb8>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	3301      	adds	r3, #1
 800ece6:	4a29      	ldr	r2, [pc, #164]	@ (800ed8c <prvAddNewTaskToReadyList+0xb8>)
 800ece8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ecea:	4b29      	ldr	r3, [pc, #164]	@ (800ed90 <prvAddNewTaskToReadyList+0xbc>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d109      	bne.n	800ed06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ecf2:	4a27      	ldr	r2, [pc, #156]	@ (800ed90 <prvAddNewTaskToReadyList+0xbc>)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ecf8:	4b24      	ldr	r3, [pc, #144]	@ (800ed8c <prvAddNewTaskToReadyList+0xb8>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d110      	bne.n	800ed22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ed00:	f000 fc32 	bl	800f568 <prvInitialiseTaskLists>
 800ed04:	e00d      	b.n	800ed22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ed06:	4b23      	ldr	r3, [pc, #140]	@ (800ed94 <prvAddNewTaskToReadyList+0xc0>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d109      	bne.n	800ed22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ed0e:	4b20      	ldr	r3, [pc, #128]	@ (800ed90 <prvAddNewTaskToReadyList+0xbc>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d802      	bhi.n	800ed22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed1c:	4a1c      	ldr	r2, [pc, #112]	@ (800ed90 <prvAddNewTaskToReadyList+0xbc>)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed22:	4b1d      	ldr	r3, [pc, #116]	@ (800ed98 <prvAddNewTaskToReadyList+0xc4>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	3301      	adds	r3, #1
 800ed28:	4a1b      	ldr	r2, [pc, #108]	@ (800ed98 <prvAddNewTaskToReadyList+0xc4>)
 800ed2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed30:	2201      	movs	r2, #1
 800ed32:	409a      	lsls	r2, r3
 800ed34:	4b19      	ldr	r3, [pc, #100]	@ (800ed9c <prvAddNewTaskToReadyList+0xc8>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4313      	orrs	r3, r2
 800ed3a:	4a18      	ldr	r2, [pc, #96]	@ (800ed9c <prvAddNewTaskToReadyList+0xc8>)
 800ed3c:	6013      	str	r3, [r2, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed42:	4613      	mov	r3, r2
 800ed44:	009b      	lsls	r3, r3, #2
 800ed46:	4413      	add	r3, r2
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	4a15      	ldr	r2, [pc, #84]	@ (800eda0 <prvAddNewTaskToReadyList+0xcc>)
 800ed4c:	441a      	add	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	3304      	adds	r3, #4
 800ed52:	4619      	mov	r1, r3
 800ed54:	4610      	mov	r0, r2
 800ed56:	f7ff f830 	bl	800ddba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed5a:	f001 f8bd 	bl	800fed8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed94 <prvAddNewTaskToReadyList+0xc0>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d00e      	beq.n	800ed84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed66:	4b0a      	ldr	r3, [pc, #40]	@ (800ed90 <prvAddNewTaskToReadyList+0xbc>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d207      	bcs.n	800ed84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed74:	4b0b      	ldr	r3, [pc, #44]	@ (800eda4 <prvAddNewTaskToReadyList+0xd0>)
 800ed76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed7a:	601a      	str	r2, [r3, #0]
 800ed7c:	f3bf 8f4f 	dsb	sy
 800ed80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed84:	bf00      	nop
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	20001084 	.word	0x20001084
 800ed90:	20000f84 	.word	0x20000f84
 800ed94:	20001090 	.word	0x20001090
 800ed98:	200010a0 	.word	0x200010a0
 800ed9c:	2000108c 	.word	0x2000108c
 800eda0:	20000f88 	.word	0x20000f88
 800eda4:	e000ed04 	.word	0xe000ed04

0800eda8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800edb0:	2300      	movs	r3, #0
 800edb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01a      	beq.n	800edf0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800edba:	4b15      	ldr	r3, [pc, #84]	@ (800ee10 <vTaskDelay+0x68>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00d      	beq.n	800edde <vTaskDelay+0x36>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edc6:	b672      	cpsid	i
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	b662      	cpsie	i
 800edd6:	60bb      	str	r3, [r7, #8]
}
 800edd8:	bf00      	nop
 800edda:	bf00      	nop
 800eddc:	e7fd      	b.n	800edda <vTaskDelay+0x32>
			vTaskSuspendAll();
 800edde:	f000 f881 	bl	800eee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ede2:	2100      	movs	r1, #0
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f000 fd29 	bl	800f83c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800edea:	f000 f889 	bl	800ef00 <xTaskResumeAll>
 800edee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d107      	bne.n	800ee06 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800edf6:	4b07      	ldr	r3, [pc, #28]	@ (800ee14 <vTaskDelay+0x6c>)
 800edf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edfc:	601a      	str	r2, [r3, #0]
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee06:	bf00      	nop
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	200010ac 	.word	0x200010ac
 800ee14:	e000ed04 	.word	0xe000ed04

0800ee18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08a      	sub	sp, #40	@ 0x28
 800ee1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee22:	2300      	movs	r3, #0
 800ee24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee26:	463a      	mov	r2, r7
 800ee28:	1d39      	adds	r1, r7, #4
 800ee2a:	f107 0308 	add.w	r3, r7, #8
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fc fba4 	bl	800b57c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68ba      	ldr	r2, [r7, #8]
 800ee3a:	9202      	str	r2, [sp, #8]
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	2300      	movs	r3, #0
 800ee44:	460a      	mov	r2, r1
 800ee46:	4921      	ldr	r1, [pc, #132]	@ (800eecc <vTaskStartScheduler+0xb4>)
 800ee48:	4821      	ldr	r0, [pc, #132]	@ (800eed0 <vTaskStartScheduler+0xb8>)
 800ee4a:	f7ff fe03 	bl	800ea54 <xTaskCreateStatic>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	4a20      	ldr	r2, [pc, #128]	@ (800eed4 <vTaskStartScheduler+0xbc>)
 800ee52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee54:	4b1f      	ldr	r3, [pc, #124]	@ (800eed4 <vTaskStartScheduler+0xbc>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d002      	beq.n	800ee62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	617b      	str	r3, [r7, #20]
 800ee60:	e001      	b.n	800ee66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee62:	2300      	movs	r3, #0
 800ee64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d118      	bne.n	800ee9e <vTaskStartScheduler+0x86>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee70:	b672      	cpsid	i
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	b662      	cpsie	i
 800ee80:	613b      	str	r3, [r7, #16]
}
 800ee82:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee84:	4b14      	ldr	r3, [pc, #80]	@ (800eed8 <vTaskStartScheduler+0xc0>)
 800ee86:	f04f 32ff 	mov.w	r2, #4294967295
 800ee8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee8c:	4b13      	ldr	r3, [pc, #76]	@ (800eedc <vTaskStartScheduler+0xc4>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee92:	4b13      	ldr	r3, [pc, #76]	@ (800eee0 <vTaskStartScheduler+0xc8>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee98:	f000 ff6a 	bl	800fd70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee9c:	e011      	b.n	800eec2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea4:	d10d      	bne.n	800eec2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800eea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeaa:	b672      	cpsid	i
 800eeac:	f383 8811 	msr	BASEPRI, r3
 800eeb0:	f3bf 8f6f 	isb	sy
 800eeb4:	f3bf 8f4f 	dsb	sy
 800eeb8:	b662      	cpsie	i
 800eeba:	60fb      	str	r3, [r7, #12]
}
 800eebc:	bf00      	nop
 800eebe:	bf00      	nop
 800eec0:	e7fd      	b.n	800eebe <vTaskStartScheduler+0xa6>
}
 800eec2:	bf00      	nop
 800eec4:	3718      	adds	r7, #24
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	080139ec 	.word	0x080139ec
 800eed0:	0800f535 	.word	0x0800f535
 800eed4:	200010a8 	.word	0x200010a8
 800eed8:	200010a4 	.word	0x200010a4
 800eedc:	20001090 	.word	0x20001090
 800eee0:	20001088 	.word	0x20001088

0800eee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eee4:	b480      	push	{r7}
 800eee6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800eee8:	4b04      	ldr	r3, [pc, #16]	@ (800eefc <vTaskSuspendAll+0x18>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	3301      	adds	r3, #1
 800eeee:	4a03      	ldr	r2, [pc, #12]	@ (800eefc <vTaskSuspendAll+0x18>)
 800eef0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800eef2:	bf00      	nop
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	200010ac 	.word	0x200010ac

0800ef00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ef0e:	4b43      	ldr	r3, [pc, #268]	@ (800f01c <xTaskResumeAll+0x11c>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d10d      	bne.n	800ef32 <xTaskResumeAll+0x32>
	__asm volatile
 800ef16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef1a:	b672      	cpsid	i
 800ef1c:	f383 8811 	msr	BASEPRI, r3
 800ef20:	f3bf 8f6f 	isb	sy
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	b662      	cpsie	i
 800ef2a:	603b      	str	r3, [r7, #0]
}
 800ef2c:	bf00      	nop
 800ef2e:	bf00      	nop
 800ef30:	e7fd      	b.n	800ef2e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef32:	f000 ff9b 	bl	800fe6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef36:	4b39      	ldr	r3, [pc, #228]	@ (800f01c <xTaskResumeAll+0x11c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	4a37      	ldr	r2, [pc, #220]	@ (800f01c <xTaskResumeAll+0x11c>)
 800ef3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef40:	4b36      	ldr	r3, [pc, #216]	@ (800f01c <xTaskResumeAll+0x11c>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d161      	bne.n	800f00c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef48:	4b35      	ldr	r3, [pc, #212]	@ (800f020 <xTaskResumeAll+0x120>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d05d      	beq.n	800f00c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef50:	e02e      	b.n	800efb0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef52:	4b34      	ldr	r3, [pc, #208]	@ (800f024 <xTaskResumeAll+0x124>)
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	3318      	adds	r3, #24
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe ff88 	bl	800de74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	3304      	adds	r3, #4
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f7fe ff83 	bl	800de74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef72:	2201      	movs	r2, #1
 800ef74:	409a      	lsls	r2, r3
 800ef76:	4b2c      	ldr	r3, [pc, #176]	@ (800f028 <xTaskResumeAll+0x128>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	4a2a      	ldr	r2, [pc, #168]	@ (800f028 <xTaskResumeAll+0x128>)
 800ef7e:	6013      	str	r3, [r2, #0]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef84:	4613      	mov	r3, r2
 800ef86:	009b      	lsls	r3, r3, #2
 800ef88:	4413      	add	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4a27      	ldr	r2, [pc, #156]	@ (800f02c <xTaskResumeAll+0x12c>)
 800ef8e:	441a      	add	r2, r3
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	3304      	adds	r3, #4
 800ef94:	4619      	mov	r1, r3
 800ef96:	4610      	mov	r0, r2
 800ef98:	f7fe ff0f 	bl	800ddba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efa0:	4b23      	ldr	r3, [pc, #140]	@ (800f030 <xTaskResumeAll+0x130>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d302      	bcc.n	800efb0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800efaa:	4b22      	ldr	r3, [pc, #136]	@ (800f034 <xTaskResumeAll+0x134>)
 800efac:	2201      	movs	r2, #1
 800efae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800efb0:	4b1c      	ldr	r3, [pc, #112]	@ (800f024 <xTaskResumeAll+0x124>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1cc      	bne.n	800ef52 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d001      	beq.n	800efc2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800efbe:	f000 fb73 	bl	800f6a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800efc2:	4b1d      	ldr	r3, [pc, #116]	@ (800f038 <xTaskResumeAll+0x138>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d010      	beq.n	800eff0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800efce:	f000 f859 	bl	800f084 <xTaskIncrementTick>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800efd8:	4b16      	ldr	r3, [pc, #88]	@ (800f034 <xTaskResumeAll+0x134>)
 800efda:	2201      	movs	r2, #1
 800efdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	3b01      	subs	r3, #1
 800efe2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1f1      	bne.n	800efce <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800efea:	4b13      	ldr	r3, [pc, #76]	@ (800f038 <xTaskResumeAll+0x138>)
 800efec:	2200      	movs	r2, #0
 800efee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eff0:	4b10      	ldr	r3, [pc, #64]	@ (800f034 <xTaskResumeAll+0x134>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d009      	beq.n	800f00c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eff8:	2301      	movs	r3, #1
 800effa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800effc:	4b0f      	ldr	r3, [pc, #60]	@ (800f03c <xTaskResumeAll+0x13c>)
 800effe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f00c:	f000 ff64 	bl	800fed8 <vPortExitCritical>

	return xAlreadyYielded;
 800f010:	68bb      	ldr	r3, [r7, #8]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}
 800f01a:	bf00      	nop
 800f01c:	200010ac 	.word	0x200010ac
 800f020:	20001084 	.word	0x20001084
 800f024:	20001044 	.word	0x20001044
 800f028:	2000108c 	.word	0x2000108c
 800f02c:	20000f88 	.word	0x20000f88
 800f030:	20000f84 	.word	0x20000f84
 800f034:	20001098 	.word	0x20001098
 800f038:	20001094 	.word	0x20001094
 800f03c:	e000ed04 	.word	0xe000ed04

0800f040 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f046:	4b05      	ldr	r3, [pc, #20]	@ (800f05c <xTaskGetTickCount+0x1c>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f04c:	687b      	ldr	r3, [r7, #4]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	370c      	adds	r7, #12
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	20001088 	.word	0x20001088

0800f060 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f066:	f000 ffe9 	bl	801003c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f06a:	2300      	movs	r3, #0
 800f06c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f06e:	4b04      	ldr	r3, [pc, #16]	@ (800f080 <xTaskGetTickCountFromISR+0x20>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f074:	683b      	ldr	r3, [r7, #0]
}
 800f076:	4618      	mov	r0, r3
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	20001088 	.word	0x20001088

0800f084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b086      	sub	sp, #24
 800f088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f08a:	2300      	movs	r3, #0
 800f08c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f08e:	4b50      	ldr	r3, [pc, #320]	@ (800f1d0 <xTaskIncrementTick+0x14c>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	f040 808b 	bne.w	800f1ae <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f098:	4b4e      	ldr	r3, [pc, #312]	@ (800f1d4 <xTaskIncrementTick+0x150>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3301      	adds	r3, #1
 800f09e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f0a0:	4a4c      	ldr	r2, [pc, #304]	@ (800f1d4 <xTaskIncrementTick+0x150>)
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d123      	bne.n	800f0f4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f0ac:	4b4a      	ldr	r3, [pc, #296]	@ (800f1d8 <xTaskIncrementTick+0x154>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00d      	beq.n	800f0d2 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ba:	b672      	cpsid	i
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	b662      	cpsie	i
 800f0ca:	603b      	str	r3, [r7, #0]
}
 800f0cc:	bf00      	nop
 800f0ce:	bf00      	nop
 800f0d0:	e7fd      	b.n	800f0ce <xTaskIncrementTick+0x4a>
 800f0d2:	4b41      	ldr	r3, [pc, #260]	@ (800f1d8 <xTaskIncrementTick+0x154>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	60fb      	str	r3, [r7, #12]
 800f0d8:	4b40      	ldr	r3, [pc, #256]	@ (800f1dc <xTaskIncrementTick+0x158>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	4a3e      	ldr	r2, [pc, #248]	@ (800f1d8 <xTaskIncrementTick+0x154>)
 800f0de:	6013      	str	r3, [r2, #0]
 800f0e0:	4a3e      	ldr	r2, [pc, #248]	@ (800f1dc <xTaskIncrementTick+0x158>)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	4b3e      	ldr	r3, [pc, #248]	@ (800f1e0 <xTaskIncrementTick+0x15c>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	4a3c      	ldr	r2, [pc, #240]	@ (800f1e0 <xTaskIncrementTick+0x15c>)
 800f0ee:	6013      	str	r3, [r2, #0]
 800f0f0:	f000 fada 	bl	800f6a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f0f4:	4b3b      	ldr	r3, [pc, #236]	@ (800f1e4 <xTaskIncrementTick+0x160>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	693a      	ldr	r2, [r7, #16]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d348      	bcc.n	800f190 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f0fe:	4b36      	ldr	r3, [pc, #216]	@ (800f1d8 <xTaskIncrementTick+0x154>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d104      	bne.n	800f112 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f108:	4b36      	ldr	r3, [pc, #216]	@ (800f1e4 <xTaskIncrementTick+0x160>)
 800f10a:	f04f 32ff 	mov.w	r2, #4294967295
 800f10e:	601a      	str	r2, [r3, #0]
					break;
 800f110:	e03e      	b.n	800f190 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f112:	4b31      	ldr	r3, [pc, #196]	@ (800f1d8 <xTaskIncrementTick+0x154>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	68db      	ldr	r3, [r3, #12]
 800f11a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f122:	693a      	ldr	r2, [r7, #16]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	429a      	cmp	r2, r3
 800f128:	d203      	bcs.n	800f132 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f12a:	4a2e      	ldr	r2, [pc, #184]	@ (800f1e4 <xTaskIncrementTick+0x160>)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f130:	e02e      	b.n	800f190 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	3304      	adds	r3, #4
 800f136:	4618      	mov	r0, r3
 800f138:	f7fe fe9c 	bl	800de74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f140:	2b00      	cmp	r3, #0
 800f142:	d004      	beq.n	800f14e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	3318      	adds	r3, #24
 800f148:	4618      	mov	r0, r3
 800f14a:	f7fe fe93 	bl	800de74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f152:	2201      	movs	r2, #1
 800f154:	409a      	lsls	r2, r3
 800f156:	4b24      	ldr	r3, [pc, #144]	@ (800f1e8 <xTaskIncrementTick+0x164>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4313      	orrs	r3, r2
 800f15c:	4a22      	ldr	r2, [pc, #136]	@ (800f1e8 <xTaskIncrementTick+0x164>)
 800f15e:	6013      	str	r3, [r2, #0]
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f164:	4613      	mov	r3, r2
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	4413      	add	r3, r2
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	4a1f      	ldr	r2, [pc, #124]	@ (800f1ec <xTaskIncrementTick+0x168>)
 800f16e:	441a      	add	r2, r3
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	3304      	adds	r3, #4
 800f174:	4619      	mov	r1, r3
 800f176:	4610      	mov	r0, r2
 800f178:	f7fe fe1f 	bl	800ddba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f180:	4b1b      	ldr	r3, [pc, #108]	@ (800f1f0 <xTaskIncrementTick+0x16c>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f186:	429a      	cmp	r2, r3
 800f188:	d3b9      	bcc.n	800f0fe <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f18a:	2301      	movs	r3, #1
 800f18c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f18e:	e7b6      	b.n	800f0fe <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f190:	4b17      	ldr	r3, [pc, #92]	@ (800f1f0 <xTaskIncrementTick+0x16c>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f196:	4915      	ldr	r1, [pc, #84]	@ (800f1ec <xTaskIncrementTick+0x168>)
 800f198:	4613      	mov	r3, r2
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	4413      	add	r3, r2
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	440b      	add	r3, r1
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d907      	bls.n	800f1b8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	617b      	str	r3, [r7, #20]
 800f1ac:	e004      	b.n	800f1b8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f1ae:	4b11      	ldr	r3, [pc, #68]	@ (800f1f4 <xTaskIncrementTick+0x170>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	4a0f      	ldr	r2, [pc, #60]	@ (800f1f4 <xTaskIncrementTick+0x170>)
 800f1b6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f1b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f1f8 <xTaskIncrementTick+0x174>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d001      	beq.n	800f1c4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f1c4:	697b      	ldr	r3, [r7, #20]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3718      	adds	r7, #24
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	200010ac 	.word	0x200010ac
 800f1d4:	20001088 	.word	0x20001088
 800f1d8:	2000103c 	.word	0x2000103c
 800f1dc:	20001040 	.word	0x20001040
 800f1e0:	2000109c 	.word	0x2000109c
 800f1e4:	200010a4 	.word	0x200010a4
 800f1e8:	2000108c 	.word	0x2000108c
 800f1ec:	20000f88 	.word	0x20000f88
 800f1f0:	20000f84 	.word	0x20000f84
 800f1f4:	20001094 	.word	0x20001094
 800f1f8:	20001098 	.word	0x20001098

0800f1fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b088      	sub	sp, #32
 800f200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f202:	4b3b      	ldr	r3, [pc, #236]	@ (800f2f0 <vTaskSwitchContext+0xf4>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d003      	beq.n	800f212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f20a:	4b3a      	ldr	r3, [pc, #232]	@ (800f2f4 <vTaskSwitchContext+0xf8>)
 800f20c:	2201      	movs	r2, #1
 800f20e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f210:	e069      	b.n	800f2e6 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 800f212:	4b38      	ldr	r3, [pc, #224]	@ (800f2f4 <vTaskSwitchContext+0xf8>)
 800f214:	2200      	movs	r2, #0
 800f216:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f218:	4b37      	ldr	r3, [pc, #220]	@ (800f2f8 <vTaskSwitchContext+0xfc>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f21e:	61fb      	str	r3, [r7, #28]
 800f220:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f224:	61bb      	str	r3, [r7, #24]
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	69ba      	ldr	r2, [r7, #24]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d111      	bne.n	800f254 <vTaskSwitchContext+0x58>
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	3304      	adds	r3, #4
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	69ba      	ldr	r2, [r7, #24]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d10b      	bne.n	800f254 <vTaskSwitchContext+0x58>
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	3308      	adds	r3, #8
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	69ba      	ldr	r2, [r7, #24]
 800f244:	429a      	cmp	r2, r3
 800f246:	d105      	bne.n	800f254 <vTaskSwitchContext+0x58>
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	330c      	adds	r3, #12
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69ba      	ldr	r2, [r7, #24]
 800f250:	429a      	cmp	r2, r3
 800f252:	d008      	beq.n	800f266 <vTaskSwitchContext+0x6a>
 800f254:	4b28      	ldr	r3, [pc, #160]	@ (800f2f8 <vTaskSwitchContext+0xfc>)
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	4b27      	ldr	r3, [pc, #156]	@ (800f2f8 <vTaskSwitchContext+0xfc>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	3334      	adds	r3, #52	@ 0x34
 800f25e:	4619      	mov	r1, r3
 800f260:	4610      	mov	r0, r2
 800f262:	f7fc f978 	bl	800b556 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f266:	4b25      	ldr	r3, [pc, #148]	@ (800f2fc <vTaskSwitchContext+0x100>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	fab3 f383 	clz	r3, r3
 800f272:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f274:	7afb      	ldrb	r3, [r7, #11]
 800f276:	f1c3 031f 	rsb	r3, r3, #31
 800f27a:	617b      	str	r3, [r7, #20]
 800f27c:	4920      	ldr	r1, [pc, #128]	@ (800f300 <vTaskSwitchContext+0x104>)
 800f27e:	697a      	ldr	r2, [r7, #20]
 800f280:	4613      	mov	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	4413      	add	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	440b      	add	r3, r1
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d10d      	bne.n	800f2ac <vTaskSwitchContext+0xb0>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f294:	b672      	cpsid	i
 800f296:	f383 8811 	msr	BASEPRI, r3
 800f29a:	f3bf 8f6f 	isb	sy
 800f29e:	f3bf 8f4f 	dsb	sy
 800f2a2:	b662      	cpsie	i
 800f2a4:	607b      	str	r3, [r7, #4]
}
 800f2a6:	bf00      	nop
 800f2a8:	bf00      	nop
 800f2aa:	e7fd      	b.n	800f2a8 <vTaskSwitchContext+0xac>
 800f2ac:	697a      	ldr	r2, [r7, #20]
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	4413      	add	r3, r2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	4a12      	ldr	r2, [pc, #72]	@ (800f300 <vTaskSwitchContext+0x104>)
 800f2b8:	4413      	add	r3, r2
 800f2ba:	613b      	str	r3, [r7, #16]
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	685a      	ldr	r2, [r3, #4]
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	605a      	str	r2, [r3, #4]
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	685a      	ldr	r2, [r3, #4]
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	3308      	adds	r3, #8
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d104      	bne.n	800f2dc <vTaskSwitchContext+0xe0>
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	685a      	ldr	r2, [r3, #4]
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	605a      	str	r2, [r3, #4]
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	4a05      	ldr	r2, [pc, #20]	@ (800f2f8 <vTaskSwitchContext+0xfc>)
 800f2e4:	6013      	str	r3, [r2, #0]
}
 800f2e6:	bf00      	nop
 800f2e8:	3720      	adds	r7, #32
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	200010ac 	.word	0x200010ac
 800f2f4:	20001098 	.word	0x20001098
 800f2f8:	20000f84 	.word	0x20000f84
 800f2fc:	2000108c 	.word	0x2000108c
 800f300:	20000f88 	.word	0x20000f88

0800f304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10d      	bne.n	800f330 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f318:	b672      	cpsid	i
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	b662      	cpsie	i
 800f328:	60fb      	str	r3, [r7, #12]
}
 800f32a:	bf00      	nop
 800f32c:	bf00      	nop
 800f32e:	e7fd      	b.n	800f32c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f330:	4b07      	ldr	r3, [pc, #28]	@ (800f350 <vTaskPlaceOnEventList+0x4c>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	3318      	adds	r3, #24
 800f336:	4619      	mov	r1, r3
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f7fe fd62 	bl	800de02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f33e:	2101      	movs	r1, #1
 800f340:	6838      	ldr	r0, [r7, #0]
 800f342:	f000 fa7b 	bl	800f83c <prvAddCurrentTaskToDelayedList>
}
 800f346:	bf00      	nop
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	20000f84 	.word	0x20000f84

0800f354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b086      	sub	sp, #24
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d10d      	bne.n	800f386 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36e:	b672      	cpsid	i
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	b662      	cpsie	i
 800f37e:	60fb      	str	r3, [r7, #12]
}
 800f380:	bf00      	nop
 800f382:	bf00      	nop
 800f384:	e7fd      	b.n	800f382 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	3318      	adds	r3, #24
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe fd72 	bl	800de74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f390:	4b1d      	ldr	r3, [pc, #116]	@ (800f408 <xTaskRemoveFromEventList+0xb4>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d11c      	bne.n	800f3d2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	3304      	adds	r3, #4
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fe fd69 	bl	800de74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	409a      	lsls	r2, r3
 800f3aa:	4b18      	ldr	r3, [pc, #96]	@ (800f40c <xTaskRemoveFromEventList+0xb8>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	4a16      	ldr	r2, [pc, #88]	@ (800f40c <xTaskRemoveFromEventList+0xb8>)
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	4413      	add	r3, r2
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	4a13      	ldr	r2, [pc, #76]	@ (800f410 <xTaskRemoveFromEventList+0xbc>)
 800f3c2:	441a      	add	r2, r3
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	4610      	mov	r0, r2
 800f3cc:	f7fe fcf5 	bl	800ddba <vListInsertEnd>
 800f3d0:	e005      	b.n	800f3de <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	3318      	adds	r3, #24
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	480e      	ldr	r0, [pc, #56]	@ (800f414 <xTaskRemoveFromEventList+0xc0>)
 800f3da:	f7fe fcee 	bl	800ddba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f418 <xTaskRemoveFromEventList+0xc4>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d905      	bls.n	800f3f8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f3f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f41c <xTaskRemoveFromEventList+0xc8>)
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	601a      	str	r2, [r3, #0]
 800f3f6:	e001      	b.n	800f3fc <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3fc:	697b      	ldr	r3, [r7, #20]
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3718      	adds	r7, #24
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	200010ac 	.word	0x200010ac
 800f40c:	2000108c 	.word	0x2000108c
 800f410:	20000f88 	.word	0x20000f88
 800f414:	20001044 	.word	0x20001044
 800f418:	20000f84 	.word	0x20000f84
 800f41c:	20001098 	.word	0x20001098

0800f420 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f428:	4b06      	ldr	r3, [pc, #24]	@ (800f444 <vTaskInternalSetTimeOutState+0x24>)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f430:	4b05      	ldr	r3, [pc, #20]	@ (800f448 <vTaskInternalSetTimeOutState+0x28>)
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	605a      	str	r2, [r3, #4]
}
 800f438:	bf00      	nop
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr
 800f444:	2000109c 	.word	0x2000109c
 800f448:	20001088 	.word	0x20001088

0800f44c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b088      	sub	sp, #32
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d10d      	bne.n	800f478 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f460:	b672      	cpsid	i
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	b662      	cpsie	i
 800f470:	613b      	str	r3, [r7, #16]
}
 800f472:	bf00      	nop
 800f474:	bf00      	nop
 800f476:	e7fd      	b.n	800f474 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10d      	bne.n	800f49a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f482:	b672      	cpsid	i
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	b662      	cpsie	i
 800f492:	60fb      	str	r3, [r7, #12]
}
 800f494:	bf00      	nop
 800f496:	bf00      	nop
 800f498:	e7fd      	b.n	800f496 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f49a:	f000 fce7 	bl	800fe6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f49e:	4b1d      	ldr	r3, [pc, #116]	@ (800f514 <xTaskCheckForTimeOut+0xc8>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	69ba      	ldr	r2, [r7, #24]
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b6:	d102      	bne.n	800f4be <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	61fb      	str	r3, [r7, #28]
 800f4bc:	e023      	b.n	800f506 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	4b15      	ldr	r3, [pc, #84]	@ (800f518 <xTaskCheckForTimeOut+0xcc>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d007      	beq.n	800f4da <xTaskCheckForTimeOut+0x8e>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	69ba      	ldr	r2, [r7, #24]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d302      	bcc.n	800f4da <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	61fb      	str	r3, [r7, #28]
 800f4d8:	e015      	b.n	800f506 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d20b      	bcs.n	800f4fc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	1ad2      	subs	r2, r2, r3
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7ff ff95 	bl	800f420 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	e004      	b.n	800f506 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	2200      	movs	r2, #0
 800f500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f502:	2301      	movs	r3, #1
 800f504:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f506:	f000 fce7 	bl	800fed8 <vPortExitCritical>

	return xReturn;
 800f50a:	69fb      	ldr	r3, [r7, #28]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3720      	adds	r7, #32
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	20001088 	.word	0x20001088
 800f518:	2000109c 	.word	0x2000109c

0800f51c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f51c:	b480      	push	{r7}
 800f51e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f520:	4b03      	ldr	r3, [pc, #12]	@ (800f530 <vTaskMissedYield+0x14>)
 800f522:	2201      	movs	r2, #1
 800f524:	601a      	str	r2, [r3, #0]
}
 800f526:	bf00      	nop
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr
 800f530:	20001098 	.word	0x20001098

0800f534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f53c:	f000 f854 	bl	800f5e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f540:	4b07      	ldr	r3, [pc, #28]	@ (800f560 <prvIdleTask+0x2c>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d907      	bls.n	800f558 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f548:	4b06      	ldr	r3, [pc, #24]	@ (800f564 <prvIdleTask+0x30>)
 800f54a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f558:	f7fb fff6 	bl	800b548 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f55c:	e7ee      	b.n	800f53c <prvIdleTask+0x8>
 800f55e:	bf00      	nop
 800f560:	20000f88 	.word	0x20000f88
 800f564:	e000ed04 	.word	0xe000ed04

0800f568 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f56e:	2300      	movs	r3, #0
 800f570:	607b      	str	r3, [r7, #4]
 800f572:	e00c      	b.n	800f58e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	4613      	mov	r3, r2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	4413      	add	r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	4a12      	ldr	r2, [pc, #72]	@ (800f5c8 <prvInitialiseTaskLists+0x60>)
 800f580:	4413      	add	r3, r2
 800f582:	4618      	mov	r0, r3
 800f584:	f7fe fbec 	bl	800dd60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	3301      	adds	r3, #1
 800f58c:	607b      	str	r3, [r7, #4]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b06      	cmp	r3, #6
 800f592:	d9ef      	bls.n	800f574 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f594:	480d      	ldr	r0, [pc, #52]	@ (800f5cc <prvInitialiseTaskLists+0x64>)
 800f596:	f7fe fbe3 	bl	800dd60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f59a:	480d      	ldr	r0, [pc, #52]	@ (800f5d0 <prvInitialiseTaskLists+0x68>)
 800f59c:	f7fe fbe0 	bl	800dd60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f5a0:	480c      	ldr	r0, [pc, #48]	@ (800f5d4 <prvInitialiseTaskLists+0x6c>)
 800f5a2:	f7fe fbdd 	bl	800dd60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f5a6:	480c      	ldr	r0, [pc, #48]	@ (800f5d8 <prvInitialiseTaskLists+0x70>)
 800f5a8:	f7fe fbda 	bl	800dd60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f5ac:	480b      	ldr	r0, [pc, #44]	@ (800f5dc <prvInitialiseTaskLists+0x74>)
 800f5ae:	f7fe fbd7 	bl	800dd60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f5e0 <prvInitialiseTaskLists+0x78>)
 800f5b4:	4a05      	ldr	r2, [pc, #20]	@ (800f5cc <prvInitialiseTaskLists+0x64>)
 800f5b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e4 <prvInitialiseTaskLists+0x7c>)
 800f5ba:	4a05      	ldr	r2, [pc, #20]	@ (800f5d0 <prvInitialiseTaskLists+0x68>)
 800f5bc:	601a      	str	r2, [r3, #0]
}
 800f5be:	bf00      	nop
 800f5c0:	3708      	adds	r7, #8
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20000f88 	.word	0x20000f88
 800f5cc:	20001014 	.word	0x20001014
 800f5d0:	20001028 	.word	0x20001028
 800f5d4:	20001044 	.word	0x20001044
 800f5d8:	20001058 	.word	0x20001058
 800f5dc:	20001070 	.word	0x20001070
 800f5e0:	2000103c 	.word	0x2000103c
 800f5e4:	20001040 	.word	0x20001040

0800f5e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5ee:	e019      	b.n	800f624 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f5f0:	f000 fc3c 	bl	800fe6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5f4:	4b10      	ldr	r3, [pc, #64]	@ (800f638 <prvCheckTasksWaitingTermination+0x50>)
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	3304      	adds	r3, #4
 800f600:	4618      	mov	r0, r3
 800f602:	f7fe fc37 	bl	800de74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f606:	4b0d      	ldr	r3, [pc, #52]	@ (800f63c <prvCheckTasksWaitingTermination+0x54>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	3b01      	subs	r3, #1
 800f60c:	4a0b      	ldr	r2, [pc, #44]	@ (800f63c <prvCheckTasksWaitingTermination+0x54>)
 800f60e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f610:	4b0b      	ldr	r3, [pc, #44]	@ (800f640 <prvCheckTasksWaitingTermination+0x58>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	3b01      	subs	r3, #1
 800f616:	4a0a      	ldr	r2, [pc, #40]	@ (800f640 <prvCheckTasksWaitingTermination+0x58>)
 800f618:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f61a:	f000 fc5d 	bl	800fed8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 f810 	bl	800f644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f624:	4b06      	ldr	r3, [pc, #24]	@ (800f640 <prvCheckTasksWaitingTermination+0x58>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1e1      	bne.n	800f5f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f62c:	bf00      	nop
 800f62e:	bf00      	nop
 800f630:	3708      	adds	r7, #8
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	20001058 	.word	0x20001058
 800f63c:	20001084 	.word	0x20001084
 800f640:	2000106c 	.word	0x2000106c

0800f644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800f652:	2b00      	cmp	r3, #0
 800f654:	d108      	bne.n	800f668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 fe06 	bl	801026c <vPortFree>
				vPortFree( pxTCB );
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fe03 	bl	801026c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f666:	e01b      	b.n	800f6a0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d103      	bne.n	800f67a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f000 fdfa 	bl	801026c <vPortFree>
	}
 800f678:	e012      	b.n	800f6a0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800f680:	2b02      	cmp	r3, #2
 800f682:	d00d      	beq.n	800f6a0 <prvDeleteTCB+0x5c>
	__asm volatile
 800f684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f688:	b672      	cpsid	i
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	b662      	cpsie	i
 800f698:	60fb      	str	r3, [r7, #12]
}
 800f69a:	bf00      	nop
 800f69c:	bf00      	nop
 800f69e:	e7fd      	b.n	800f69c <prvDeleteTCB+0x58>
	}
 800f6a0:	bf00      	nop
 800f6a2:	3710      	adds	r7, #16
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6ae:	4b0c      	ldr	r3, [pc, #48]	@ (800f6e0 <prvResetNextTaskUnblockTime+0x38>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d104      	bne.n	800f6c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f6e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f6ba:	f04f 32ff 	mov.w	r2, #4294967295
 800f6be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f6c0:	e008      	b.n	800f6d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6c2:	4b07      	ldr	r3, [pc, #28]	@ (800f6e0 <prvResetNextTaskUnblockTime+0x38>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	4a04      	ldr	r2, [pc, #16]	@ (800f6e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f6d2:	6013      	str	r3, [r2, #0]
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	2000103c 	.word	0x2000103c
 800f6e4:	200010a4 	.word	0x200010a4

0800f6e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f71c <xTaskGetSchedulerState+0x34>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d102      	bne.n	800f6fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	607b      	str	r3, [r7, #4]
 800f6fa:	e008      	b.n	800f70e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6fc:	4b08      	ldr	r3, [pc, #32]	@ (800f720 <xTaskGetSchedulerState+0x38>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d102      	bne.n	800f70a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f704:	2302      	movs	r3, #2
 800f706:	607b      	str	r3, [r7, #4]
 800f708:	e001      	b.n	800f70e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f70a:	2300      	movs	r3, #0
 800f70c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f70e:	687b      	ldr	r3, [r7, #4]
	}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr
 800f71c:	20001090 	.word	0x20001090
 800f720:	200010ac 	.word	0x200010ac

0800f724 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f730:	2300      	movs	r3, #0
 800f732:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d074      	beq.n	800f824 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f73a:	4b3d      	ldr	r3, [pc, #244]	@ (800f830 <xTaskPriorityDisinherit+0x10c>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	693a      	ldr	r2, [r7, #16]
 800f740:	429a      	cmp	r2, r3
 800f742:	d00d      	beq.n	800f760 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f748:	b672      	cpsid	i
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	b662      	cpsie	i
 800f758:	60fb      	str	r3, [r7, #12]
}
 800f75a:	bf00      	nop
 800f75c:	bf00      	nop
 800f75e:	e7fd      	b.n	800f75c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f764:	2b00      	cmp	r3, #0
 800f766:	d10d      	bne.n	800f784 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76c:	b672      	cpsid	i
 800f76e:	f383 8811 	msr	BASEPRI, r3
 800f772:	f3bf 8f6f 	isb	sy
 800f776:	f3bf 8f4f 	dsb	sy
 800f77a:	b662      	cpsie	i
 800f77c:	60bb      	str	r3, [r7, #8]
}
 800f77e:	bf00      	nop
 800f780:	bf00      	nop
 800f782:	e7fd      	b.n	800f780 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f788:	1e5a      	subs	r2, r3, #1
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f796:	429a      	cmp	r2, r3
 800f798:	d044      	beq.n	800f824 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d140      	bne.n	800f824 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fe fb64 	bl	800de74 <uxListRemove>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d115      	bne.n	800f7de <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f7b2:	693b      	ldr	r3, [r7, #16]
 800f7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7b6:	491f      	ldr	r1, [pc, #124]	@ (800f834 <xTaskPriorityDisinherit+0x110>)
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	4413      	add	r3, r2
 800f7be:	009b      	lsls	r3, r3, #2
 800f7c0:	440b      	add	r3, r1
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d10a      	bne.n	800f7de <xTaskPriorityDisinherit+0xba>
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f7d2:	43da      	mvns	r2, r3
 800f7d4:	4b18      	ldr	r3, [pc, #96]	@ (800f838 <xTaskPriorityDisinherit+0x114>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	4013      	ands	r3, r2
 800f7da:	4a17      	ldr	r2, [pc, #92]	@ (800f838 <xTaskPriorityDisinherit+0x114>)
 800f7dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ea:	f1c3 0207 	rsb	r2, r3, #7
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	409a      	lsls	r2, r3
 800f7fa:	4b0f      	ldr	r3, [pc, #60]	@ (800f838 <xTaskPriorityDisinherit+0x114>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	4a0d      	ldr	r2, [pc, #52]	@ (800f838 <xTaskPriorityDisinherit+0x114>)
 800f802:	6013      	str	r3, [r2, #0]
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f808:	4613      	mov	r3, r2
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	4413      	add	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4a08      	ldr	r2, [pc, #32]	@ (800f834 <xTaskPriorityDisinherit+0x110>)
 800f812:	441a      	add	r2, r3
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	3304      	adds	r3, #4
 800f818:	4619      	mov	r1, r3
 800f81a:	4610      	mov	r0, r2
 800f81c:	f7fe facd 	bl	800ddba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f820:	2301      	movs	r3, #1
 800f822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f824:	697b      	ldr	r3, [r7, #20]
	}
 800f826:	4618      	mov	r0, r3
 800f828:	3718      	adds	r7, #24
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	20000f84 	.word	0x20000f84
 800f834:	20000f88 	.word	0x20000f88
 800f838:	2000108c 	.word	0x2000108c

0800f83c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f846:	4b29      	ldr	r3, [pc, #164]	@ (800f8ec <prvAddCurrentTaskToDelayedList+0xb0>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f84c:	4b28      	ldr	r3, [pc, #160]	@ (800f8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3304      	adds	r3, #4
 800f852:	4618      	mov	r0, r3
 800f854:	f7fe fb0e 	bl	800de74 <uxListRemove>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10b      	bne.n	800f876 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f85e:	4b24      	ldr	r3, [pc, #144]	@ (800f8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f864:	2201      	movs	r2, #1
 800f866:	fa02 f303 	lsl.w	r3, r2, r3
 800f86a:	43da      	mvns	r2, r3
 800f86c:	4b21      	ldr	r3, [pc, #132]	@ (800f8f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4013      	ands	r3, r2
 800f872:	4a20      	ldr	r2, [pc, #128]	@ (800f8f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f874:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f87c:	d10a      	bne.n	800f894 <prvAddCurrentTaskToDelayedList+0x58>
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d007      	beq.n	800f894 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f884:	4b1a      	ldr	r3, [pc, #104]	@ (800f8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3304      	adds	r3, #4
 800f88a:	4619      	mov	r1, r3
 800f88c:	481a      	ldr	r0, [pc, #104]	@ (800f8f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f88e:	f7fe fa94 	bl	800ddba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f892:	e026      	b.n	800f8e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f894:	68fa      	ldr	r2, [r7, #12]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4413      	add	r3, r2
 800f89a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f89c:	4b14      	ldr	r3, [pc, #80]	@ (800f8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68ba      	ldr	r2, [r7, #8]
 800f8a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d209      	bcs.n	800f8c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8ac:	4b13      	ldr	r3, [pc, #76]	@ (800f8fc <prvAddCurrentTaskToDelayedList+0xc0>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	3304      	adds	r3, #4
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	f7fe faa2 	bl	800de02 <vListInsert>
}
 800f8be:	e010      	b.n	800f8e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800f900 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f8f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	3304      	adds	r3, #4
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	4610      	mov	r0, r2
 800f8ce:	f7fe fa98 	bl	800de02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f904 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	68ba      	ldr	r2, [r7, #8]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d202      	bcs.n	800f8e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f8dc:	4a09      	ldr	r2, [pc, #36]	@ (800f904 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	6013      	str	r3, [r2, #0]
}
 800f8e2:	bf00      	nop
 800f8e4:	3710      	adds	r7, #16
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	20001088 	.word	0x20001088
 800f8f0:	20000f84 	.word	0x20000f84
 800f8f4:	2000108c 	.word	0x2000108c
 800f8f8:	20001070 	.word	0x20001070
 800f8fc:	20001040 	.word	0x20001040
 800f900:	2000103c 	.word	0x2000103c
 800f904:	200010a4 	.word	0x200010a4

0800f908 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	4603      	mov	r3, r0
 800f910:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f912:	2300      	movs	r3, #0
 800f914:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f91a:	2b84      	cmp	r3, #132	@ 0x84
 800f91c:	d005      	beq.n	800f92a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f91e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	4413      	add	r3, r2
 800f926:	3303      	adds	r3, #3
 800f928:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f92a:	68fb      	ldr	r3, [r7, #12]
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3714      	adds	r7, #20
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr

0800f938 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f93e:	f3ef 8305 	mrs	r3, IPSR
 800f942:	607b      	str	r3, [r7, #4]
  return(result);
 800f944:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f946:	2b00      	cmp	r3, #0
 800f948:	bf14      	ite	ne
 800f94a:	2301      	movne	r3, #1
 800f94c:	2300      	moveq	r3, #0
 800f94e:	b2db      	uxtb	r3, r3
}
 800f950:	4618      	mov	r0, r3
 800f952:	370c      	adds	r7, #12
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr

0800f95c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f960:	f7ff fa5a 	bl	800ee18 <vTaskStartScheduler>
  
  return osOK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	bd80      	pop	{r7, pc}

0800f96a <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f96e:	f7ff febb 	bl	800f6e8 <xTaskGetSchedulerState>
 800f972:	4603      	mov	r3, r0
 800f974:	2b01      	cmp	r3, #1
 800f976:	d101      	bne.n	800f97c <osKernelRunning+0x12>
    return 0;
 800f978:	2300      	movs	r3, #0
 800f97a:	e000      	b.n	800f97e <osKernelRunning+0x14>
  else
    return 1;
 800f97c:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f97e:	4618      	mov	r0, r3
 800f980:	bd80      	pop	{r7, pc}

0800f982 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f986:	f7ff ffd7 	bl	800f938 <inHandlerMode>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d003      	beq.n	800f998 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f990:	f7ff fb66 	bl	800f060 <xTaskGetTickCountFromISR>
 800f994:	4603      	mov	r3, r0
 800f996:	e002      	b.n	800f99e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f998:	f7ff fb52 	bl	800f040 <xTaskGetTickCount>
 800f99c:	4603      	mov	r3, r0
  }
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9a4:	b089      	sub	sp, #36	@ 0x24
 800f9a6:	af04      	add	r7, sp, #16
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	695b      	ldr	r3, [r3, #20]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d020      	beq.n	800f9f6 <osThreadCreate+0x54>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	699b      	ldr	r3, [r3, #24]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d01c      	beq.n	800f9f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685c      	ldr	r4, [r3, #4]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	691e      	ldr	r6, [r3, #16]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7ff ff9a 	bl	800f908 <makeFreeRtosPriority>
 800f9d4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9de:	9202      	str	r2, [sp, #8]
 800f9e0:	9301      	str	r3, [sp, #4]
 800f9e2:	9100      	str	r1, [sp, #0]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	4632      	mov	r2, r6
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f7ff f832 	bl	800ea54 <xTaskCreateStatic>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	60fb      	str	r3, [r7, #12]
 800f9f4:	e01c      	b.n	800fa30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	685c      	ldr	r4, [r3, #4]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa02:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7ff ff7c 	bl	800f908 <makeFreeRtosPriority>
 800fa10:	4602      	mov	r2, r0
 800fa12:	f107 030c 	add.w	r3, r7, #12
 800fa16:	9301      	str	r3, [sp, #4]
 800fa18:	9200      	str	r2, [sp, #0]
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	4629      	mov	r1, r5
 800fa20:	4620      	mov	r0, r4
 800fa22:	f7ff f87d 	bl	800eb20 <xTaskCreate>
 800fa26:	4603      	mov	r3, r0
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d001      	beq.n	800fa30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	e000      	b.n	800fa32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fa30:	68fb      	ldr	r3, [r7, #12]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fa3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <osDelay+0x16>
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	e000      	b.n	800fa52 <osDelay+0x18>
 800fa50:	2301      	movs	r3, #1
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff f9a8 	bl	800eda8 <vTaskDelay>
  
  return osOK;
 800fa58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fa62:	b590      	push	{r4, r7, lr}
 800fa64:	b085      	sub	sp, #20
 800fa66:	af02      	add	r7, sp, #8
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d011      	beq.n	800fa98 <osMessageCreate+0x36>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	68db      	ldr	r3, [r3, #12]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00d      	beq.n	800fa98 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6818      	ldr	r0, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6859      	ldr	r1, [r3, #4]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	689a      	ldr	r2, [r3, #8]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	2400      	movs	r4, #0
 800fa8e:	9400      	str	r4, [sp, #0]
 800fa90:	f7fe fa86 	bl	800dfa0 <xQueueGenericCreateStatic>
 800fa94:	4603      	mov	r3, r0
 800fa96:	e008      	b.n	800faaa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6818      	ldr	r0, [r3, #0]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	4619      	mov	r1, r3
 800faa4:	f7fe fb03 	bl	800e0ae <xQueueGenericCreate>
 800faa8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800faaa:	4618      	mov	r0, r3
 800faac:	370c      	adds	r7, #12
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd90      	pop	{r4, r7, pc}
	...

0800fab4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b086      	sub	sp, #24
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fac0:	2300      	movs	r3, #0
 800fac2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d101      	bne.n	800fad2 <osMessagePut+0x1e>
    ticks = 1;
 800face:	2301      	movs	r3, #1
 800fad0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fad2:	f7ff ff31 	bl	800f938 <inHandlerMode>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d018      	beq.n	800fb0e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fadc:	f107 0210 	add.w	r2, r7, #16
 800fae0:	f107 0108 	add.w	r1, r7, #8
 800fae4:	2300      	movs	r3, #0
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7fe fc4e 	bl	800e388 <xQueueGenericSendFromISR>
 800faec:	4603      	mov	r3, r0
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d001      	beq.n	800faf6 <osMessagePut+0x42>
      return osErrorOS;
 800faf2:	23ff      	movs	r3, #255	@ 0xff
 800faf4:	e018      	b.n	800fb28 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d014      	beq.n	800fb26 <osMessagePut+0x72>
 800fafc:	4b0c      	ldr	r3, [pc, #48]	@ (800fb30 <osMessagePut+0x7c>)
 800fafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb02:	601a      	str	r2, [r3, #0]
 800fb04:	f3bf 8f4f 	dsb	sy
 800fb08:	f3bf 8f6f 	isb	sy
 800fb0c:	e00b      	b.n	800fb26 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fb0e:	f107 0108 	add.w	r1, r7, #8
 800fb12:	2300      	movs	r3, #0
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f7fe fb2c 	bl	800e174 <xQueueGenericSend>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d001      	beq.n	800fb26 <osMessagePut+0x72>
      return osErrorOS;
 800fb22:	23ff      	movs	r3, #255	@ 0xff
 800fb24:	e000      	b.n	800fb28 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3718      	adds	r7, #24
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	e000ed04 	.word	0xe000ed04

0800fb34 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fb34:	b590      	push	{r4, r7, lr}
 800fb36:	b08b      	sub	sp, #44	@ 0x2c
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fb44:	2300      	movs	r3, #0
 800fb46:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d10a      	bne.n	800fb64 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fb4e:	2380      	movs	r3, #128	@ 0x80
 800fb50:	617b      	str	r3, [r7, #20]
    return event;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	461c      	mov	r4, r3
 800fb56:	f107 0314 	add.w	r3, r7, #20
 800fb5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb62:	e054      	b.n	800fc0e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fb64:	2300      	movs	r3, #0
 800fb66:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb72:	d103      	bne.n	800fb7c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fb74:	f04f 33ff 	mov.w	r3, #4294967295
 800fb78:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb7a:	e009      	b.n	800fb90 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d006      	beq.n	800fb90 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800fb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <osMessageGet+0x5c>
      ticks = 1;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fb90:	f7ff fed2 	bl	800f938 <inHandlerMode>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d01c      	beq.n	800fbd4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fb9a:	f107 0220 	add.w	r2, r7, #32
 800fb9e:	f107 0314 	add.w	r3, r7, #20
 800fba2:	3304      	adds	r3, #4
 800fba4:	4619      	mov	r1, r3
 800fba6:	68b8      	ldr	r0, [r7, #8]
 800fba8:	f7fe fd7a 	bl	800e6a0 <xQueueReceiveFromISR>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d102      	bne.n	800fbb8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fbb2:	2310      	movs	r3, #16
 800fbb4:	617b      	str	r3, [r7, #20]
 800fbb6:	e001      	b.n	800fbbc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fbbc:	6a3b      	ldr	r3, [r7, #32]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d01d      	beq.n	800fbfe <osMessageGet+0xca>
 800fbc2:	4b15      	ldr	r3, [pc, #84]	@ (800fc18 <osMessageGet+0xe4>)
 800fbc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbc8:	601a      	str	r2, [r3, #0]
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	e014      	b.n	800fbfe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fbd4:	f107 0314 	add.w	r3, r7, #20
 800fbd8:	3304      	adds	r3, #4
 800fbda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbdc:	4619      	mov	r1, r3
 800fbde:	68b8      	ldr	r0, [r7, #8]
 800fbe0:	f7fe fc76 	bl	800e4d0 <xQueueReceive>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d102      	bne.n	800fbf0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fbea:	2310      	movs	r3, #16
 800fbec:	617b      	str	r3, [r7, #20]
 800fbee:	e006      	b.n	800fbfe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d101      	bne.n	800fbfa <osMessageGet+0xc6>
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	e000      	b.n	800fbfc <osMessageGet+0xc8>
 800fbfa:	2340      	movs	r3, #64	@ 0x40
 800fbfc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	461c      	mov	r4, r3
 800fc02:	f107 0314 	add.w	r3, r7, #20
 800fc06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fc0e:	68f8      	ldr	r0, [r7, #12]
 800fc10:	372c      	adds	r7, #44	@ 0x2c
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd90      	pop	{r4, r7, pc}
 800fc16:	bf00      	nop
 800fc18:	e000ed04 	.word	0xe000ed04

0800fc1c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fc24:	f7ff fe88 	bl	800f938 <inHandlerMode>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d004      	beq.n	800fc38 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f7fe fddf 	bl	800e7f2 <uxQueueMessagesWaitingFromISR>
 800fc34:	4603      	mov	r3, r0
 800fc36:	e003      	b.n	800fc40 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7fe fdb9 	bl	800e7b0 <uxQueueMessagesWaiting>
 800fc3e:	4603      	mov	r3, r0
  }
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3708      	adds	r7, #8
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	3b04      	subs	r3, #4
 800fc58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fc60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3b04      	subs	r3, #4
 800fc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	f023 0201 	bic.w	r2, r3, #1
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3b04      	subs	r3, #4
 800fc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc78:	4a0c      	ldr	r2, [pc, #48]	@ (800fcac <pxPortInitialiseStack+0x64>)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	3b14      	subs	r3, #20
 800fc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	3b04      	subs	r3, #4
 800fc8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f06f 0202 	mvn.w	r2, #2
 800fc96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	3b20      	subs	r3, #32
 800fc9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3714      	adds	r7, #20
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	0800fcb1 	.word	0x0800fcb1

0800fcb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fcb0:	b480      	push	{r7}
 800fcb2:	b085      	sub	sp, #20
 800fcb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fcba:	4b15      	ldr	r3, [pc, #84]	@ (800fd10 <prvTaskExitError+0x60>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc2:	d00d      	beq.n	800fce0 <prvTaskExitError+0x30>
	__asm volatile
 800fcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcc8:	b672      	cpsid	i
 800fcca:	f383 8811 	msr	BASEPRI, r3
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	f3bf 8f4f 	dsb	sy
 800fcd6:	b662      	cpsie	i
 800fcd8:	60fb      	str	r3, [r7, #12]
}
 800fcda:	bf00      	nop
 800fcdc:	bf00      	nop
 800fcde:	e7fd      	b.n	800fcdc <prvTaskExitError+0x2c>
	__asm volatile
 800fce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce4:	b672      	cpsid	i
 800fce6:	f383 8811 	msr	BASEPRI, r3
 800fcea:	f3bf 8f6f 	isb	sy
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	b662      	cpsie	i
 800fcf4:	60bb      	str	r3, [r7, #8]
}
 800fcf6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fcf8:	bf00      	nop
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d0fc      	beq.n	800fcfa <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd00:	bf00      	nop
 800fd02:	bf00      	nop
 800fd04:	3714      	adds	r7, #20
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
 800fd0e:	bf00      	nop
 800fd10:	2000000c 	.word	0x2000000c
	...

0800fd20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd20:	4b07      	ldr	r3, [pc, #28]	@ (800fd40 <pxCurrentTCBConst2>)
 800fd22:	6819      	ldr	r1, [r3, #0]
 800fd24:	6808      	ldr	r0, [r1, #0]
 800fd26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2a:	f380 8809 	msr	PSP, r0
 800fd2e:	f3bf 8f6f 	isb	sy
 800fd32:	f04f 0000 	mov.w	r0, #0
 800fd36:	f380 8811 	msr	BASEPRI, r0
 800fd3a:	4770      	bx	lr
 800fd3c:	f3af 8000 	nop.w

0800fd40 <pxCurrentTCBConst2>:
 800fd40:	20000f84 	.word	0x20000f84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd44:	bf00      	nop
 800fd46:	bf00      	nop

0800fd48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd48:	4808      	ldr	r0, [pc, #32]	@ (800fd6c <prvPortStartFirstTask+0x24>)
 800fd4a:	6800      	ldr	r0, [r0, #0]
 800fd4c:	6800      	ldr	r0, [r0, #0]
 800fd4e:	f380 8808 	msr	MSP, r0
 800fd52:	f04f 0000 	mov.w	r0, #0
 800fd56:	f380 8814 	msr	CONTROL, r0
 800fd5a:	b662      	cpsie	i
 800fd5c:	b661      	cpsie	f
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	f3bf 8f6f 	isb	sy
 800fd66:	df00      	svc	0
 800fd68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd6a:	bf00      	nop
 800fd6c:	e000ed08 	.word	0xe000ed08

0800fd70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd76:	4b37      	ldr	r3, [pc, #220]	@ (800fe54 <xPortStartScheduler+0xe4>)
 800fd78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	22ff      	movs	r2, #255	@ 0xff
 800fd86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd90:	78fb      	ldrb	r3, [r7, #3]
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	4b2f      	ldr	r3, [pc, #188]	@ (800fe58 <xPortStartScheduler+0xe8>)
 800fd9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd9e:	4b2f      	ldr	r3, [pc, #188]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fda0:	2207      	movs	r2, #7
 800fda2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fda4:	e009      	b.n	800fdba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fda6:	4b2d      	ldr	r3, [pc, #180]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	4a2b      	ldr	r2, [pc, #172]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fdae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdb0:	78fb      	ldrb	r3, [r7, #3]
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdba:	78fb      	ldrb	r3, [r7, #3]
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdc2:	2b80      	cmp	r3, #128	@ 0x80
 800fdc4:	d0ef      	beq.n	800fda6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fdc6:	4b25      	ldr	r3, [pc, #148]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f1c3 0307 	rsb	r3, r3, #7
 800fdce:	2b04      	cmp	r3, #4
 800fdd0:	d00d      	beq.n	800fdee <xPortStartScheduler+0x7e>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd6:	b672      	cpsid	i
 800fdd8:	f383 8811 	msr	BASEPRI, r3
 800fddc:	f3bf 8f6f 	isb	sy
 800fde0:	f3bf 8f4f 	dsb	sy
 800fde4:	b662      	cpsie	i
 800fde6:	60bb      	str	r3, [r7, #8]
}
 800fde8:	bf00      	nop
 800fdea:	bf00      	nop
 800fdec:	e7fd      	b.n	800fdea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fdee:	4b1b      	ldr	r3, [pc, #108]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	021b      	lsls	r3, r3, #8
 800fdf4:	4a19      	ldr	r2, [pc, #100]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fdf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fdf8:	4b18      	ldr	r3, [pc, #96]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fe00:	4a16      	ldr	r2, [pc, #88]	@ (800fe5c <xPortStartScheduler+0xec>)
 800fe02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	b2da      	uxtb	r2, r3
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe0c:	4b14      	ldr	r3, [pc, #80]	@ (800fe60 <xPortStartScheduler+0xf0>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a13      	ldr	r2, [pc, #76]	@ (800fe60 <xPortStartScheduler+0xf0>)
 800fe12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fe16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe18:	4b11      	ldr	r3, [pc, #68]	@ (800fe60 <xPortStartScheduler+0xf0>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4a10      	ldr	r2, [pc, #64]	@ (800fe60 <xPortStartScheduler+0xf0>)
 800fe1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fe22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe24:	f000 f8dc 	bl	800ffe0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe28:	4b0e      	ldr	r3, [pc, #56]	@ (800fe64 <xPortStartScheduler+0xf4>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe2e:	f000 f8fb 	bl	8010028 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe32:	4b0d      	ldr	r3, [pc, #52]	@ (800fe68 <xPortStartScheduler+0xf8>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4a0c      	ldr	r2, [pc, #48]	@ (800fe68 <xPortStartScheduler+0xf8>)
 800fe38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fe3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe3e:	f7ff ff83 	bl	800fd48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe42:	f7ff f9db 	bl	800f1fc <vTaskSwitchContext>
	prvTaskExitError();
 800fe46:	f7ff ff33 	bl	800fcb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe4a:	2300      	movs	r3, #0
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3710      	adds	r7, #16
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	e000e400 	.word	0xe000e400
 800fe58:	200010b0 	.word	0x200010b0
 800fe5c:	200010b4 	.word	0x200010b4
 800fe60:	e000ed20 	.word	0xe000ed20
 800fe64:	2000000c 	.word	0x2000000c
 800fe68:	e000ef34 	.word	0xe000ef34

0800fe6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
	__asm volatile
 800fe72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe76:	b672      	cpsid	i
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	b662      	cpsie	i
 800fe86:	607b      	str	r3, [r7, #4]
}
 800fe88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fe8a:	4b11      	ldr	r3, [pc, #68]	@ (800fed0 <vPortEnterCritical+0x64>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	3301      	adds	r3, #1
 800fe90:	4a0f      	ldr	r2, [pc, #60]	@ (800fed0 <vPortEnterCritical+0x64>)
 800fe92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe94:	4b0e      	ldr	r3, [pc, #56]	@ (800fed0 <vPortEnterCritical+0x64>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d112      	bne.n	800fec2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fe9c:	4b0d      	ldr	r3, [pc, #52]	@ (800fed4 <vPortEnterCritical+0x68>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00d      	beq.n	800fec2 <vPortEnterCritical+0x56>
	__asm volatile
 800fea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feaa:	b672      	cpsid	i
 800feac:	f383 8811 	msr	BASEPRI, r3
 800feb0:	f3bf 8f6f 	isb	sy
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	b662      	cpsie	i
 800feba:	603b      	str	r3, [r7, #0]
}
 800febc:	bf00      	nop
 800febe:	bf00      	nop
 800fec0:	e7fd      	b.n	800febe <vPortEnterCritical+0x52>
	}
}
 800fec2:	bf00      	nop
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr
 800fece:	bf00      	nop
 800fed0:	2000000c 	.word	0x2000000c
 800fed4:	e000ed04 	.word	0xe000ed04

0800fed8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fede:	4b13      	ldr	r3, [pc, #76]	@ (800ff2c <vPortExitCritical+0x54>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d10d      	bne.n	800ff02 <vPortExitCritical+0x2a>
	__asm volatile
 800fee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feea:	b672      	cpsid	i
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	f3bf 8f6f 	isb	sy
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	b662      	cpsie	i
 800fefa:	607b      	str	r3, [r7, #4]
}
 800fefc:	bf00      	nop
 800fefe:	bf00      	nop
 800ff00:	e7fd      	b.n	800fefe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ff02:	4b0a      	ldr	r3, [pc, #40]	@ (800ff2c <vPortExitCritical+0x54>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	3b01      	subs	r3, #1
 800ff08:	4a08      	ldr	r2, [pc, #32]	@ (800ff2c <vPortExitCritical+0x54>)
 800ff0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff0c:	4b07      	ldr	r3, [pc, #28]	@ (800ff2c <vPortExitCritical+0x54>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d105      	bne.n	800ff20 <vPortExitCritical+0x48>
 800ff14:	2300      	movs	r3, #0
 800ff16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	f383 8811 	msr	BASEPRI, r3
}
 800ff1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	2000000c 	.word	0x2000000c

0800ff30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff30:	f3ef 8009 	mrs	r0, PSP
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	4b15      	ldr	r3, [pc, #84]	@ (800ff90 <pxCurrentTCBConst>)
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	f01e 0f10 	tst.w	lr, #16
 800ff40:	bf08      	it	eq
 800ff42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4a:	6010      	str	r0, [r2, #0]
 800ff4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ff54:	b672      	cpsid	i
 800ff56:	f380 8811 	msr	BASEPRI, r0
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	b662      	cpsie	i
 800ff64:	f7ff f94a 	bl	800f1fc <vTaskSwitchContext>
 800ff68:	f04f 0000 	mov.w	r0, #0
 800ff6c:	f380 8811 	msr	BASEPRI, r0
 800ff70:	bc09      	pop	{r0, r3}
 800ff72:	6819      	ldr	r1, [r3, #0]
 800ff74:	6808      	ldr	r0, [r1, #0]
 800ff76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff7a:	f01e 0f10 	tst.w	lr, #16
 800ff7e:	bf08      	it	eq
 800ff80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff84:	f380 8809 	msr	PSP, r0
 800ff88:	f3bf 8f6f 	isb	sy
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop

0800ff90 <pxCurrentTCBConst>:
 800ff90:	20000f84 	.word	0x20000f84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff94:	bf00      	nop
 800ff96:	bf00      	nop

0800ff98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa2:	b672      	cpsid	i
 800ffa4:	f383 8811 	msr	BASEPRI, r3
 800ffa8:	f3bf 8f6f 	isb	sy
 800ffac:	f3bf 8f4f 	dsb	sy
 800ffb0:	b662      	cpsie	i
 800ffb2:	607b      	str	r3, [r7, #4]
}
 800ffb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ffb6:	f7ff f865 	bl	800f084 <xTaskIncrementTick>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d003      	beq.n	800ffc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ffc0:	4b06      	ldr	r3, [pc, #24]	@ (800ffdc <SysTick_Handler+0x44>)
 800ffc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffc6:	601a      	str	r2, [r3, #0]
 800ffc8:	2300      	movs	r3, #0
 800ffca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	f383 8811 	msr	BASEPRI, r3
}
 800ffd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ffd4:	bf00      	nop
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	e000ed04 	.word	0xe000ed04

0800ffe0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ffe4:	4b0b      	ldr	r3, [pc, #44]	@ (8010014 <vPortSetupTimerInterrupt+0x34>)
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ffea:	4b0b      	ldr	r3, [pc, #44]	@ (8010018 <vPortSetupTimerInterrupt+0x38>)
 800ffec:	2200      	movs	r2, #0
 800ffee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fff0:	4b0a      	ldr	r3, [pc, #40]	@ (801001c <vPortSetupTimerInterrupt+0x3c>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4a0a      	ldr	r2, [pc, #40]	@ (8010020 <vPortSetupTimerInterrupt+0x40>)
 800fff6:	fba2 2303 	umull	r2, r3, r2, r3
 800fffa:	099b      	lsrs	r3, r3, #6
 800fffc:	4a09      	ldr	r2, [pc, #36]	@ (8010024 <vPortSetupTimerInterrupt+0x44>)
 800fffe:	3b01      	subs	r3, #1
 8010000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010002:	4b04      	ldr	r3, [pc, #16]	@ (8010014 <vPortSetupTimerInterrupt+0x34>)
 8010004:	2207      	movs	r2, #7
 8010006:	601a      	str	r2, [r3, #0]
}
 8010008:	bf00      	nop
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	e000e010 	.word	0xe000e010
 8010018:	e000e018 	.word	0xe000e018
 801001c:	20000008 	.word	0x20000008
 8010020:	10624dd3 	.word	0x10624dd3
 8010024:	e000e014 	.word	0xe000e014

08010028 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010028:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010038 <vPortEnableVFP+0x10>
 801002c:	6801      	ldr	r1, [r0, #0]
 801002e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010032:	6001      	str	r1, [r0, #0]
 8010034:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010036:	bf00      	nop
 8010038:	e000ed88 	.word	0xe000ed88

0801003c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010042:	f3ef 8305 	mrs	r3, IPSR
 8010046:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2b0f      	cmp	r3, #15
 801004c:	d917      	bls.n	801007e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801004e:	4a1a      	ldr	r2, [pc, #104]	@ (80100b8 <vPortValidateInterruptPriority+0x7c>)
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	4413      	add	r3, r2
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010058:	4b18      	ldr	r3, [pc, #96]	@ (80100bc <vPortValidateInterruptPriority+0x80>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	7afa      	ldrb	r2, [r7, #11]
 801005e:	429a      	cmp	r2, r3
 8010060:	d20d      	bcs.n	801007e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010066:	b672      	cpsid	i
 8010068:	f383 8811 	msr	BASEPRI, r3
 801006c:	f3bf 8f6f 	isb	sy
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	b662      	cpsie	i
 8010076:	607b      	str	r3, [r7, #4]
}
 8010078:	bf00      	nop
 801007a:	bf00      	nop
 801007c:	e7fd      	b.n	801007a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801007e:	4b10      	ldr	r3, [pc, #64]	@ (80100c0 <vPortValidateInterruptPriority+0x84>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010086:	4b0f      	ldr	r3, [pc, #60]	@ (80100c4 <vPortValidateInterruptPriority+0x88>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d90d      	bls.n	80100aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801008e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010092:	b672      	cpsid	i
 8010094:	f383 8811 	msr	BASEPRI, r3
 8010098:	f3bf 8f6f 	isb	sy
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	b662      	cpsie	i
 80100a2:	603b      	str	r3, [r7, #0]
}
 80100a4:	bf00      	nop
 80100a6:	bf00      	nop
 80100a8:	e7fd      	b.n	80100a6 <vPortValidateInterruptPriority+0x6a>
	}
 80100aa:	bf00      	nop
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	e000e3f0 	.word	0xe000e3f0
 80100bc:	200010b0 	.word	0x200010b0
 80100c0:	e000ed0c 	.word	0xe000ed0c
 80100c4:	200010b4 	.word	0x200010b4

080100c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08a      	sub	sp, #40	@ 0x28
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80100d0:	2300      	movs	r3, #0
 80100d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80100d4:	f7fe ff06 	bl	800eee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80100d8:	4b5f      	ldr	r3, [pc, #380]	@ (8010258 <pvPortMalloc+0x190>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d101      	bne.n	80100e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80100e0:	f000 f924 	bl	801032c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80100e4:	4b5d      	ldr	r3, [pc, #372]	@ (801025c <pvPortMalloc+0x194>)
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	4013      	ands	r3, r2
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f040 8094 	bne.w	801021a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d020      	beq.n	801013a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80100f8:	2208      	movs	r2, #8
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	4413      	add	r3, r2
 80100fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f003 0307 	and.w	r3, r3, #7
 8010106:	2b00      	cmp	r3, #0
 8010108:	d017      	beq.n	801013a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f023 0307 	bic.w	r3, r3, #7
 8010110:	3308      	adds	r3, #8
 8010112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f003 0307 	and.w	r3, r3, #7
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00d      	beq.n	801013a <pvPortMalloc+0x72>
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010122:	b672      	cpsid	i
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	b662      	cpsie	i
 8010132:	617b      	str	r3, [r7, #20]
}
 8010134:	bf00      	nop
 8010136:	bf00      	nop
 8010138:	e7fd      	b.n	8010136 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d06c      	beq.n	801021a <pvPortMalloc+0x152>
 8010140:	4b47      	ldr	r3, [pc, #284]	@ (8010260 <pvPortMalloc+0x198>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	429a      	cmp	r2, r3
 8010148:	d867      	bhi.n	801021a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801014a:	4b46      	ldr	r3, [pc, #280]	@ (8010264 <pvPortMalloc+0x19c>)
 801014c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801014e:	4b45      	ldr	r3, [pc, #276]	@ (8010264 <pvPortMalloc+0x19c>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010154:	e004      	b.n	8010160 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801015a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	429a      	cmp	r2, r3
 8010168:	d903      	bls.n	8010172 <pvPortMalloc+0xaa>
 801016a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1f1      	bne.n	8010156 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010172:	4b39      	ldr	r3, [pc, #228]	@ (8010258 <pvPortMalloc+0x190>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010178:	429a      	cmp	r2, r3
 801017a:	d04e      	beq.n	801021a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2208      	movs	r2, #8
 8010182:	4413      	add	r3, r2
 8010184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	6a3b      	ldr	r3, [r7, #32]
 801018c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801018e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010190:	685a      	ldr	r2, [r3, #4]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	1ad2      	subs	r2, r2, r3
 8010196:	2308      	movs	r3, #8
 8010198:	005b      	lsls	r3, r3, #1
 801019a:	429a      	cmp	r2, r3
 801019c:	d922      	bls.n	80101e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801019e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4413      	add	r3, r2
 80101a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	f003 0307 	and.w	r3, r3, #7
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00d      	beq.n	80101cc <pvPortMalloc+0x104>
	__asm volatile
 80101b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b4:	b672      	cpsid	i
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	b662      	cpsie	i
 80101c4:	613b      	str	r3, [r7, #16]
}
 80101c6:	bf00      	nop
 80101c8:	bf00      	nop
 80101ca:	e7fd      	b.n	80101c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80101cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ce:	685a      	ldr	r2, [r3, #4]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	1ad2      	subs	r2, r2, r3
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80101d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80101de:	69b8      	ldr	r0, [r7, #24]
 80101e0:	f000 f906 	bl	80103f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80101e4:	4b1e      	ldr	r3, [pc, #120]	@ (8010260 <pvPortMalloc+0x198>)
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	4a1c      	ldr	r2, [pc, #112]	@ (8010260 <pvPortMalloc+0x198>)
 80101f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80101f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010260 <pvPortMalloc+0x198>)
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	4b1c      	ldr	r3, [pc, #112]	@ (8010268 <pvPortMalloc+0x1a0>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d203      	bcs.n	8010206 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80101fe:	4b18      	ldr	r3, [pc, #96]	@ (8010260 <pvPortMalloc+0x198>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a19      	ldr	r2, [pc, #100]	@ (8010268 <pvPortMalloc+0x1a0>)
 8010204:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010208:	685a      	ldr	r2, [r3, #4]
 801020a:	4b14      	ldr	r3, [pc, #80]	@ (801025c <pvPortMalloc+0x194>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	431a      	orrs	r2, r3
 8010210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010212:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010216:	2200      	movs	r2, #0
 8010218:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801021a:	f7fe fe71 	bl	800ef00 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d101      	bne.n	8010228 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010224:	f7fb f9a2 	bl	800b56c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	f003 0307 	and.w	r3, r3, #7
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00d      	beq.n	801024e <pvPortMalloc+0x186>
	__asm volatile
 8010232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010236:	b672      	cpsid	i
 8010238:	f383 8811 	msr	BASEPRI, r3
 801023c:	f3bf 8f6f 	isb	sy
 8010240:	f3bf 8f4f 	dsb	sy
 8010244:	b662      	cpsie	i
 8010246:	60fb      	str	r3, [r7, #12]
}
 8010248:	bf00      	nop
 801024a:	bf00      	nop
 801024c:	e7fd      	b.n	801024a <pvPortMalloc+0x182>
	return pvReturn;
 801024e:	69fb      	ldr	r3, [r7, #28]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3728      	adds	r7, #40	@ 0x28
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	200090c0 	.word	0x200090c0
 801025c:	200090cc 	.word	0x200090cc
 8010260:	200090c4 	.word	0x200090c4
 8010264:	200090b8 	.word	0x200090b8
 8010268:	200090c8 	.word	0x200090c8

0801026c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d04e      	beq.n	801031c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801027e:	2308      	movs	r3, #8
 8010280:	425b      	negs	r3, r3
 8010282:	697a      	ldr	r2, [r7, #20]
 8010284:	4413      	add	r3, r2
 8010286:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	685a      	ldr	r2, [r3, #4]
 8010290:	4b24      	ldr	r3, [pc, #144]	@ (8010324 <vPortFree+0xb8>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4013      	ands	r3, r2
 8010296:	2b00      	cmp	r3, #0
 8010298:	d10d      	bne.n	80102b6 <vPortFree+0x4a>
	__asm volatile
 801029a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029e:	b672      	cpsid	i
 80102a0:	f383 8811 	msr	BASEPRI, r3
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	b662      	cpsie	i
 80102ae:	60fb      	str	r3, [r7, #12]
}
 80102b0:	bf00      	nop
 80102b2:	bf00      	nop
 80102b4:	e7fd      	b.n	80102b2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00d      	beq.n	80102da <vPortFree+0x6e>
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	b672      	cpsid	i
 80102c4:	f383 8811 	msr	BASEPRI, r3
 80102c8:	f3bf 8f6f 	isb	sy
 80102cc:	f3bf 8f4f 	dsb	sy
 80102d0:	b662      	cpsie	i
 80102d2:	60bb      	str	r3, [r7, #8]
}
 80102d4:	bf00      	nop
 80102d6:	bf00      	nop
 80102d8:	e7fd      	b.n	80102d6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	685a      	ldr	r2, [r3, #4]
 80102de:	4b11      	ldr	r3, [pc, #68]	@ (8010324 <vPortFree+0xb8>)
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4013      	ands	r3, r2
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d019      	beq.n	801031c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d115      	bne.n	801031c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	685a      	ldr	r2, [r3, #4]
 80102f4:	4b0b      	ldr	r3, [pc, #44]	@ (8010324 <vPortFree+0xb8>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	43db      	mvns	r3, r3
 80102fa:	401a      	ands	r2, r3
 80102fc:	693b      	ldr	r3, [r7, #16]
 80102fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010300:	f7fe fdf0 	bl	800eee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	685a      	ldr	r2, [r3, #4]
 8010308:	4b07      	ldr	r3, [pc, #28]	@ (8010328 <vPortFree+0xbc>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4413      	add	r3, r2
 801030e:	4a06      	ldr	r2, [pc, #24]	@ (8010328 <vPortFree+0xbc>)
 8010310:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010312:	6938      	ldr	r0, [r7, #16]
 8010314:	f000 f86c 	bl	80103f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010318:	f7fe fdf2 	bl	800ef00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801031c:	bf00      	nop
 801031e:	3718      	adds	r7, #24
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	200090cc 	.word	0x200090cc
 8010328:	200090c4 	.word	0x200090c4

0801032c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801032c:	b480      	push	{r7}
 801032e:	b085      	sub	sp, #20
 8010330:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010336:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010338:	4b27      	ldr	r3, [pc, #156]	@ (80103d8 <prvHeapInit+0xac>)
 801033a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f003 0307 	and.w	r3, r3, #7
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00c      	beq.n	8010360 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	3307      	adds	r3, #7
 801034a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f023 0307 	bic.w	r3, r3, #7
 8010352:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	4a1f      	ldr	r2, [pc, #124]	@ (80103d8 <prvHeapInit+0xac>)
 801035c:	4413      	add	r3, r2
 801035e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010364:	4a1d      	ldr	r2, [pc, #116]	@ (80103dc <prvHeapInit+0xb0>)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801036a:	4b1c      	ldr	r3, [pc, #112]	@ (80103dc <prvHeapInit+0xb0>)
 801036c:	2200      	movs	r2, #0
 801036e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	68ba      	ldr	r2, [r7, #8]
 8010374:	4413      	add	r3, r2
 8010376:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010378:	2208      	movs	r2, #8
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	1a9b      	subs	r3, r3, r2
 801037e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f023 0307 	bic.w	r3, r3, #7
 8010386:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	4a15      	ldr	r2, [pc, #84]	@ (80103e0 <prvHeapInit+0xb4>)
 801038c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801038e:	4b14      	ldr	r3, [pc, #80]	@ (80103e0 <prvHeapInit+0xb4>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	2200      	movs	r2, #0
 8010394:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010396:	4b12      	ldr	r3, [pc, #72]	@ (80103e0 <prvHeapInit+0xb4>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2200      	movs	r2, #0
 801039c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	1ad2      	subs	r2, r2, r3
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103ac:	4b0c      	ldr	r3, [pc, #48]	@ (80103e0 <prvHeapInit+0xb4>)
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	4a0a      	ldr	r2, [pc, #40]	@ (80103e4 <prvHeapInit+0xb8>)
 80103ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	4a09      	ldr	r2, [pc, #36]	@ (80103e8 <prvHeapInit+0xbc>)
 80103c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80103c4:	4b09      	ldr	r3, [pc, #36]	@ (80103ec <prvHeapInit+0xc0>)
 80103c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80103ca:	601a      	str	r2, [r3, #0]
}
 80103cc:	bf00      	nop
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	200010b8 	.word	0x200010b8
 80103dc:	200090b8 	.word	0x200090b8
 80103e0:	200090c0 	.word	0x200090c0
 80103e4:	200090c8 	.word	0x200090c8
 80103e8:	200090c4 	.word	0x200090c4
 80103ec:	200090cc 	.word	0x200090cc

080103f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80103f8:	4b28      	ldr	r3, [pc, #160]	@ (801049c <prvInsertBlockIntoFreeList+0xac>)
 80103fa:	60fb      	str	r3, [r7, #12]
 80103fc:	e002      	b.n	8010404 <prvInsertBlockIntoFreeList+0x14>
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	687a      	ldr	r2, [r7, #4]
 801040a:	429a      	cmp	r2, r3
 801040c:	d8f7      	bhi.n	80103fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	68ba      	ldr	r2, [r7, #8]
 8010418:	4413      	add	r3, r2
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	429a      	cmp	r2, r3
 801041e:	d108      	bne.n	8010432 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	685a      	ldr	r2, [r3, #4]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	441a      	add	r2, r3
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	685b      	ldr	r3, [r3, #4]
 801043a:	68ba      	ldr	r2, [r7, #8]
 801043c:	441a      	add	r2, r3
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	429a      	cmp	r2, r3
 8010444:	d118      	bne.n	8010478 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	4b15      	ldr	r3, [pc, #84]	@ (80104a0 <prvInsertBlockIntoFreeList+0xb0>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	429a      	cmp	r2, r3
 8010450:	d00d      	beq.n	801046e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	685a      	ldr	r2, [r3, #4]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	441a      	add	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	601a      	str	r2, [r3, #0]
 801046c:	e008      	b.n	8010480 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801046e:	4b0c      	ldr	r3, [pc, #48]	@ (80104a0 <prvInsertBlockIntoFreeList+0xb0>)
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	601a      	str	r2, [r3, #0]
 8010476:	e003      	b.n	8010480 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	429a      	cmp	r2, r3
 8010486:	d002      	beq.n	801048e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801048e:	bf00      	nop
 8010490:	3714      	adds	r7, #20
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop
 801049c:	200090b8 	.word	0x200090b8
 80104a0:	200090c0 	.word	0x200090c0

080104a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b087      	sub	sp, #28
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	4613      	mov	r3, r2
 80104b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80104b2:	2301      	movs	r3, #1
 80104b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80104b6:	2300      	movs	r3, #0
 80104b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80104ba:	4b1f      	ldr	r3, [pc, #124]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104bc:	7a5b      	ldrb	r3, [r3, #9]
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d131      	bne.n	8010528 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80104c4:	4b1c      	ldr	r3, [pc, #112]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104c6:	7a5b      	ldrb	r3, [r3, #9]
 80104c8:	b2db      	uxtb	r3, r3
 80104ca:	461a      	mov	r2, r3
 80104cc:	4b1a      	ldr	r3, [pc, #104]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104ce:	2100      	movs	r1, #0
 80104d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80104d2:	4b19      	ldr	r3, [pc, #100]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104d4:	7a5b      	ldrb	r3, [r3, #9]
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	4a17      	ldr	r2, [pc, #92]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	4413      	add	r3, r2
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80104e2:	4b15      	ldr	r3, [pc, #84]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104e4:	7a5b      	ldrb	r3, [r3, #9]
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	461a      	mov	r2, r3
 80104ea:	4b13      	ldr	r3, [pc, #76]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104ec:	4413      	add	r3, r2
 80104ee:	79fa      	ldrb	r2, [r7, #7]
 80104f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80104f2:	4b11      	ldr	r3, [pc, #68]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104f4:	7a5b      	ldrb	r3, [r3, #9]
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	b2d1      	uxtb	r1, r2
 80104fc:	4a0e      	ldr	r2, [pc, #56]	@ (8010538 <FATFS_LinkDriverEx+0x94>)
 80104fe:	7251      	strb	r1, [r2, #9]
 8010500:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010502:	7dbb      	ldrb	r3, [r7, #22]
 8010504:	3330      	adds	r3, #48	@ 0x30
 8010506:	b2da      	uxtb	r2, r3
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	3301      	adds	r3, #1
 8010510:	223a      	movs	r2, #58	@ 0x3a
 8010512:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	3302      	adds	r3, #2
 8010518:	222f      	movs	r2, #47	@ 0x2f
 801051a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	3303      	adds	r3, #3
 8010520:	2200      	movs	r2, #0
 8010522:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010524:	2300      	movs	r3, #0
 8010526:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010528:	7dfb      	ldrb	r3, [r7, #23]
}
 801052a:	4618      	mov	r0, r3
 801052c:	371c      	adds	r7, #28
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop
 8010538:	200090d0 	.word	0x200090d0

0801053c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010546:	2200      	movs	r2, #0
 8010548:	6839      	ldr	r1, [r7, #0]
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7ff ffaa 	bl	80104a4 <FATFS_LinkDriverEx>
 8010550:	4603      	mov	r3, r0
}
 8010552:	4618      	mov	r0, r3
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
	...

0801055c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010560:	4904      	ldr	r1, [pc, #16]	@ (8010574 <MX_FATFS_Init+0x18>)
 8010562:	4805      	ldr	r0, [pc, #20]	@ (8010578 <MX_FATFS_Init+0x1c>)
 8010564:	f7ff ffea 	bl	801053c <FATFS_LinkDriver>
 8010568:	4603      	mov	r3, r0
 801056a:	461a      	mov	r2, r3
 801056c:	4b03      	ldr	r3, [pc, #12]	@ (801057c <MX_FATFS_Init+0x20>)
 801056e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010570:	bf00      	nop
 8010572:	bd80      	pop	{r7, pc}
 8010574:	200090e0 	.word	0x200090e0
 8010578:	08013a58 	.word	0x08013a58
 801057c:	200090dc 	.word	0x200090dc

08010580 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8010588:	f7ff f9fb 	bl	800f982 <osKernelSysTick>
 801058c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 801058e:	e006      	b.n	801059e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010590:	f000 f9e4 	bl	801095c <BSP_SD_GetCardState>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d101      	bne.n	801059e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801059a:	2300      	movs	r3, #0
 801059c:	e009      	b.n	80105b2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 801059e:	f7ff f9f0 	bl	800f982 <osKernelSysTick>
 80105a2:	4602      	mov	r2, r0
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d8f0      	bhi.n	8010590 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80105ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
	...

080105bc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80105c6:	4b0b      	ldr	r3, [pc, #44]	@ (80105f4 <SD_CheckStatus+0x38>)
 80105c8:	2201      	movs	r2, #1
 80105ca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80105cc:	f000 f9c6 	bl	801095c <BSP_SD_GetCardState>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d107      	bne.n	80105e6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80105d6:	4b07      	ldr	r3, [pc, #28]	@ (80105f4 <SD_CheckStatus+0x38>)
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	f023 0301 	bic.w	r3, r3, #1
 80105e0:	b2da      	uxtb	r2, r3
 80105e2:	4b04      	ldr	r3, [pc, #16]	@ (80105f4 <SD_CheckStatus+0x38>)
 80105e4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80105e6:	4b03      	ldr	r3, [pc, #12]	@ (80105f4 <SD_CheckStatus+0x38>)
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	b2db      	uxtb	r3, r3
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	20000010 	.word	0x20000010

080105f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80105f8:	b590      	push	{r4, r7, lr}
 80105fa:	b087      	sub	sp, #28
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	4603      	mov	r3, r0
 8010600:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010602:	4b20      	ldr	r3, [pc, #128]	@ (8010684 <SD_initialize+0x8c>)
 8010604:	2201      	movs	r2, #1
 8010606:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8010608:	f7ff f9af 	bl	800f96a <osKernelRunning>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d030      	beq.n	8010674 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8010612:	f000 f949 	bl	80108a8 <BSP_SD_Init>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d107      	bne.n	801062c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801061c:	79fb      	ldrb	r3, [r7, #7]
 801061e:	4618      	mov	r0, r3
 8010620:	f7ff ffcc 	bl	80105bc <SD_CheckStatus>
 8010624:	4603      	mov	r3, r0
 8010626:	461a      	mov	r2, r3
 8010628:	4b16      	ldr	r3, [pc, #88]	@ (8010684 <SD_initialize+0x8c>)
 801062a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801062c:	4b15      	ldr	r3, [pc, #84]	@ (8010684 <SD_initialize+0x8c>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	b2db      	uxtb	r3, r3
 8010632:	2b01      	cmp	r3, #1
 8010634:	d01e      	beq.n	8010674 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8010636:	4b14      	ldr	r3, [pc, #80]	@ (8010688 <SD_initialize+0x90>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d10e      	bne.n	801065c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 801063e:	4b13      	ldr	r3, [pc, #76]	@ (801068c <SD_initialize+0x94>)
 8010640:	f107 0408 	add.w	r4, r7, #8
 8010644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 801064a:	f107 0308 	add.w	r3, r7, #8
 801064e:	2100      	movs	r1, #0
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff fa06 	bl	800fa62 <osMessageCreate>
 8010656:	4603      	mov	r3, r0
 8010658:	4a0b      	ldr	r2, [pc, #44]	@ (8010688 <SD_initialize+0x90>)
 801065a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 801065c:	4b0a      	ldr	r3, [pc, #40]	@ (8010688 <SD_initialize+0x90>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d107      	bne.n	8010674 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8010664:	4b07      	ldr	r3, [pc, #28]	@ (8010684 <SD_initialize+0x8c>)
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	b2db      	uxtb	r3, r3
 801066a:	f043 0301 	orr.w	r3, r3, #1
 801066e:	b2da      	uxtb	r2, r3
 8010670:	4b04      	ldr	r3, [pc, #16]	@ (8010684 <SD_initialize+0x8c>)
 8010672:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8010674:	4b03      	ldr	r3, [pc, #12]	@ (8010684 <SD_initialize+0x8c>)
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	b2db      	uxtb	r3, r3
}
 801067a:	4618      	mov	r0, r3
 801067c:	371c      	adds	r7, #28
 801067e:	46bd      	mov	sp, r7
 8010680:	bd90      	pop	{r4, r7, pc}
 8010682:	bf00      	nop
 8010684:	20000010 	.word	0x20000010
 8010688:	200090e4 	.word	0x200090e4
 801068c:	080139f4 	.word	0x080139f4

08010690 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	4603      	mov	r3, r0
 8010698:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	4618      	mov	r0, r3
 801069e:	f7ff ff8d 	bl	80105bc <SD_CheckStatus>
 80106a2:	4603      	mov	r3, r0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3708      	adds	r7, #8
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}

080106ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b08a      	sub	sp, #40	@ 0x28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60b9      	str	r1, [r7, #8]
 80106b4:	607a      	str	r2, [r7, #4]
 80106b6:	603b      	str	r3, [r7, #0]
 80106b8:	4603      	mov	r3, r0
 80106ba:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 80106bc:	2301      	movs	r3, #1
 80106be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80106c2:	f247 5030 	movw	r0, #30000	@ 0x7530
 80106c6:	f7ff ff5b 	bl	8010580 <SD_CheckStatusWithTimeout>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	da02      	bge.n	80106d6 <SD_read+0x2a>
  {
    return res;
 80106d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106d4:	e032      	b.n	801073c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80106d6:	683a      	ldr	r2, [r7, #0]
 80106d8:	6879      	ldr	r1, [r7, #4]
 80106da:	68b8      	ldr	r0, [r7, #8]
 80106dc:	f000 f90a 	bl	80108f4 <BSP_SD_ReadBlocks_DMA>
 80106e0:	4603      	mov	r3, r0
 80106e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 80106e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d124      	bne.n	8010738 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80106ee:	4b15      	ldr	r3, [pc, #84]	@ (8010744 <SD_read+0x98>)
 80106f0:	6819      	ldr	r1, [r3, #0]
 80106f2:	f107 0314 	add.w	r3, r7, #20
 80106f6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7ff fa1a 	bl	800fb34 <osMessageGet>

    if (event.status == osEventMessage)
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	2b10      	cmp	r3, #16
 8010704:	d118      	bne.n	8010738 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	2b01      	cmp	r3, #1
 801070a:	d115      	bne.n	8010738 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 801070c:	f7ff f939 	bl	800f982 <osKernelSysTick>
 8010710:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8010712:	e008      	b.n	8010726 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010714:	f000 f922 	bl	801095c <BSP_SD_GetCardState>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d103      	bne.n	8010726 <SD_read+0x7a>
              {
                res = RES_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8010724:	e008      	b.n	8010738 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8010726:	f7ff f92c 	bl	800f982 <osKernelSysTick>
 801072a:	4602      	mov	r2, r0
 801072c:	6a3b      	ldr	r3, [r7, #32]
 801072e:	1ad3      	subs	r3, r2, r3
 8010730:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010734:	4293      	cmp	r3, r2
 8010736:	d9ed      	bls.n	8010714 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8010738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801073c:	4618      	mov	r0, r3
 801073e:	3728      	adds	r7, #40	@ 0x28
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	200090e4 	.word	0x200090e4

08010748 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b08a      	sub	sp, #40	@ 0x28
 801074c:	af00      	add	r7, sp, #0
 801074e:	60b9      	str	r1, [r7, #8]
 8010750:	607a      	str	r2, [r7, #4]
 8010752:	603b      	str	r3, [r7, #0]
 8010754:	4603      	mov	r3, r0
 8010756:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010758:	2301      	movs	r3, #1
 801075a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801075e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010762:	f7ff ff0d 	bl	8010580 <SD_CheckStatusWithTimeout>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	da02      	bge.n	8010772 <SD_write+0x2a>
  {
    return res;
 801076c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010770:	e02e      	b.n	80107d0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010772:	683a      	ldr	r2, [r7, #0]
 8010774:	6879      	ldr	r1, [r7, #4]
 8010776:	68b8      	ldr	r0, [r7, #8]
 8010778:	f000 f8d6 	bl	8010928 <BSP_SD_WriteBlocks_DMA>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d124      	bne.n	80107cc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8010782:	4b15      	ldr	r3, [pc, #84]	@ (80107d8 <SD_write+0x90>)
 8010784:	6819      	ldr	r1, [r3, #0]
 8010786:	f107 0314 	add.w	r3, r7, #20
 801078a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801078e:	4618      	mov	r0, r3
 8010790:	f7ff f9d0 	bl	800fb34 <osMessageGet>

    if (event.status == osEventMessage)
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	2b10      	cmp	r3, #16
 8010798:	d118      	bne.n	80107cc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	2b02      	cmp	r3, #2
 801079e:	d115      	bne.n	80107cc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80107a0:	f7ff f8ef 	bl	800f982 <osKernelSysTick>
 80107a4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80107a6:	e008      	b.n	80107ba <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80107a8:	f000 f8d8 	bl	801095c <BSP_SD_GetCardState>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d103      	bne.n	80107ba <SD_write+0x72>
          {
            res = RES_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80107b8:	e008      	b.n	80107cc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80107ba:	f7ff f8e2 	bl	800f982 <osKernelSysTick>
 80107be:	4602      	mov	r2, r0
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d9ed      	bls.n	80107a8 <SD_write+0x60>
        res = RES_OK;
    }

#endif

  return res;
 80107cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3728      	adds	r7, #40	@ 0x28
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	200090e4 	.word	0x200090e4

080107dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b08c      	sub	sp, #48	@ 0x30
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	4603      	mov	r3, r0
 80107e4:	603a      	str	r2, [r7, #0]
 80107e6:	71fb      	strb	r3, [r7, #7]
 80107e8:	460b      	mov	r3, r1
 80107ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80107ec:	2301      	movs	r3, #1
 80107ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80107f2:	4b25      	ldr	r3, [pc, #148]	@ (8010888 <SD_ioctl+0xac>)
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	f003 0301 	and.w	r3, r3, #1
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d001      	beq.n	8010804 <SD_ioctl+0x28>
 8010800:	2303      	movs	r3, #3
 8010802:	e03c      	b.n	801087e <SD_ioctl+0xa2>

  switch (cmd)
 8010804:	79bb      	ldrb	r3, [r7, #6]
 8010806:	2b03      	cmp	r3, #3
 8010808:	d834      	bhi.n	8010874 <SD_ioctl+0x98>
 801080a:	a201      	add	r2, pc, #4	@ (adr r2, 8010810 <SD_ioctl+0x34>)
 801080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010810:	08010821 	.word	0x08010821
 8010814:	08010829 	.word	0x08010829
 8010818:	08010841 	.word	0x08010841
 801081c:	0801085b 	.word	0x0801085b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010826:	e028      	b.n	801087a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010828:	f107 030c 	add.w	r3, r7, #12
 801082c:	4618      	mov	r0, r3
 801082e:	f000 f8a5 	bl	801097c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801083e:	e01c      	b.n	801087a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010840:	f107 030c 	add.w	r3, r7, #12
 8010844:	4618      	mov	r0, r3
 8010846:	f000 f899 	bl	801097c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801084a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801084c:	b29a      	uxth	r2, r3
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010852:	2300      	movs	r3, #0
 8010854:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010858:	e00f      	b.n	801087a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801085a:	f107 030c 	add.w	r3, r7, #12
 801085e:	4618      	mov	r0, r3
 8010860:	f000 f88c 	bl	801097c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010866:	0a5a      	lsrs	r2, r3, #9
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010872:	e002      	b.n	801087a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010874:	2304      	movs	r3, #4
 8010876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801087a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801087e:	4618      	mov	r0, r3
 8010880:	3730      	adds	r7, #48	@ 0x30
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	20000010 	.word	0x20000010

0801088c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8010890:	4b04      	ldr	r3, [pc, #16]	@ (80108a4 <BSP_SD_ReadCpltCallback+0x18>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2200      	movs	r2, #0
 8010896:	2101      	movs	r1, #1
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff f90b 	bl	800fab4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 801089e:	bf00      	nop
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	200090e4 	.word	0x200090e4

080108a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80108b2:	f000 f87b 	bl	80109ac <BSP_SD_IsDetected>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d001      	beq.n	80108c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80108bc:	2302      	movs	r3, #2
 80108be:	e012      	b.n	80108e6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80108c0:	480b      	ldr	r0, [pc, #44]	@ (80108f0 <BSP_SD_Init+0x48>)
 80108c2:	f7f5 ff59 	bl	8006778 <HAL_SD_Init>
 80108c6:	4603      	mov	r3, r0
 80108c8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d109      	bne.n	80108e4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80108d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80108d4:	4806      	ldr	r0, [pc, #24]	@ (80108f0 <BSP_SD_Init+0x48>)
 80108d6:	f7f6 fba1 	bl	800701c <HAL_SD_ConfigWideBusOperation>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d001      	beq.n	80108e4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80108e0:	2301      	movs	r3, #1
 80108e2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80108e4:	79fb      	ldrb	r3, [r7, #7]
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3708      	adds	r7, #8
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}
 80108ee:	bf00      	nop
 80108f0:	20000b2c 	.word	0x20000b2c

080108f4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b086      	sub	sp, #24
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	60b9      	str	r1, [r7, #8]
 80108fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010900:	2300      	movs	r3, #0
 8010902:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	68f9      	ldr	r1, [r7, #12]
 801090a:	4806      	ldr	r0, [pc, #24]	@ (8010924 <BSP_SD_ReadBlocks_DMA+0x30>)
 801090c:	f7f5 ffe4 	bl	80068d8 <HAL_SD_ReadBlocks_DMA>
 8010910:	4603      	mov	r3, r0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d001      	beq.n	801091a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010916:	2301      	movs	r3, #1
 8010918:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801091a:	7dfb      	ldrb	r3, [r7, #23]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	20000b2c 	.word	0x20000b2c

08010928 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010934:	2300      	movs	r3, #0
 8010936:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68ba      	ldr	r2, [r7, #8]
 801093c:	68f9      	ldr	r1, [r7, #12]
 801093e:	4806      	ldr	r0, [pc, #24]	@ (8010958 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010940:	f7f6 f8ac 	bl	8006a9c <HAL_SD_WriteBlocks_DMA>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801094a:	2301      	movs	r3, #1
 801094c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801094e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010950:	4618      	mov	r0, r3
 8010952:	3718      	adds	r7, #24
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	20000b2c 	.word	0x20000b2c

0801095c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010960:	4805      	ldr	r0, [pc, #20]	@ (8010978 <BSP_SD_GetCardState+0x1c>)
 8010962:	f7f6 fbf5 	bl	8007150 <HAL_SD_GetCardState>
 8010966:	4603      	mov	r3, r0
 8010968:	2b04      	cmp	r3, #4
 801096a:	bf14      	ite	ne
 801096c:	2301      	movne	r3, #1
 801096e:	2300      	moveq	r3, #0
 8010970:	b2db      	uxtb	r3, r3
}
 8010972:	4618      	mov	r0, r3
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	20000b2c 	.word	0x20000b2c

0801097c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010984:	6879      	ldr	r1, [r7, #4]
 8010986:	4803      	ldr	r0, [pc, #12]	@ (8010994 <BSP_SD_GetCardInfo+0x18>)
 8010988:	f7f6 fb1c 	bl	8006fc4 <HAL_SD_GetCardInfo>
}
 801098c:	bf00      	nop
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	20000b2c 	.word	0x20000b2c

08010998 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b082      	sub	sp, #8
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80109a0:	f7ff ff74 	bl	801088c <BSP_SD_ReadCpltCallback>
}
 80109a4:	bf00      	nop
 80109a6:	3708      	adds	r7, #8
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80109b2:	2301      	movs	r3, #1
 80109b4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80109b6:	f000 f80b 	bl	80109d0 <BSP_PlatformIsDetected>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d101      	bne.n	80109c4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80109c0:	2300      	movs	r3, #0
 80109c2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80109c4:	79fb      	ldrb	r3, [r7, #7]
 80109c6:	b2db      	uxtb	r3, r3
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}

080109d0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80109d6:	2301      	movs	r3, #1
 80109d8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80109da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80109de:	4806      	ldr	r0, [pc, #24]	@ (80109f8 <BSP_PlatformIsDetected+0x28>)
 80109e0:	f7f1 f90e 	bl	8001c00 <HAL_GPIO_ReadPin>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d001      	beq.n	80109ee <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80109ea:	2300      	movs	r3, #0
 80109ec:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80109ee:	79fb      	ldrb	r3, [r7, #7]
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3708      	adds	r7, #8
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	40020800 	.word	0x40020800

080109fc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80109fc:	b5b0      	push	{r4, r5, r7, lr}
 80109fe:	b090      	sub	sp, #64	@ 0x40
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	4613      	mov	r3, r2
 8010a08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d101      	bne.n	8010a14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010a10:	2302      	movs	r3, #2
 8010a12:	e04d      	b.n	8010ab0 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	79fa      	ldrb	r2, [r7, #7]
 8010a18:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2200      	movs	r2, #0
 8010a28:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f000 f847 	bl	8010ac0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2200      	movs	r2, #0
 8010a36:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2200      	movs	r2, #0
 8010a46:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d003      	beq.n	8010a60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8010a60:	4b15      	ldr	r3, [pc, #84]	@ (8010ab8 <USBH_Init+0xbc>)
 8010a62:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8010a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8010a6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010a70:	2100      	movs	r1, #0
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fe fff5 	bl	800fa62 <osMessageCreate>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8010a80:	4b0e      	ldr	r3, [pc, #56]	@ (8010abc <USBH_Init+0xc0>)
 8010a82:	f107 0414 	add.w	r4, r7, #20
 8010a86:	461d      	mov	r5, r3
 8010a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8010a94:	f107 0314 	add.w	r3, r7, #20
 8010a98:	68f9      	ldr	r1, [r7, #12]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fe ff81 	bl	800f9a2 <osThreadCreate>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f002 fa93 	bl	8012fd4 <USBH_LL_Init>

  return USBH_OK;
 8010aae:	2300      	movs	r3, #0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3740      	adds	r7, #64	@ 0x40
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8010ab8:	08013a04 	.word	0x08013a04
 8010abc:	08013a20 	.word	0x08013a20

08010ac0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b084      	sub	sp, #16
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010ac8:	2300      	movs	r3, #0
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	e009      	b.n	8010ae2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	33e0      	adds	r3, #224	@ 0xe0
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	4413      	add	r3, r2
 8010ad8:	2200      	movs	r2, #0
 8010ada:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	60fb      	str	r3, [r7, #12]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b0f      	cmp	r3, #15
 8010ae6:	d9f2      	bls.n	8010ace <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010ae8:	2300      	movs	r3, #0
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	e009      	b.n	8010b02 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	4413      	add	r3, r2
 8010af4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010af8:	2200      	movs	r2, #0
 8010afa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	3301      	adds	r3, #1
 8010b00:	60fb      	str	r3, [r7, #12]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b08:	d3f1      	bcc.n	8010aee <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2200      	movs	r2, #0
 8010b14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2201      	movs	r2, #1
 8010b1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2201      	movs	r2, #1
 8010b28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2240      	movs	r2, #64	@ 0x40
 8010b2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2201      	movs	r2, #1
 8010b42:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2200      	movs	r2, #0
 8010b52:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	331c      	adds	r3, #28
 8010b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010b5e:	2100      	movs	r1, #0
 8010b60:	4618      	mov	r0, r3
 8010b62:	f002 fe7f 	bl	8013864 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b70:	2100      	movs	r1, #0
 8010b72:	4618      	mov	r0, r3
 8010b74:	f002 fe76 	bl	8013864 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010b7e:	2212      	movs	r2, #18
 8010b80:	2100      	movs	r1, #0
 8010b82:	4618      	mov	r0, r3
 8010b84:	f002 fe6e 	bl	8013864 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010b8e:	223e      	movs	r2, #62	@ 0x3e
 8010b90:	2100      	movs	r1, #0
 8010b92:	4618      	mov	r0, r3
 8010b94:	f002 fe66 	bl	8013864 <memset>

  return USBH_OK;
 8010b98:	2300      	movs	r3, #0
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8010ba2:	b480      	push	{r7}
 8010ba4:	b085      	sub	sp, #20
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
 8010baa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8010bac:	2300      	movs	r3, #0
 8010bae:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d016      	beq.n	8010be4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d10e      	bne.n	8010bde <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010bc6:	1c59      	adds	r1, r3, #1
 8010bc8:	687a      	ldr	r2, [r7, #4]
 8010bca:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	33de      	adds	r3, #222	@ 0xde
 8010bd2:	6839      	ldr	r1, [r7, #0]
 8010bd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	73fb      	strb	r3, [r7, #15]
 8010bdc:	e004      	b.n	8010be8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010bde:	2302      	movs	r3, #2
 8010be0:	73fb      	strb	r3, [r7, #15]
 8010be2:	e001      	b.n	8010be8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8010be4:	2302      	movs	r3, #2
 8010be6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr

08010bf6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8010bf6:	b480      	push	{r7}
 8010bf8:	b085      	sub	sp, #20
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8010c02:	2300      	movs	r3, #0
 8010c04:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8010c0c:	78fa      	ldrb	r2, [r7, #3]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d204      	bcs.n	8010c1c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	78fa      	ldrb	r2, [r7, #3]
 8010c16:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8010c1a:	e001      	b.n	8010c20 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010c1c:	2302      	movs	r3, #2
 8010c1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3714      	adds	r7, #20
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr

08010c2e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010c2e:	b480      	push	{r7}
 8010c30:	b087      	sub	sp, #28
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
 8010c36:	4608      	mov	r0, r1
 8010c38:	4611      	mov	r1, r2
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	70fb      	strb	r3, [r7, #3]
 8010c40:	460b      	mov	r3, r1
 8010c42:	70bb      	strb	r3, [r7, #2]
 8010c44:	4613      	mov	r3, r2
 8010c46:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010c56:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010c58:	e025      	b.n	8010ca6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010c5a:	7dfb      	ldrb	r3, [r7, #23]
 8010c5c:	221a      	movs	r2, #26
 8010c5e:	fb02 f303 	mul.w	r3, r2, r3
 8010c62:	3308      	adds	r3, #8
 8010c64:	68fa      	ldr	r2, [r7, #12]
 8010c66:	4413      	add	r3, r2
 8010c68:	3302      	adds	r3, #2
 8010c6a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	795b      	ldrb	r3, [r3, #5]
 8010c70:	78fa      	ldrb	r2, [r7, #3]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d002      	beq.n	8010c7c <USBH_FindInterface+0x4e>
 8010c76:	78fb      	ldrb	r3, [r7, #3]
 8010c78:	2bff      	cmp	r3, #255	@ 0xff
 8010c7a:	d111      	bne.n	8010ca0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010c80:	78ba      	ldrb	r2, [r7, #2]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d002      	beq.n	8010c8c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010c86:	78bb      	ldrb	r3, [r7, #2]
 8010c88:	2bff      	cmp	r3, #255	@ 0xff
 8010c8a:	d109      	bne.n	8010ca0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010c90:	787a      	ldrb	r2, [r7, #1]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d002      	beq.n	8010c9c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010c96:	787b      	ldrb	r3, [r7, #1]
 8010c98:	2bff      	cmp	r3, #255	@ 0xff
 8010c9a:	d101      	bne.n	8010ca0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8010c9c:	7dfb      	ldrb	r3, [r7, #23]
 8010c9e:	e006      	b.n	8010cae <USBH_FindInterface+0x80>
    }
    if_ix++;
 8010ca0:	7dfb      	ldrb	r3, [r7, #23]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010ca6:	7dfb      	ldrb	r3, [r7, #23]
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d9d6      	bls.n	8010c5a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8010cac:	23ff      	movs	r3, #255	@ 0xff
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	371c      	adds	r7, #28
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr

08010cba <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b082      	sub	sp, #8
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f002 f9c2 	bl	801304c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010cc8:	2101      	movs	r1, #1
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f002 fac9 	bl	8013262 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010cd0:	2300      	movs	r3, #0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3708      	adds	r7, #8
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
	...

08010cdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af04      	add	r7, sp, #16
 8010ce2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8010ce4:	2302      	movs	r3, #2
 8010ce6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	d102      	bne.n	8010cfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2203      	movs	r2, #3
 8010cfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b0b      	cmp	r3, #11
 8010d06:	f200 81f5 	bhi.w	80110f4 <USBH_Process+0x418>
 8010d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8010d10 <USBH_Process+0x34>)
 8010d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d10:	08010d41 	.word	0x08010d41
 8010d14:	08010d7f 	.word	0x08010d7f
 8010d18:	08010df5 	.word	0x08010df5
 8010d1c:	08011083 	.word	0x08011083
 8010d20:	080110f5 	.word	0x080110f5
 8010d24:	08010ea1 	.word	0x08010ea1
 8010d28:	0801101d 	.word	0x0801101d
 8010d2c:	08010ee3 	.word	0x08010ee3
 8010d30:	08010f0f 	.word	0x08010f0f
 8010d34:	08010f37 	.word	0x08010f37
 8010d38:	08010f85 	.word	0x08010f85
 8010d3c:	0801106b 	.word	0x0801106b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	f000 81d5 	beq.w	80110f8 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2201      	movs	r2, #1
 8010d52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8010d54:	20c8      	movs	r0, #200	@ 0xc8
 8010d56:	f002 face 	bl	80132f6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f002 f9d3 	bl	8013106 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2200      	movs	r2, #0
 8010d64:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010d70:	2300      	movs	r3, #0
 8010d72:	2200      	movs	r2, #0
 8010d74:	2101      	movs	r1, #1
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 fc6a 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8010d7c:	e1bc      	b.n	80110f8 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8010d84:	b2db      	uxtb	r3, r3
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	d107      	bne.n	8010d9a <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	2202      	movs	r2, #2
 8010d96:	701a      	strb	r2, [r3, #0]
 8010d98:	e025      	b.n	8010de6 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010da0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010da4:	d914      	bls.n	8010dd0 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010dac:	3301      	adds	r3, #1
 8010dae:	b2da      	uxtb	r2, r3
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8010dbc:	2b03      	cmp	r3, #3
 8010dbe:	d903      	bls.n	8010dc8 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	220d      	movs	r2, #13
 8010dc4:	701a      	strb	r2, [r3, #0]
 8010dc6:	e00e      	b.n	8010de6 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	701a      	strb	r2, [r3, #0]
 8010dce:	e00a      	b.n	8010de6 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8010dd6:	f103 020a 	add.w	r2, r3, #10
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8010de0:	200a      	movs	r0, #10
 8010de2:	f002 fa88 	bl	80132f6 <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010de6:	2300      	movs	r3, #0
 8010de8:	2200      	movs	r2, #0
 8010dea:	2101      	movs	r1, #1
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f000 fc2f 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010df2:	e188      	b.n	8011106 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d005      	beq.n	8010e0a <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010e04:	2104      	movs	r1, #4
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8010e0a:	2064      	movs	r0, #100	@ 0x64
 8010e0c:	f002 fa73 	bl	80132f6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f002 f951 	bl	80130b8 <USBH_LL_GetSpeed>
 8010e16:	4603      	mov	r3, r0
 8010e18:	461a      	mov	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2205      	movs	r2, #5
 8010e24:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010e26:	2100      	movs	r1, #0
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f001 fba4 	bl	8012576 <USBH_AllocPipe>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	461a      	mov	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010e36:	2180      	movs	r1, #128	@ 0x80
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f001 fb9c 	bl	8012576 <USBH_AllocPipe>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	461a      	mov	r2, r3
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7919      	ldrb	r1, [r3, #4]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010e5a:	9202      	str	r2, [sp, #8]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	9201      	str	r2, [sp, #4]
 8010e60:	9300      	str	r3, [sp, #0]
 8010e62:	4603      	mov	r3, r0
 8010e64:	2280      	movs	r2, #128	@ 0x80
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f001 fb56 	bl	8012518 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	7959      	ldrb	r1, [r3, #5]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010e80:	9202      	str	r2, [sp, #8]
 8010e82:	2200      	movs	r2, #0
 8010e84:	9201      	str	r2, [sp, #4]
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	4603      	mov	r3, r0
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f001 fb43 	bl	8012518 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010e92:	2300      	movs	r3, #0
 8010e94:	2200      	movs	r2, #0
 8010e96:	2101      	movs	r1, #1
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 fbd9 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010e9e:	e132      	b.n	8011106 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 f935 	bl	8011110 <USBH_HandleEnum>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8010eaa:	7bbb      	ldrb	r3, [r7, #14]
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f040 8124 	bne.w	80110fc <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	d103      	bne.n	8010ece <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2208      	movs	r2, #8
 8010eca:	701a      	strb	r2, [r3, #0]
 8010ecc:	e002      	b.n	8010ed4 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2207      	movs	r2, #7
 8010ed2:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	2105      	movs	r1, #5
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f000 fbb8 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8010ee0:	e10c      	b.n	80110fc <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f000 8109 	beq.w	8011100 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010ef4:	2101      	movs	r1, #1
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2208      	movs	r2, #8
 8010efe:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8010f00:	2300      	movs	r3, #0
 8010f02:	2200      	movs	r2, #0
 8010f04:	2105      	movs	r1, #5
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 fba2 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8010f0c:	e0f8      	b.n	8011100 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8010f14:	4619      	mov	r1, r3
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 fcc8 	bl	80118ac <USBH_SetCfg>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d102      	bne.n	8010f28 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2209      	movs	r2, #9
 8010f26:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010f28:	2300      	movs	r3, #0
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	2101      	movs	r1, #1
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 fb8e 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010f34:	e0e7      	b.n	8011106 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8010f3c:	f003 0320 	and.w	r3, r3, #32
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d015      	beq.n	8010f70 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8010f44:	2101      	movs	r1, #1
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 fcd3 	bl	80118f2 <USBH_SetFeature>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010f50:	7bbb      	ldrb	r3, [r7, #14]
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d103      	bne.n	8010f60 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	220a      	movs	r2, #10
 8010f5c:	701a      	strb	r2, [r3, #0]
 8010f5e:	e00a      	b.n	8010f76 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8010f60:	7bbb      	ldrb	r3, [r7, #14]
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b03      	cmp	r3, #3
 8010f66:	d106      	bne.n	8010f76 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	220a      	movs	r2, #10
 8010f6c:	701a      	strb	r2, [r3, #0]
 8010f6e:	e002      	b.n	8010f76 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	220a      	movs	r2, #10
 8010f74:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8010f76:	2300      	movs	r3, #0
 8010f78:	2200      	movs	r2, #0
 8010f7a:	2101      	movs	r1, #1
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 fb67 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8010f82:	e0c0      	b.n	8011106 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d03f      	beq.n	801100e <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010f96:	2300      	movs	r3, #0
 8010f98:	73fb      	strb	r3, [r7, #15]
 8010f9a:	e016      	b.n	8010fca <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010f9c:	7bfa      	ldrb	r2, [r7, #15]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	32de      	adds	r2, #222	@ 0xde
 8010fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fa6:	791a      	ldrb	r2, [r3, #4]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d108      	bne.n	8010fc4 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8010fb2:	7bfa      	ldrb	r2, [r7, #15]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	32de      	adds	r2, #222	@ 0xde
 8010fb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8010fc2:	e005      	b.n	8010fd0 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010fc4:	7bfb      	ldrb	r3, [r7, #15]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	73fb      	strb	r3, [r7, #15]
 8010fca:	7bfb      	ldrb	r3, [r7, #15]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d0e5      	beq.n	8010f9c <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d016      	beq.n	8011008 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	4798      	blx	r3
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d109      	bne.n	8011000 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2206      	movs	r2, #6
 8010ff0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010ff8:	2103      	movs	r1, #3
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	4798      	blx	r3
 8010ffe:	e006      	b.n	801100e <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	220d      	movs	r2, #13
 8011004:	701a      	strb	r2, [r3, #0]
 8011006:	e002      	b.n	801100e <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	220d      	movs	r2, #13
 801100c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801100e:	2300      	movs	r3, #0
 8011010:	2200      	movs	r2, #0
 8011012:	2105      	movs	r1, #5
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 fb1b 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801101a:	e074      	b.n	8011106 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011022:	2b00      	cmp	r3, #0
 8011024:	d017      	beq.n	8011056 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801102c:	691b      	ldr	r3, [r3, #16]
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	4798      	blx	r3
 8011032:	4603      	mov	r3, r0
 8011034:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8011036:	7bbb      	ldrb	r3, [r7, #14]
 8011038:	b2db      	uxtb	r3, r3
 801103a:	2b00      	cmp	r3, #0
 801103c:	d103      	bne.n	8011046 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	220b      	movs	r2, #11
 8011042:	701a      	strb	r2, [r3, #0]
 8011044:	e00a      	b.n	801105c <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 8011046:	7bbb      	ldrb	r3, [r7, #14]
 8011048:	b2db      	uxtb	r3, r3
 801104a:	2b02      	cmp	r3, #2
 801104c:	d106      	bne.n	801105c <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	220d      	movs	r2, #13
 8011052:	701a      	strb	r2, [r3, #0]
 8011054:	e002      	b.n	801105c <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	220d      	movs	r2, #13
 801105a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801105c:	2300      	movs	r3, #0
 801105e:	2200      	movs	r2, #0
 8011060:	2105      	movs	r1, #5
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 faf4 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8011068:	e04d      	b.n	8011106 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011070:	2b00      	cmp	r3, #0
 8011072:	d047      	beq.n	8011104 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801107a:	695b      	ldr	r3, [r3, #20]
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	4798      	blx	r3
      }
      break;
 8011080:	e040      	b.n	8011104 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2200      	movs	r2, #0
 8011086:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f7ff fd18 	bl	8010ac0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011096:	2b00      	cmp	r3, #0
 8011098:	d009      	beq.n	80110ae <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d005      	beq.n	80110c4 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80110be:	2105      	movs	r1, #5
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	2b01      	cmp	r3, #1
 80110ce:	d107      	bne.n	80110e0 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f7ff fdee 	bl	8010cba <USBH_Start>
 80110de:	e002      	b.n	80110e6 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f001 ffb3 	bl	801304c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80110e6:	2300      	movs	r3, #0
 80110e8:	2200      	movs	r2, #0
 80110ea:	2101      	movs	r1, #1
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 faaf 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80110f2:	e008      	b.n	8011106 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 80110f4:	bf00      	nop
 80110f6:	e006      	b.n	8011106 <USBH_Process+0x42a>
      break;
 80110f8:	bf00      	nop
 80110fa:	e004      	b.n	8011106 <USBH_Process+0x42a>
      break;
 80110fc:	bf00      	nop
 80110fe:	e002      	b.n	8011106 <USBH_Process+0x42a>
    break;
 8011100:	bf00      	nop
 8011102:	e000      	b.n	8011106 <USBH_Process+0x42a>
      break;
 8011104:	bf00      	nop
  }
  return USBH_OK;
 8011106:	2300      	movs	r3, #0
}
 8011108:	4618      	mov	r0, r3
 801110a:	3710      	adds	r7, #16
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b088      	sub	sp, #32
 8011114:	af04      	add	r7, sp, #16
 8011116:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8011118:	2301      	movs	r3, #1
 801111a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 801111c:	2301      	movs	r3, #1
 801111e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	785b      	ldrb	r3, [r3, #1]
 8011124:	2b07      	cmp	r3, #7
 8011126:	f200 81db 	bhi.w	80114e0 <USBH_HandleEnum+0x3d0>
 801112a:	a201      	add	r2, pc, #4	@ (adr r2, 8011130 <USBH_HandleEnum+0x20>)
 801112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011130:	08011151 	.word	0x08011151
 8011134:	0801120b 	.word	0x0801120b
 8011138:	08011275 	.word	0x08011275
 801113c:	080112ff 	.word	0x080112ff
 8011140:	08011369 	.word	0x08011369
 8011144:	080113d9 	.word	0x080113d9
 8011148:	08011443 	.word	0x08011443
 801114c:	080114a1 	.word	0x080114a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8011150:	2108      	movs	r1, #8
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 fac7 	bl	80116e6 <USBH_Get_DevDesc>
 8011158:	4603      	mov	r3, r0
 801115a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801115c:	7bbb      	ldrb	r3, [r7, #14]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d12e      	bne.n	80111c0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	2201      	movs	r2, #1
 8011170:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	7919      	ldrb	r1, [r3, #4]
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8011186:	9202      	str	r2, [sp, #8]
 8011188:	2200      	movs	r2, #0
 801118a:	9201      	str	r2, [sp, #4]
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	4603      	mov	r3, r0
 8011190:	2280      	movs	r2, #128	@ 0x80
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f001 f9c0 	bl	8012518 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	7959      	ldrb	r1, [r3, #5]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80111ac:	9202      	str	r2, [sp, #8]
 80111ae:	2200      	movs	r2, #0
 80111b0:	9201      	str	r2, [sp, #4]
 80111b2:	9300      	str	r3, [sp, #0]
 80111b4:	4603      	mov	r3, r0
 80111b6:	2200      	movs	r2, #0
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f001 f9ad 	bl	8012518 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80111be:	e191      	b.n	80114e4 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80111c0:	7bbb      	ldrb	r3, [r7, #14]
 80111c2:	2b03      	cmp	r3, #3
 80111c4:	f040 818e 	bne.w	80114e4 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80111ce:	3301      	adds	r3, #1
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80111de:	2b03      	cmp	r3, #3
 80111e0:	d903      	bls.n	80111ea <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	220d      	movs	r2, #13
 80111e6:	701a      	strb	r2, [r3, #0]
      break;
 80111e8:	e17c      	b.n	80114e4 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	795b      	ldrb	r3, [r3, #5]
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f001 f9e1 	bl	80125b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	791b      	ldrb	r3, [r3, #4]
 80111fa:	4619      	mov	r1, r3
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f001 f9db 	bl	80125b8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2200      	movs	r2, #0
 8011206:	701a      	strb	r2, [r3, #0]
      break;
 8011208:	e16c      	b.n	80114e4 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801120a:	2112      	movs	r1, #18
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f000 fa6a 	bl	80116e6 <USBH_Get_DevDesc>
 8011212:	4603      	mov	r3, r0
 8011214:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011216:	7bbb      	ldrb	r3, [r7, #14]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d103      	bne.n	8011224 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2202      	movs	r2, #2
 8011220:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011222:	e161      	b.n	80114e8 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011224:	7bbb      	ldrb	r3, [r7, #14]
 8011226:	2b03      	cmp	r3, #3
 8011228:	f040 815e 	bne.w	80114e8 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011232:	3301      	adds	r3, #1
 8011234:	b2da      	uxtb	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011242:	2b03      	cmp	r3, #3
 8011244:	d903      	bls.n	801124e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	220d      	movs	r2, #13
 801124a:	701a      	strb	r2, [r3, #0]
      break;
 801124c:	e14c      	b.n	80114e8 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	795b      	ldrb	r3, [r3, #5]
 8011252:	4619      	mov	r1, r3
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f001 f9af 	bl	80125b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	791b      	ldrb	r3, [r3, #4]
 801125e:	4619      	mov	r1, r3
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f001 f9a9 	bl	80125b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2200      	movs	r2, #0
 801126a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	701a      	strb	r2, [r3, #0]
      break;
 8011272:	e139      	b.n	80114e8 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8011274:	2101      	movs	r1, #1
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 faf4 	bl	8011864 <USBH_SetAddress>
 801127c:	4603      	mov	r3, r0
 801127e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8011280:	7bbb      	ldrb	r3, [r7, #14]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d130      	bne.n	80112e8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8011286:	2002      	movs	r0, #2
 8011288:	f002 f835 	bl	80132f6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2201      	movs	r2, #1
 8011290:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2203      	movs	r2, #3
 8011298:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	7919      	ldrb	r1, [r3, #4]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80112aa:	687a      	ldr	r2, [r7, #4]
 80112ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80112ae:	9202      	str	r2, [sp, #8]
 80112b0:	2200      	movs	r2, #0
 80112b2:	9201      	str	r2, [sp, #4]
 80112b4:	9300      	str	r3, [sp, #0]
 80112b6:	4603      	mov	r3, r0
 80112b8:	2280      	movs	r2, #128	@ 0x80
 80112ba:	6878      	ldr	r0, [r7, #4]
 80112bc:	f001 f92c 	bl	8012518 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	7959      	ldrb	r1, [r3, #5]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80112d4:	9202      	str	r2, [sp, #8]
 80112d6:	2200      	movs	r2, #0
 80112d8:	9201      	str	r2, [sp, #4]
 80112da:	9300      	str	r3, [sp, #0]
 80112dc:	4603      	mov	r3, r0
 80112de:	2200      	movs	r2, #0
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f001 f919 	bl	8012518 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80112e6:	e101      	b.n	80114ec <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80112e8:	7bbb      	ldrb	r3, [r7, #14]
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	f040 80fe 	bne.w	80114ec <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	220d      	movs	r2, #13
 80112f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	705a      	strb	r2, [r3, #1]
      break;
 80112fc:	e0f6      	b.n	80114ec <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80112fe:	2109      	movs	r1, #9
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f000 fa1c 	bl	801173e <USBH_Get_CfgDesc>
 8011306:	4603      	mov	r3, r0
 8011308:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801130a:	7bbb      	ldrb	r3, [r7, #14]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d103      	bne.n	8011318 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2204      	movs	r2, #4
 8011314:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011316:	e0eb      	b.n	80114f0 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011318:	7bbb      	ldrb	r3, [r7, #14]
 801131a:	2b03      	cmp	r3, #3
 801131c:	f040 80e8 	bne.w	80114f0 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011326:	3301      	adds	r3, #1
 8011328:	b2da      	uxtb	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011336:	2b03      	cmp	r3, #3
 8011338:	d903      	bls.n	8011342 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	220d      	movs	r2, #13
 801133e:	701a      	strb	r2, [r3, #0]
      break;
 8011340:	e0d6      	b.n	80114f0 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	795b      	ldrb	r3, [r3, #5]
 8011346:	4619      	mov	r1, r3
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f001 f935 	bl	80125b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	791b      	ldrb	r3, [r3, #4]
 8011352:	4619      	mov	r1, r3
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f001 f92f 	bl	80125b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2200      	movs	r2, #0
 801135e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2200      	movs	r2, #0
 8011364:	701a      	strb	r2, [r3, #0]
      break;
 8011366:	e0c3      	b.n	80114f0 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 801136e:	4619      	mov	r1, r3
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 f9e4 	bl	801173e <USBH_Get_CfgDesc>
 8011376:	4603      	mov	r3, r0
 8011378:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801137a:	7bbb      	ldrb	r3, [r7, #14]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d103      	bne.n	8011388 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2205      	movs	r2, #5
 8011384:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8011386:	e0b5      	b.n	80114f4 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011388:	7bbb      	ldrb	r3, [r7, #14]
 801138a:	2b03      	cmp	r3, #3
 801138c:	f040 80b2 	bne.w	80114f4 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8011396:	3301      	adds	r3, #1
 8011398:	b2da      	uxtb	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80113a6:	2b03      	cmp	r3, #3
 80113a8:	d903      	bls.n	80113b2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	220d      	movs	r2, #13
 80113ae:	701a      	strb	r2, [r3, #0]
      break;
 80113b0:	e0a0      	b.n	80114f4 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	795b      	ldrb	r3, [r3, #5]
 80113b6:	4619      	mov	r1, r3
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f001 f8fd 	bl	80125b8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	791b      	ldrb	r3, [r3, #4]
 80113c2:	4619      	mov	r1, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f001 f8f7 	bl	80125b8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2200      	movs	r2, #0
 80113ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2200      	movs	r2, #0
 80113d4:	701a      	strb	r2, [r3, #0]
      break;
 80113d6:	e08d      	b.n	80114f4 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d025      	beq.n	801142e <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80113ee:	23ff      	movs	r3, #255	@ 0xff
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f000 f9ce 	bl	8011792 <USBH_Get_StringDesc>
 80113f6:	4603      	mov	r3, r0
 80113f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80113fa:	7bbb      	ldrb	r3, [r7, #14]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d109      	bne.n	8011414 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2206      	movs	r2, #6
 8011404:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8011406:	2300      	movs	r3, #0
 8011408:	2200      	movs	r2, #0
 801140a:	2105      	movs	r1, #5
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f000 f91f 	bl	8011650 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8011412:	e071      	b.n	80114f8 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011414:	7bbb      	ldrb	r3, [r7, #14]
 8011416:	2b03      	cmp	r3, #3
 8011418:	d16e      	bne.n	80114f8 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2206      	movs	r2, #6
 801141e:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8011420:	2300      	movs	r3, #0
 8011422:	2200      	movs	r2, #0
 8011424:	2105      	movs	r1, #5
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 f912 	bl	8011650 <USBH_OS_PutMessage>
      break;
 801142c:	e064      	b.n	80114f8 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2206      	movs	r2, #6
 8011432:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8011434:	2300      	movs	r3, #0
 8011436:	2200      	movs	r2, #0
 8011438:	2105      	movs	r1, #5
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 f908 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8011440:	e05a      	b.n	80114f8 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8011448:	2b00      	cmp	r3, #0
 801144a:	d01f      	beq.n	801148c <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8011458:	23ff      	movs	r3, #255	@ 0xff
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 f999 	bl	8011792 <USBH_Get_StringDesc>
 8011460:	4603      	mov	r3, r0
 8011462:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8011464:	7bbb      	ldrb	r3, [r7, #14]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d103      	bne.n	8011472 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2207      	movs	r2, #7
 801146e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8011470:	e044      	b.n	80114fc <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8011472:	7bbb      	ldrb	r3, [r7, #14]
 8011474:	2b03      	cmp	r3, #3
 8011476:	d141      	bne.n	80114fc <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2207      	movs	r2, #7
 801147c:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801147e:	2300      	movs	r3, #0
 8011480:	2200      	movs	r2, #0
 8011482:	2105      	movs	r1, #5
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 f8e3 	bl	8011650 <USBH_OS_PutMessage>
      break;
 801148a:	e037      	b.n	80114fc <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2207      	movs	r2, #7
 8011490:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8011492:	2300      	movs	r3, #0
 8011494:	2200      	movs	r2, #0
 8011496:	2105      	movs	r1, #5
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f000 f8d9 	bl	8011650 <USBH_OS_PutMessage>
      break;
 801149e:	e02d      	b.n	80114fc <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d017      	beq.n	80114da <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80114b6:	23ff      	movs	r3, #255	@ 0xff
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f000 f96a 	bl	8011792 <USBH_Get_StringDesc>
 80114be:	4603      	mov	r3, r0
 80114c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80114c2:	7bbb      	ldrb	r3, [r7, #14]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d102      	bne.n	80114ce <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80114c8:	2300      	movs	r3, #0
 80114ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80114cc:	e018      	b.n	8011500 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80114ce:	7bbb      	ldrb	r3, [r7, #14]
 80114d0:	2b03      	cmp	r3, #3
 80114d2:	d115      	bne.n	8011500 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 80114d4:	2300      	movs	r3, #0
 80114d6:	73fb      	strb	r3, [r7, #15]
      break;
 80114d8:	e012      	b.n	8011500 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 80114da:	2300      	movs	r3, #0
 80114dc:	73fb      	strb	r3, [r7, #15]
      break;
 80114de:	e00f      	b.n	8011500 <USBH_HandleEnum+0x3f0>

    default:
      break;
 80114e0:	bf00      	nop
 80114e2:	e00e      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 80114e4:	bf00      	nop
 80114e6:	e00c      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 80114e8:	bf00      	nop
 80114ea:	e00a      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 80114ec:	bf00      	nop
 80114ee:	e008      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 80114f0:	bf00      	nop
 80114f2:	e006      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 80114f4:	bf00      	nop
 80114f6:	e004      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 80114f8:	bf00      	nop
 80114fa:	e002      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 80114fc:	bf00      	nop
 80114fe:	e000      	b.n	8011502 <USBH_HandleEnum+0x3f2>
      break;
 8011500:	bf00      	nop
  }
  return Status;
 8011502:	7bfb      	ldrb	r3, [r7, #15]
}
 8011504:	4618      	mov	r0, r3
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	683a      	ldr	r2, [r7, #0]
 801151a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 801151e:	bf00      	nop
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b082      	sub	sp, #8
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011538:	1c5a      	adds	r2, r3, #1
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f000 f804 	bl	801154e <USBH_HandleSof>
}
 8011546:	bf00      	nop
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	781b      	ldrb	r3, [r3, #0]
 801155a:	b2db      	uxtb	r3, r3
 801155c:	2b0b      	cmp	r3, #11
 801155e:	d10a      	bne.n	8011576 <USBH_HandleSof+0x28>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011566:	2b00      	cmp	r3, #0
 8011568:	d005      	beq.n	8011576 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011570:	699b      	ldr	r3, [r3, #24]
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	4798      	blx	r3
  }
}
 8011576:	bf00      	nop
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 801157e:	b580      	push	{r7, lr}
 8011580:	b082      	sub	sp, #8
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2201      	movs	r2, #1
 801158a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801158e:	2300      	movs	r3, #0
 8011590:	2200      	movs	r2, #0
 8011592:	2101      	movs	r1, #1
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 f85b 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 801159a:	bf00      	nop
}
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80115a2:	b480      	push	{r7}
 80115a4:	b083      	sub	sp, #12
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2200      	movs	r2, #0
 80115ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2201      	movs	r2, #1
 80115b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80115ba:	bf00      	nop
}
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b082      	sub	sp, #8
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2201      	movs	r2, #1
 80115d2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2200      	movs	r2, #0
 80115da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2200      	movs	r2, #0
 80115e2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80115e6:	2300      	movs	r3, #0
 80115e8:	2200      	movs	r2, #0
 80115ea:	2101      	movs	r1, #1
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f000 f82f 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80115f2:	2300      	movs	r3, #0
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2201      	movs	r2, #1
 8011608:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2200      	movs	r2, #0
 8011610:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f001 fd30 	bl	8013082 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	791b      	ldrb	r3, [r3, #4]
 8011626:	4619      	mov	r1, r3
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f000 ffc5 	bl	80125b8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	795b      	ldrb	r3, [r3, #5]
 8011632:	4619      	mov	r1, r3
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 ffbf 	bl	80125b8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801163a:	2300      	movs	r3, #0
 801163c:	2200      	movs	r2, #0
 801163e:	2101      	movs	r1, #1
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f000 f805 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	607a      	str	r2, [r7, #4]
 801165a:	603b      	str	r3, [r7, #0]
 801165c:	460b      	mov	r3, r1
 801165e:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8011660:	7afa      	ldrb	r2, [r7, #11]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 801166e:	4618      	mov	r0, r3
 8011670:	f7fe fad4 	bl	800fc1c <osMessageWaiting>
 8011674:	4603      	mov	r3, r0
 8011676:	f1c3 0310 	rsb	r3, r3, #16
 801167a:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d009      	beq.n	8011696 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	4619      	mov	r1, r3
 8011692:	f7fe fa0f 	bl	800fab4 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8011696:	bf00      	nop
 8011698:	3718      	adds	r7, #24
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}

0801169e <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 801169e:	b580      	push	{r7, lr}
 80116a0:	b086      	sub	sp, #24
 80116a2:	af00      	add	r7, sp, #0
 80116a4:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80116ac:	f107 030c 	add.w	r3, r7, #12
 80116b0:	f04f 32ff 	mov.w	r2, #4294967295
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7fe fa3d 	bl	800fb34 <osMessageGet>
    if (event.status == osEventMessage)
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	2b10      	cmp	r3, #16
 80116be:	d1f2      	bne.n	80116a6 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f7ff fb0b 	bl	8010cdc <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80116c6:	e7ee      	b.n	80116a6 <USBH_Process_OS+0x8>

080116c8 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80116d0:	2300      	movs	r3, #0
 80116d2:	2200      	movs	r2, #0
 80116d4:	2101      	movs	r1, #1
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f7ff ffba 	bl	8011650 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b086      	sub	sp, #24
 80116ea:	af02      	add	r7, sp, #8
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	460b      	mov	r3, r1
 80116f0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80116f2:	887b      	ldrh	r3, [r7, #2]
 80116f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116f8:	d901      	bls.n	80116fe <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80116fa:	2303      	movs	r3, #3
 80116fc:	e01b      	b.n	8011736 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8011704:	887b      	ldrh	r3, [r7, #2]
 8011706:	9300      	str	r3, [sp, #0]
 8011708:	4613      	mov	r3, r2
 801170a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801170e:	2100      	movs	r1, #0
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 f872 	bl	80117fa <USBH_GetDescriptor>
 8011716:	4603      	mov	r3, r0
 8011718:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 801171a:	7bfb      	ldrb	r3, [r7, #15]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d109      	bne.n	8011734 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8011726:	887a      	ldrh	r2, [r7, #2]
 8011728:	4619      	mov	r1, r3
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f92a 	bl	8011984 <USBH_ParseDevDesc>
 8011730:	4603      	mov	r3, r0
 8011732:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011734:	7bfb      	ldrb	r3, [r7, #15]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3710      	adds	r7, #16
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801173e:	b580      	push	{r7, lr}
 8011740:	b086      	sub	sp, #24
 8011742:	af02      	add	r7, sp, #8
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	460b      	mov	r3, r1
 8011748:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	331c      	adds	r3, #28
 801174e:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8011750:	887b      	ldrh	r3, [r7, #2]
 8011752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011756:	d901      	bls.n	801175c <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8011758:	2303      	movs	r3, #3
 801175a:	e016      	b.n	801178a <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801175c:	887b      	ldrh	r3, [r7, #2]
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011766:	2100      	movs	r1, #0
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 f846 	bl	80117fa <USBH_GetDescriptor>
 801176e:	4603      	mov	r3, r0
 8011770:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8011772:	7bfb      	ldrb	r3, [r7, #15]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d107      	bne.n	8011788 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8011778:	887b      	ldrh	r3, [r7, #2]
 801177a:	461a      	mov	r2, r3
 801177c:	68b9      	ldr	r1, [r7, #8]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 f9b0 	bl	8011ae4 <USBH_ParseCfgDesc>
 8011784:	4603      	mov	r3, r0
 8011786:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011788:	7bfb      	ldrb	r3, [r7, #15]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}

08011792 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8011792:	b580      	push	{r7, lr}
 8011794:	b088      	sub	sp, #32
 8011796:	af02      	add	r7, sp, #8
 8011798:	60f8      	str	r0, [r7, #12]
 801179a:	607a      	str	r2, [r7, #4]
 801179c:	461a      	mov	r2, r3
 801179e:	460b      	mov	r3, r1
 80117a0:	72fb      	strb	r3, [r7, #11]
 80117a2:	4613      	mov	r3, r2
 80117a4:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80117a6:	893b      	ldrh	r3, [r7, #8]
 80117a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80117ac:	d802      	bhi.n	80117b4 <USBH_Get_StringDesc+0x22>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d101      	bne.n	80117b8 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80117b4:	2303      	movs	r3, #3
 80117b6:	e01c      	b.n	80117f2 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80117b8:	7afb      	ldrb	r3, [r7, #11]
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80117c0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80117c8:	893b      	ldrh	r3, [r7, #8]
 80117ca:	9300      	str	r3, [sp, #0]
 80117cc:	460b      	mov	r3, r1
 80117ce:	2100      	movs	r1, #0
 80117d0:	68f8      	ldr	r0, [r7, #12]
 80117d2:	f000 f812 	bl	80117fa <USBH_GetDescriptor>
 80117d6:	4603      	mov	r3, r0
 80117d8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80117da:	7dfb      	ldrb	r3, [r7, #23]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d107      	bne.n	80117f0 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80117e6:	893a      	ldrh	r2, [r7, #8]
 80117e8:	6879      	ldr	r1, [r7, #4]
 80117ea:	4618      	mov	r0, r3
 80117ec:	f000 fb8d 	bl	8011f0a <USBH_ParseStringDesc>
  }

  return status;
 80117f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3718      	adds	r7, #24
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}

080117fa <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80117fa:	b580      	push	{r7, lr}
 80117fc:	b084      	sub	sp, #16
 80117fe:	af00      	add	r7, sp, #0
 8011800:	60f8      	str	r0, [r7, #12]
 8011802:	607b      	str	r3, [r7, #4]
 8011804:	460b      	mov	r3, r1
 8011806:	72fb      	strb	r3, [r7, #11]
 8011808:	4613      	mov	r3, r2
 801180a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	789b      	ldrb	r3, [r3, #2]
 8011810:	2b01      	cmp	r3, #1
 8011812:	d11c      	bne.n	801184e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8011814:	7afb      	ldrb	r3, [r7, #11]
 8011816:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801181a:	b2da      	uxtb	r2, r3
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	2206      	movs	r2, #6
 8011824:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	893a      	ldrh	r2, [r7, #8]
 801182a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801182c:	893b      	ldrh	r3, [r7, #8]
 801182e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011836:	d104      	bne.n	8011842 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f240 4209 	movw	r2, #1033	@ 0x409
 801183e:	829a      	strh	r2, [r3, #20]
 8011840:	e002      	b.n	8011848 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	2200      	movs	r2, #0
 8011846:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	8b3a      	ldrh	r2, [r7, #24]
 801184c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801184e:	8b3b      	ldrh	r3, [r7, #24]
 8011850:	461a      	mov	r2, r3
 8011852:	6879      	ldr	r1, [r7, #4]
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	f000 fba5 	bl	8011fa4 <USBH_CtlReq>
 801185a:	4603      	mov	r3, r0
}
 801185c:	4618      	mov	r0, r3
 801185e:	3710      	adds	r7, #16
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	460b      	mov	r3, r1
 801186e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	789b      	ldrb	r3, [r3, #2]
 8011874:	2b01      	cmp	r3, #1
 8011876:	d10f      	bne.n	8011898 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2200      	movs	r2, #0
 801187c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2205      	movs	r2, #5
 8011882:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011884:	78fb      	ldrb	r3, [r7, #3]
 8011886:	b29a      	uxth	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2200      	movs	r2, #0
 8011896:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011898:	2200      	movs	r2, #0
 801189a:	2100      	movs	r1, #0
 801189c:	6878      	ldr	r0, [r7, #4]
 801189e:	f000 fb81 	bl	8011fa4 <USBH_CtlReq>
 80118a2:	4603      	mov	r3, r0
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3708      	adds	r7, #8
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}

080118ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	460b      	mov	r3, r1
 80118b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	789b      	ldrb	r3, [r3, #2]
 80118bc:	2b01      	cmp	r3, #1
 80118be:	d10e      	bne.n	80118de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2209      	movs	r2, #9
 80118ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	887a      	ldrh	r2, [r7, #2]
 80118d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80118de:	2200      	movs	r2, #0
 80118e0:	2100      	movs	r1, #0
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f000 fb5e 	bl	8011fa4 <USBH_CtlReq>
 80118e8:	4603      	mov	r3, r0
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3708      	adds	r7, #8
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}

080118f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80118f2:	b580      	push	{r7, lr}
 80118f4:	b082      	sub	sp, #8
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
 80118fa:	460b      	mov	r3, r1
 80118fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	789b      	ldrb	r3, [r3, #2]
 8011902:	2b01      	cmp	r3, #1
 8011904:	d10f      	bne.n	8011926 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2200      	movs	r2, #0
 801190a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2203      	movs	r2, #3
 8011910:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8011912:	78fb      	ldrb	r3, [r7, #3]
 8011914:	b29a      	uxth	r2, r3
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2200      	movs	r2, #0
 801191e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011926:	2200      	movs	r2, #0
 8011928:	2100      	movs	r1, #0
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f000 fb3a 	bl	8011fa4 <USBH_CtlReq>
 8011930:	4603      	mov	r3, r0
}
 8011932:	4618      	mov	r0, r3
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b082      	sub	sp, #8
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	460b      	mov	r3, r1
 8011944:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	789b      	ldrb	r3, [r3, #2]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d10f      	bne.n	801196e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2202      	movs	r2, #2
 8011952:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2201      	movs	r2, #1
 8011958:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2200      	movs	r2, #0
 801195e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011960:	78fb      	ldrb	r3, [r7, #3]
 8011962:	b29a      	uxth	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801196e:	2200      	movs	r2, #0
 8011970:	2100      	movs	r1, #0
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 fb16 	bl	8011fa4 <USBH_CtlReq>
 8011978:	4603      	mov	r3, r0
}
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
	...

08011984 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011984:	b480      	push	{r7}
 8011986:	b087      	sub	sp, #28
 8011988:	af00      	add	r7, sp, #0
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	4613      	mov	r3, r2
 8011990:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8011998:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 801199a:	2300      	movs	r3, #0
 801199c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d101      	bne.n	80119a8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80119a4:	2302      	movs	r3, #2
 80119a6:	e094      	b.n	8011ad2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	781a      	ldrb	r2, [r3, #0]
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	785a      	ldrb	r2, [r3, #1]
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	3302      	adds	r3, #2
 80119bc:	781b      	ldrb	r3, [r3, #0]
 80119be:	461a      	mov	r2, r3
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	3303      	adds	r3, #3
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	021b      	lsls	r3, r3, #8
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	4313      	orrs	r3, r2
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	791a      	ldrb	r2, [r3, #4]
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	795a      	ldrb	r2, [r3, #5]
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	799a      	ldrb	r2, [r3, #6]
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	79da      	ldrb	r2, [r3, #7]
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d004      	beq.n	8011a06 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d11b      	bne.n	8011a3e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	79db      	ldrb	r3, [r3, #7]
 8011a0a:	2b20      	cmp	r3, #32
 8011a0c:	dc0f      	bgt.n	8011a2e <USBH_ParseDevDesc+0xaa>
 8011a0e:	2b08      	cmp	r3, #8
 8011a10:	db0f      	blt.n	8011a32 <USBH_ParseDevDesc+0xae>
 8011a12:	3b08      	subs	r3, #8
 8011a14:	4a32      	ldr	r2, [pc, #200]	@ (8011ae0 <USBH_ParseDevDesc+0x15c>)
 8011a16:	fa22 f303 	lsr.w	r3, r2, r3
 8011a1a:	f003 0301 	and.w	r3, r3, #1
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	bf14      	ite	ne
 8011a22:	2301      	movne	r3, #1
 8011a24:	2300      	moveq	r3, #0
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d106      	bne.n	8011a3a <USBH_ParseDevDesc+0xb6>
 8011a2c:	e001      	b.n	8011a32 <USBH_ParseDevDesc+0xae>
 8011a2e:	2b40      	cmp	r3, #64	@ 0x40
 8011a30:	d003      	beq.n	8011a3a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	2208      	movs	r2, #8
 8011a36:	71da      	strb	r2, [r3, #7]
        break;
 8011a38:	e000      	b.n	8011a3c <USBH_ParseDevDesc+0xb8>
        break;
 8011a3a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8011a3c:	e00e      	b.n	8011a5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	d107      	bne.n	8011a58 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	79db      	ldrb	r3, [r3, #7]
 8011a4c:	2b08      	cmp	r3, #8
 8011a4e:	d005      	beq.n	8011a5c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	2208      	movs	r2, #8
 8011a54:	71da      	strb	r2, [r3, #7]
 8011a56:	e001      	b.n	8011a5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011a58:	2303      	movs	r3, #3
 8011a5a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8011a5c:	88fb      	ldrh	r3, [r7, #6]
 8011a5e:	2b08      	cmp	r3, #8
 8011a60:	d936      	bls.n	8011ad0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	3308      	adds	r3, #8
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	461a      	mov	r2, r3
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	3309      	adds	r3, #9
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	021b      	lsls	r3, r3, #8
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	4313      	orrs	r3, r2
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	330a      	adds	r3, #10
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	461a      	mov	r2, r3
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	330b      	adds	r3, #11
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	021b      	lsls	r3, r3, #8
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	4313      	orrs	r3, r2
 8011a90:	b29a      	uxth	r2, r3
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	330c      	adds	r3, #12
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	330d      	adds	r3, #13
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	021b      	lsls	r3, r3, #8
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	7b9a      	ldrb	r2, [r3, #14]
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	7bda      	ldrb	r2, [r3, #15]
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	7c1a      	ldrb	r2, [r3, #16]
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	7c5a      	ldrb	r2, [r3, #17]
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8011ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	371c      	adds	r7, #28
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	01000101 	.word	0x01000101

08011ae4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b08c      	sub	sp, #48	@ 0x30
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	4613      	mov	r3, r2
 8011af0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8011af8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011afa:	2300      	movs	r3, #0
 8011afc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011b00:	2300      	movs	r3, #0
 8011b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8011b06:	2300      	movs	r3, #0
 8011b08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d101      	bne.n	8011b16 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8011b12:	2302      	movs	r3, #2
 8011b14:	e0de      	b.n	8011cd4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8011b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b1c:	781b      	ldrb	r3, [r3, #0]
 8011b1e:	2b09      	cmp	r3, #9
 8011b20:	d002      	beq.n	8011b28 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b24:	2209      	movs	r2, #9
 8011b26:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	781a      	ldrb	r2, [r3, #0]
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
 8011b2e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	785a      	ldrb	r2, [r3, #1]
 8011b34:	6a3b      	ldr	r3, [r7, #32]
 8011b36:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	3302      	adds	r3, #2
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	3303      	adds	r3, #3
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	021b      	lsls	r3, r3, #8
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	4313      	orrs	r3, r2
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b52:	bf28      	it	cs
 8011b54:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	6a3b      	ldr	r3, [r7, #32]
 8011b5c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	791a      	ldrb	r2, [r3, #4]
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	795a      	ldrb	r2, [r3, #5]
 8011b6a:	6a3b      	ldr	r3, [r7, #32]
 8011b6c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	799a      	ldrb	r2, [r3, #6]
 8011b72:	6a3b      	ldr	r3, [r7, #32]
 8011b74:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	79da      	ldrb	r2, [r3, #7]
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
 8011b7c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	7a1a      	ldrb	r2, [r3, #8]
 8011b82:	6a3b      	ldr	r3, [r7, #32]
 8011b84:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8011b86:	88fb      	ldrh	r3, [r7, #6]
 8011b88:	2b09      	cmp	r3, #9
 8011b8a:	f240 80a1 	bls.w	8011cd0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8011b8e:	2309      	movs	r3, #9
 8011b90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011b92:	2300      	movs	r3, #0
 8011b94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011b96:	e085      	b.n	8011ca4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011b98:	f107 0316 	add.w	r3, r7, #22
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ba0:	f000 f9e6 	bl	8011f70 <USBH_GetNextDesc>
 8011ba4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8011ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba8:	785b      	ldrb	r3, [r3, #1]
 8011baa:	2b04      	cmp	r3, #4
 8011bac:	d17a      	bne.n	8011ca4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b09      	cmp	r3, #9
 8011bb4:	d002      	beq.n	8011bbc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8011bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb8:	2209      	movs	r2, #9
 8011bba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011bc0:	221a      	movs	r2, #26
 8011bc2:	fb02 f303 	mul.w	r3, r2, r3
 8011bc6:	3308      	adds	r3, #8
 8011bc8:	6a3a      	ldr	r2, [r7, #32]
 8011bca:	4413      	add	r3, r2
 8011bcc:	3302      	adds	r3, #2
 8011bce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011bd2:	69f8      	ldr	r0, [r7, #28]
 8011bd4:	f000 f882 	bl	8011cdc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011bde:	2300      	movs	r3, #0
 8011be0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011be2:	e043      	b.n	8011c6c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011be4:	f107 0316 	add.w	r3, r7, #22
 8011be8:	4619      	mov	r1, r3
 8011bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011bec:	f000 f9c0 	bl	8011f70 <USBH_GetNextDesc>
 8011bf0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf4:	785b      	ldrb	r3, [r3, #1]
 8011bf6:	2b05      	cmp	r3, #5
 8011bf8:	d138      	bne.n	8011c6c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8011bfa:	69fb      	ldr	r3, [r7, #28]
 8011bfc:	795b      	ldrb	r3, [r3, #5]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d113      	bne.n	8011c2a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011c02:	69fb      	ldr	r3, [r7, #28]
 8011c04:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8011c06:	2b02      	cmp	r3, #2
 8011c08:	d003      	beq.n	8011c12 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	799b      	ldrb	r3, [r3, #6]
 8011c0e:	2b03      	cmp	r3, #3
 8011c10:	d10b      	bne.n	8011c2a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011c12:	69fb      	ldr	r3, [r7, #28]
 8011c14:	79db      	ldrb	r3, [r3, #7]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d10b      	bne.n	8011c32 <USBH_ParseCfgDesc+0x14e>
 8011c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b09      	cmp	r3, #9
 8011c20:	d007      	beq.n	8011c32 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8011c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c24:	2209      	movs	r2, #9
 8011c26:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011c28:	e003      	b.n	8011c32 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8011c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2c:	2207      	movs	r2, #7
 8011c2e:	701a      	strb	r2, [r3, #0]
 8011c30:	e000      	b.n	8011c34 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011c32:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8011c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c38:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011c3c:	3201      	adds	r2, #1
 8011c3e:	00d2      	lsls	r2, r2, #3
 8011c40:	211a      	movs	r1, #26
 8011c42:	fb01 f303 	mul.w	r3, r1, r3
 8011c46:	4413      	add	r3, r2
 8011c48:	3308      	adds	r3, #8
 8011c4a:	6a3a      	ldr	r2, [r7, #32]
 8011c4c:	4413      	add	r3, r2
 8011c4e:	3304      	adds	r3, #4
 8011c50:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8011c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c54:	69b9      	ldr	r1, [r7, #24]
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f000 f86f 	bl	8011d3a <USBH_ParseEPDesc>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8011c62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011c66:	3301      	adds	r3, #1
 8011c68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011c6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d80a      	bhi.n	8011c8a <USBH_ParseCfgDesc+0x1a6>
 8011c74:	69fb      	ldr	r3, [r7, #28]
 8011c76:	791b      	ldrb	r3, [r3, #4]
 8011c78:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d204      	bcs.n	8011c8a <USBH_ParseCfgDesc+0x1a6>
 8011c80:	6a3b      	ldr	r3, [r7, #32]
 8011c82:	885a      	ldrh	r2, [r3, #2]
 8011c84:	8afb      	ldrh	r3, [r7, #22]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d8ac      	bhi.n	8011be4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	791b      	ldrb	r3, [r3, #4]
 8011c8e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d201      	bcs.n	8011c9a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8011c96:	2303      	movs	r3, #3
 8011c98:	e01c      	b.n	8011cd4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8011c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d805      	bhi.n	8011cb8 <USBH_ParseCfgDesc+0x1d4>
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	885a      	ldrh	r2, [r3, #2]
 8011cb0:	8afb      	ldrh	r3, [r7, #22]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	f63f af70 	bhi.w	8011b98 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011cb8:	6a3b      	ldr	r3, [r7, #32]
 8011cba:	791b      	ldrb	r3, [r3, #4]
 8011cbc:	2b02      	cmp	r3, #2
 8011cbe:	bf28      	it	cs
 8011cc0:	2302      	movcs	r3, #2
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d201      	bcs.n	8011cd0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8011ccc:	2303      	movs	r3, #3
 8011cce:	e001      	b.n	8011cd4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8011cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3730      	adds	r7, #48	@ 0x30
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8011cdc:	b480      	push	{r7}
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	781a      	ldrb	r2, [r3, #0]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	785a      	ldrb	r2, [r3, #1]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	789a      	ldrb	r2, [r3, #2]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	78da      	ldrb	r2, [r3, #3]
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	791a      	ldrb	r2, [r3, #4]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	795a      	ldrb	r2, [r3, #5]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	799a      	ldrb	r2, [r3, #6]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	79da      	ldrb	r2, [r3, #7]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	7a1a      	ldrb	r2, [r3, #8]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	721a      	strb	r2, [r3, #8]
}
 8011d2e:	bf00      	nop
 8011d30:	370c      	adds	r7, #12
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr

08011d3a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8011d3a:	b480      	push	{r7}
 8011d3c:	b087      	sub	sp, #28
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	60f8      	str	r0, [r7, #12]
 8011d42:	60b9      	str	r1, [r7, #8]
 8011d44:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8011d46:	2300      	movs	r3, #0
 8011d48:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	781a      	ldrb	r2, [r3, #0]
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	785a      	ldrb	r2, [r3, #1]
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	789a      	ldrb	r2, [r3, #2]
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	78da      	ldrb	r2, [r3, #3]
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	3304      	adds	r3, #4
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	461a      	mov	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	3305      	adds	r3, #5
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	021b      	lsls	r3, r3, #8
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	4313      	orrs	r3, r2
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	799a      	ldrb	r2, [r3, #6]
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	889b      	ldrh	r3, [r3, #4]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d009      	beq.n	8011da8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8011d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011d9c:	d804      	bhi.n	8011da8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011da6:	d901      	bls.n	8011dac <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8011da8:	2303      	movs	r3, #3
 8011daa:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d136      	bne.n	8011e24 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	78db      	ldrb	r3, [r3, #3]
 8011dba:	f003 0303 	and.w	r3, r3, #3
 8011dbe:	2b02      	cmp	r3, #2
 8011dc0:	d108      	bne.n	8011dd4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	889b      	ldrh	r3, [r3, #4]
 8011dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dca:	f240 8097 	bls.w	8011efc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011dce:	2303      	movs	r3, #3
 8011dd0:	75fb      	strb	r3, [r7, #23]
 8011dd2:	e093      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	78db      	ldrb	r3, [r3, #3]
 8011dd8:	f003 0303 	and.w	r3, r3, #3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d107      	bne.n	8011df0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	889b      	ldrh	r3, [r3, #4]
 8011de4:	2b40      	cmp	r3, #64	@ 0x40
 8011de6:	f240 8089 	bls.w	8011efc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011dea:	2303      	movs	r3, #3
 8011dec:	75fb      	strb	r3, [r7, #23]
 8011dee:	e085      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	78db      	ldrb	r3, [r3, #3]
 8011df4:	f003 0303 	and.w	r3, r3, #3
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d005      	beq.n	8011e08 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	78db      	ldrb	r3, [r3, #3]
 8011e00:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011e04:	2b03      	cmp	r3, #3
 8011e06:	d10a      	bne.n	8011e1e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	799b      	ldrb	r3, [r3, #6]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d003      	beq.n	8011e18 <USBH_ParseEPDesc+0xde>
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	799b      	ldrb	r3, [r3, #6]
 8011e14:	2b10      	cmp	r3, #16
 8011e16:	d970      	bls.n	8011efa <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8011e18:	2303      	movs	r3, #3
 8011e1a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011e1c:	e06d      	b.n	8011efa <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011e1e:	2303      	movs	r3, #3
 8011e20:	75fb      	strb	r3, [r7, #23]
 8011e22:	e06b      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011e2a:	2b01      	cmp	r3, #1
 8011e2c:	d13c      	bne.n	8011ea8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	78db      	ldrb	r3, [r3, #3]
 8011e32:	f003 0303 	and.w	r3, r3, #3
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	d005      	beq.n	8011e46 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	78db      	ldrb	r3, [r3, #3]
 8011e3e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d106      	bne.n	8011e54 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	889b      	ldrh	r3, [r3, #4]
 8011e4a:	2b40      	cmp	r3, #64	@ 0x40
 8011e4c:	d956      	bls.n	8011efc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e4e:	2303      	movs	r3, #3
 8011e50:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011e52:	e053      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	78db      	ldrb	r3, [r3, #3]
 8011e58:	f003 0303 	and.w	r3, r3, #3
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d10e      	bne.n	8011e7e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	799b      	ldrb	r3, [r3, #6]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d007      	beq.n	8011e78 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8011e6c:	2b10      	cmp	r3, #16
 8011e6e:	d803      	bhi.n	8011e78 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8011e74:	2b40      	cmp	r3, #64	@ 0x40
 8011e76:	d941      	bls.n	8011efc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e78:	2303      	movs	r3, #3
 8011e7a:	75fb      	strb	r3, [r7, #23]
 8011e7c:	e03e      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	78db      	ldrb	r3, [r3, #3]
 8011e82:	f003 0303 	and.w	r3, r3, #3
 8011e86:	2b03      	cmp	r3, #3
 8011e88:	d10b      	bne.n	8011ea2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	799b      	ldrb	r3, [r3, #6]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d004      	beq.n	8011e9c <USBH_ParseEPDesc+0x162>
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	889b      	ldrh	r3, [r3, #4]
 8011e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011e9a:	d32f      	bcc.n	8011efc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	75fb      	strb	r3, [r7, #23]
 8011ea0:	e02c      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011ea2:	2303      	movs	r3, #3
 8011ea4:	75fb      	strb	r3, [r7, #23]
 8011ea6:	e029      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011eae:	2b02      	cmp	r3, #2
 8011eb0:	d120      	bne.n	8011ef4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	78db      	ldrb	r3, [r3, #3]
 8011eb6:	f003 0303 	and.w	r3, r3, #3
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d106      	bne.n	8011ecc <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	889b      	ldrh	r3, [r3, #4]
 8011ec2:	2b08      	cmp	r3, #8
 8011ec4:	d01a      	beq.n	8011efc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	75fb      	strb	r3, [r7, #23]
 8011eca:	e017      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	78db      	ldrb	r3, [r3, #3]
 8011ed0:	f003 0303 	and.w	r3, r3, #3
 8011ed4:	2b03      	cmp	r3, #3
 8011ed6:	d10a      	bne.n	8011eee <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	799b      	ldrb	r3, [r3, #6]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d003      	beq.n	8011ee8 <USBH_ParseEPDesc+0x1ae>
 8011ee0:	68bb      	ldr	r3, [r7, #8]
 8011ee2:	889b      	ldrh	r3, [r3, #4]
 8011ee4:	2b08      	cmp	r3, #8
 8011ee6:	d909      	bls.n	8011efc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011ee8:	2303      	movs	r3, #3
 8011eea:	75fb      	strb	r3, [r7, #23]
 8011eec:	e006      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011eee:	2303      	movs	r3, #3
 8011ef0:	75fb      	strb	r3, [r7, #23]
 8011ef2:	e003      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8011ef4:	2303      	movs	r3, #3
 8011ef6:	75fb      	strb	r3, [r7, #23]
 8011ef8:	e000      	b.n	8011efc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011efa:	bf00      	nop
  }

  return status;
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	371c      	adds	r7, #28
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	b087      	sub	sp, #28
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	60f8      	str	r0, [r7, #12]
 8011f12:	60b9      	str	r1, [r7, #8]
 8011f14:	4613      	mov	r3, r2
 8011f16:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	2b03      	cmp	r3, #3
 8011f20:	d120      	bne.n	8011f64 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	1e9a      	subs	r2, r3, #2
 8011f28:	88fb      	ldrh	r3, [r7, #6]
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	bf28      	it	cs
 8011f2e:	4613      	movcs	r3, r2
 8011f30:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	3302      	adds	r3, #2
 8011f36:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8011f38:	2300      	movs	r3, #0
 8011f3a:	82fb      	strh	r3, [r7, #22]
 8011f3c:	e00b      	b.n	8011f56 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8011f3e:	8afb      	ldrh	r3, [r7, #22]
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	4413      	add	r3, r2
 8011f44:	781a      	ldrb	r2, [r3, #0]
 8011f46:	68bb      	ldr	r3, [r7, #8]
 8011f48:	701a      	strb	r2, [r3, #0]
      pdest++;
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011f50:	8afb      	ldrh	r3, [r7, #22]
 8011f52:	3302      	adds	r3, #2
 8011f54:	82fb      	strh	r3, [r7, #22]
 8011f56:	8afa      	ldrh	r2, [r7, #22]
 8011f58:	8abb      	ldrh	r3, [r7, #20]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d3ef      	bcc.n	8011f3e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011f5e:	68bb      	ldr	r3, [r7, #8]
 8011f60:	2200      	movs	r2, #0
 8011f62:	701a      	strb	r2, [r3, #0]
  }
}
 8011f64:	bf00      	nop
 8011f66:	371c      	adds	r7, #28
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011f70:	b480      	push	{r7}
 8011f72:	b085      	sub	sp, #20
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	7812      	ldrb	r2, [r2, #0]
 8011f82:	4413      	add	r3, r2
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	4413      	add	r3, r2
 8011f94:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011f96:	68fb      	ldr	r3, [r7, #12]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3714      	adds	r7, #20
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa2:	4770      	bx	lr

08011fa4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b086      	sub	sp, #24
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	4613      	mov	r3, r2
 8011fb0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	789b      	ldrb	r3, [r3, #2]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d002      	beq.n	8011fc4 <USBH_CtlReq+0x20>
 8011fbe:	2b02      	cmp	r3, #2
 8011fc0:	d015      	beq.n	8011fee <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8011fc2:	e033      	b.n	801202c <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	68ba      	ldr	r2, [r7, #8]
 8011fc8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	88fa      	ldrh	r2, [r7, #6]
 8011fce:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2202      	movs	r2, #2
 8011fda:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	2103      	movs	r1, #3
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f7ff fb32 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8011fec:	e01e      	b.n	801202c <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 8011fee:	68f8      	ldr	r0, [r7, #12]
 8011ff0:	f000 f822 	bl	8012038 <USBH_HandleControl>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011ff8:	7dfb      	ldrb	r3, [r7, #23]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d002      	beq.n	8012004 <USBH_CtlReq+0x60>
 8011ffe:	7dfb      	ldrb	r3, [r7, #23]
 8012000:	2b03      	cmp	r3, #3
 8012002:	d106      	bne.n	8012012 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2201      	movs	r2, #1
 8012008:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2200      	movs	r2, #0
 801200e:	761a      	strb	r2, [r3, #24]
 8012010:	e005      	b.n	801201e <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8012012:	7dfb      	ldrb	r3, [r7, #23]
 8012014:	2b02      	cmp	r3, #2
 8012016:	d102      	bne.n	801201e <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2201      	movs	r2, #1
 801201c:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801201e:	2300      	movs	r3, #0
 8012020:	2200      	movs	r2, #0
 8012022:	2103      	movs	r1, #3
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f7ff fb13 	bl	8011650 <USBH_OS_PutMessage>
      break;
 801202a:	bf00      	nop
  }
  return status;
 801202c:	7dfb      	ldrb	r3, [r7, #23]
}
 801202e:	4618      	mov	r0, r3
 8012030:	3718      	adds	r7, #24
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}
	...

08012038 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b086      	sub	sp, #24
 801203c:	af02      	add	r7, sp, #8
 801203e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8012040:	2301      	movs	r3, #1
 8012042:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012044:	2300      	movs	r3, #0
 8012046:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	7e1b      	ldrb	r3, [r3, #24]
 801204c:	3b01      	subs	r3, #1
 801204e:	2b0a      	cmp	r3, #10
 8012050:	f200 81b2 	bhi.w	80123b8 <USBH_HandleControl+0x380>
 8012054:	a201      	add	r2, pc, #4	@ (adr r2, 801205c <USBH_HandleControl+0x24>)
 8012056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801205a:	bf00      	nop
 801205c:	08012089 	.word	0x08012089
 8012060:	080120a3 	.word	0x080120a3
 8012064:	08012125 	.word	0x08012125
 8012068:	0801214b 	.word	0x0801214b
 801206c:	080121a9 	.word	0x080121a9
 8012070:	080121d3 	.word	0x080121d3
 8012074:	08012255 	.word	0x08012255
 8012078:	08012277 	.word	0x08012277
 801207c:	080122d9 	.word	0x080122d9
 8012080:	080122ff 	.word	0x080122ff
 8012084:	08012361 	.word	0x08012361
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f103 0110 	add.w	r1, r3, #16
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	795b      	ldrb	r3, [r3, #5]
 8012092:	461a      	mov	r2, r3
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 f99f 	bl	80123d8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2202      	movs	r2, #2
 801209e:	761a      	strb	r2, [r3, #24]
      break;
 80120a0:	e195      	b.n	80123ce <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	795b      	ldrb	r3, [r3, #5]
 80120a6:	4619      	mov	r1, r3
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f001 f8c7 	bl	801323c <USBH_LL_GetURBState>
 80120ae:	4603      	mov	r3, r0
 80120b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80120b2:	7bbb      	ldrb	r3, [r7, #14]
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d124      	bne.n	8012102 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	7c1b      	ldrb	r3, [r3, #16]
 80120bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80120c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	8adb      	ldrh	r3, [r3, #22]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d00a      	beq.n	80120e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80120ca:	7b7b      	ldrb	r3, [r7, #13]
 80120cc:	2b80      	cmp	r3, #128	@ 0x80
 80120ce:	d103      	bne.n	80120d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2203      	movs	r2, #3
 80120d4:	761a      	strb	r2, [r3, #24]
 80120d6:	e00d      	b.n	80120f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2205      	movs	r2, #5
 80120dc:	761a      	strb	r2, [r3, #24]
 80120de:	e009      	b.n	80120f4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80120e0:	7b7b      	ldrb	r3, [r7, #13]
 80120e2:	2b80      	cmp	r3, #128	@ 0x80
 80120e4:	d103      	bne.n	80120ee <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2209      	movs	r2, #9
 80120ea:	761a      	strb	r2, [r3, #24]
 80120ec:	e002      	b.n	80120f4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2207      	movs	r2, #7
 80120f2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80120f4:	2300      	movs	r3, #0
 80120f6:	2200      	movs	r2, #0
 80120f8:	2103      	movs	r1, #3
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f7ff faa8 	bl	8011650 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8012100:	e15c      	b.n	80123bc <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8012102:	7bbb      	ldrb	r3, [r7, #14]
 8012104:	2b04      	cmp	r3, #4
 8012106:	d003      	beq.n	8012110 <USBH_HandleControl+0xd8>
 8012108:	7bbb      	ldrb	r3, [r7, #14]
 801210a:	2b02      	cmp	r3, #2
 801210c:	f040 8156 	bne.w	80123bc <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	220b      	movs	r2, #11
 8012114:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012116:	2300      	movs	r3, #0
 8012118:	2200      	movs	r2, #0
 801211a:	2103      	movs	r1, #3
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7ff fa97 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012122:	e14b      	b.n	80123bc <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801212a:	b29a      	uxth	r2, r3
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6899      	ldr	r1, [r3, #8]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	899a      	ldrh	r2, [r3, #12]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	791b      	ldrb	r3, [r3, #4]
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f000 f98a 	bl	8012456 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2204      	movs	r2, #4
 8012146:	761a      	strb	r2, [r3, #24]
      break;
 8012148:	e141      	b.n	80123ce <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	791b      	ldrb	r3, [r3, #4]
 801214e:	4619      	mov	r1, r3
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f001 f873 	bl	801323c <USBH_LL_GetURBState>
 8012156:	4603      	mov	r3, r0
 8012158:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801215a:	7bbb      	ldrb	r3, [r7, #14]
 801215c:	2b01      	cmp	r3, #1
 801215e:	d109      	bne.n	8012174 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2209      	movs	r2, #9
 8012164:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012166:	2300      	movs	r3, #0
 8012168:	2200      	movs	r2, #0
 801216a:	2103      	movs	r1, #3
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7ff fa6f 	bl	8011650 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8012172:	e125      	b.n	80123c0 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8012174:	7bbb      	ldrb	r3, [r7, #14]
 8012176:	2b05      	cmp	r3, #5
 8012178:	d108      	bne.n	801218c <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 801217a:	2303      	movs	r3, #3
 801217c:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801217e:	2300      	movs	r3, #0
 8012180:	2200      	movs	r2, #0
 8012182:	2103      	movs	r1, #3
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7ff fa63 	bl	8011650 <USBH_OS_PutMessage>
      break;
 801218a:	e119      	b.n	80123c0 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 801218c:	7bbb      	ldrb	r3, [r7, #14]
 801218e:	2b04      	cmp	r3, #4
 8012190:	f040 8116 	bne.w	80123c0 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	220b      	movs	r2, #11
 8012198:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801219a:	2300      	movs	r3, #0
 801219c:	2200      	movs	r2, #0
 801219e:	2103      	movs	r1, #3
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f7ff fa55 	bl	8011650 <USBH_OS_PutMessage>
      break;
 80121a6:	e10b      	b.n	80123c0 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6899      	ldr	r1, [r3, #8]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	899a      	ldrh	r2, [r3, #12]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	795b      	ldrb	r3, [r3, #5]
 80121b4:	2001      	movs	r0, #1
 80121b6:	9000      	str	r0, [sp, #0]
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 f927 	bl	801240c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2206      	movs	r2, #6
 80121ce:	761a      	strb	r2, [r3, #24]
      break;
 80121d0:	e0fd      	b.n	80123ce <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	795b      	ldrb	r3, [r3, #5]
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f001 f82f 	bl	801323c <USBH_LL_GetURBState>
 80121de:	4603      	mov	r3, r0
 80121e0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80121e2:	7bbb      	ldrb	r3, [r7, #14]
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d109      	bne.n	80121fc <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2207      	movs	r2, #7
 80121ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80121ee:	2300      	movs	r3, #0
 80121f0:	2200      	movs	r2, #0
 80121f2:	2103      	movs	r1, #3
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7ff fa2b 	bl	8011650 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80121fa:	e0e3      	b.n	80123c4 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 80121fc:	7bbb      	ldrb	r3, [r7, #14]
 80121fe:	2b05      	cmp	r3, #5
 8012200:	d10b      	bne.n	801221a <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	220c      	movs	r2, #12
 8012206:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8012208:	2303      	movs	r3, #3
 801220a:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801220c:	2300      	movs	r3, #0
 801220e:	2200      	movs	r2, #0
 8012210:	2103      	movs	r1, #3
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f7ff fa1c 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012218:	e0d4      	b.n	80123c4 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 801221a:	7bbb      	ldrb	r3, [r7, #14]
 801221c:	2b02      	cmp	r3, #2
 801221e:	d109      	bne.n	8012234 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2205      	movs	r2, #5
 8012224:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012226:	2300      	movs	r3, #0
 8012228:	2200      	movs	r2, #0
 801222a:	2103      	movs	r1, #3
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f7ff fa0f 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012232:	e0c7      	b.n	80123c4 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8012234:	7bbb      	ldrb	r3, [r7, #14]
 8012236:	2b04      	cmp	r3, #4
 8012238:	f040 80c4 	bne.w	80123c4 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	220b      	movs	r2, #11
 8012240:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8012242:	2302      	movs	r3, #2
 8012244:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012246:	2300      	movs	r3, #0
 8012248:	2200      	movs	r2, #0
 801224a:	2103      	movs	r1, #3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f7ff f9ff 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012252:	e0b7      	b.n	80123c4 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	791b      	ldrb	r3, [r3, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	2100      	movs	r1, #0
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 f8fa 	bl	8012456 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8012268:	b29a      	uxth	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	2208      	movs	r2, #8
 8012272:	761a      	strb	r2, [r3, #24]

      break;
 8012274:	e0ab      	b.n	80123ce <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	791b      	ldrb	r3, [r3, #4]
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 ffdd 	bl	801323c <USBH_LL_GetURBState>
 8012282:	4603      	mov	r3, r0
 8012284:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8012286:	7bbb      	ldrb	r3, [r7, #14]
 8012288:	2b01      	cmp	r3, #1
 801228a:	d10b      	bne.n	80122a4 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	220d      	movs	r2, #13
 8012290:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8012292:	2300      	movs	r3, #0
 8012294:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012296:	2300      	movs	r3, #0
 8012298:	2200      	movs	r2, #0
 801229a:	2103      	movs	r1, #3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7ff f9d7 	bl	8011650 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80122a2:	e091      	b.n	80123c8 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 80122a4:	7bbb      	ldrb	r3, [r7, #14]
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d109      	bne.n	80122be <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	220b      	movs	r2, #11
 80122ae:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80122b0:	2300      	movs	r3, #0
 80122b2:	2200      	movs	r2, #0
 80122b4:	2103      	movs	r1, #3
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7ff f9ca 	bl	8011650 <USBH_OS_PutMessage>
      break;
 80122bc:	e084      	b.n	80123c8 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 80122be:	7bbb      	ldrb	r3, [r7, #14]
 80122c0:	2b05      	cmp	r3, #5
 80122c2:	f040 8081 	bne.w	80123c8 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 80122c6:	2303      	movs	r3, #3
 80122c8:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80122ca:	2300      	movs	r3, #0
 80122cc:	2200      	movs	r2, #0
 80122ce:	2103      	movs	r1, #3
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7ff f9bd 	bl	8011650 <USBH_OS_PutMessage>
      break;
 80122d6:	e077      	b.n	80123c8 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	795b      	ldrb	r3, [r3, #5]
 80122dc:	2201      	movs	r2, #1
 80122de:	9200      	str	r2, [sp, #0]
 80122e0:	2200      	movs	r2, #0
 80122e2:	2100      	movs	r1, #0
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f000 f891 	bl	801240c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	220a      	movs	r2, #10
 80122fa:	761a      	strb	r2, [r3, #24]
      break;
 80122fc:	e067      	b.n	80123ce <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	795b      	ldrb	r3, [r3, #5]
 8012302:	4619      	mov	r1, r3
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 ff99 	bl	801323c <USBH_LL_GetURBState>
 801230a:	4603      	mov	r3, r0
 801230c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801230e:	7bbb      	ldrb	r3, [r7, #14]
 8012310:	2b01      	cmp	r3, #1
 8012312:	d10b      	bne.n	801232c <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8012314:	2300      	movs	r3, #0
 8012316:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	220d      	movs	r2, #13
 801231c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801231e:	2300      	movs	r3, #0
 8012320:	2200      	movs	r2, #0
 8012322:	2103      	movs	r1, #3
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7ff f993 	bl	8011650 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801232a:	e04f      	b.n	80123cc <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 801232c:	7bbb      	ldrb	r3, [r7, #14]
 801232e:	2b02      	cmp	r3, #2
 8012330:	d109      	bne.n	8012346 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2209      	movs	r2, #9
 8012336:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012338:	2300      	movs	r3, #0
 801233a:	2200      	movs	r2, #0
 801233c:	2103      	movs	r1, #3
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f7ff f986 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012344:	e042      	b.n	80123cc <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8012346:	7bbb      	ldrb	r3, [r7, #14]
 8012348:	2b04      	cmp	r3, #4
 801234a:	d13f      	bne.n	80123cc <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	220b      	movs	r2, #11
 8012350:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8012352:	2300      	movs	r3, #0
 8012354:	2200      	movs	r2, #0
 8012356:	2103      	movs	r1, #3
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f7ff f979 	bl	8011650 <USBH_OS_PutMessage>
      break;
 801235e:	e035      	b.n	80123cc <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	7e5b      	ldrb	r3, [r3, #25]
 8012364:	3301      	adds	r3, #1
 8012366:	b2da      	uxtb	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	765a      	strb	r2, [r3, #25]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	7e5b      	ldrb	r3, [r3, #25]
 8012370:	2b02      	cmp	r3, #2
 8012372:	d806      	bhi.n	8012382 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2201      	movs	r2, #1
 8012378:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	2201      	movs	r2, #1
 801237e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8012380:	e025      	b.n	80123ce <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012388:	2106      	movs	r1, #6
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	795b      	ldrb	r3, [r3, #5]
 8012398:	4619      	mov	r1, r3
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f000 f90c 	bl	80125b8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	791b      	ldrb	r3, [r3, #4]
 80123a4:	4619      	mov	r1, r3
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f906 	bl	80125b8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2200      	movs	r2, #0
 80123b0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80123b2:	2302      	movs	r3, #2
 80123b4:	73fb      	strb	r3, [r7, #15]
      break;
 80123b6:	e00a      	b.n	80123ce <USBH_HandleControl+0x396>

    default:
      break;
 80123b8:	bf00      	nop
 80123ba:	e008      	b.n	80123ce <USBH_HandleControl+0x396>
      break;
 80123bc:	bf00      	nop
 80123be:	e006      	b.n	80123ce <USBH_HandleControl+0x396>
      break;
 80123c0:	bf00      	nop
 80123c2:	e004      	b.n	80123ce <USBH_HandleControl+0x396>
      break;
 80123c4:	bf00      	nop
 80123c6:	e002      	b.n	80123ce <USBH_HandleControl+0x396>
      break;
 80123c8:	bf00      	nop
 80123ca:	e000      	b.n	80123ce <USBH_HandleControl+0x396>
      break;
 80123cc:	bf00      	nop
  }

  return status;
 80123ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b088      	sub	sp, #32
 80123dc:	af04      	add	r7, sp, #16
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	4613      	mov	r3, r2
 80123e4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80123e6:	79f9      	ldrb	r1, [r7, #7]
 80123e8:	2300      	movs	r3, #0
 80123ea:	9303      	str	r3, [sp, #12]
 80123ec:	2308      	movs	r3, #8
 80123ee:	9302      	str	r3, [sp, #8]
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	9301      	str	r3, [sp, #4]
 80123f4:	2300      	movs	r3, #0
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	2300      	movs	r3, #0
 80123fa:	2200      	movs	r2, #0
 80123fc:	68f8      	ldr	r0, [r7, #12]
 80123fe:	f000 feec 	bl	80131da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8012402:	2300      	movs	r3, #0
}
 8012404:	4618      	mov	r0, r3
 8012406:	3710      	adds	r7, #16
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b088      	sub	sp, #32
 8012410:	af04      	add	r7, sp, #16
 8012412:	60f8      	str	r0, [r7, #12]
 8012414:	60b9      	str	r1, [r7, #8]
 8012416:	4611      	mov	r1, r2
 8012418:	461a      	mov	r2, r3
 801241a:	460b      	mov	r3, r1
 801241c:	80fb      	strh	r3, [r7, #6]
 801241e:	4613      	mov	r3, r2
 8012420:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012428:	2b00      	cmp	r3, #0
 801242a:	d001      	beq.n	8012430 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801242c:	2300      	movs	r3, #0
 801242e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8012430:	7979      	ldrb	r1, [r7, #5]
 8012432:	7e3b      	ldrb	r3, [r7, #24]
 8012434:	9303      	str	r3, [sp, #12]
 8012436:	88fb      	ldrh	r3, [r7, #6]
 8012438:	9302      	str	r3, [sp, #8]
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	9301      	str	r3, [sp, #4]
 801243e:	2301      	movs	r3, #1
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	2300      	movs	r3, #0
 8012444:	2200      	movs	r2, #0
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	f000 fec7 	bl	80131da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801244c:	2300      	movs	r3, #0
}
 801244e:	4618      	mov	r0, r3
 8012450:	3710      	adds	r7, #16
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b088      	sub	sp, #32
 801245a:	af04      	add	r7, sp, #16
 801245c:	60f8      	str	r0, [r7, #12]
 801245e:	60b9      	str	r1, [r7, #8]
 8012460:	4611      	mov	r1, r2
 8012462:	461a      	mov	r2, r3
 8012464:	460b      	mov	r3, r1
 8012466:	80fb      	strh	r3, [r7, #6]
 8012468:	4613      	mov	r3, r2
 801246a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801246c:	7979      	ldrb	r1, [r7, #5]
 801246e:	2300      	movs	r3, #0
 8012470:	9303      	str	r3, [sp, #12]
 8012472:	88fb      	ldrh	r3, [r7, #6]
 8012474:	9302      	str	r3, [sp, #8]
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	9301      	str	r3, [sp, #4]
 801247a:	2301      	movs	r3, #1
 801247c:	9300      	str	r3, [sp, #0]
 801247e:	2300      	movs	r3, #0
 8012480:	2201      	movs	r2, #1
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f000 fea9 	bl	80131da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8012488:	2300      	movs	r3, #0

}
 801248a:	4618      	mov	r0, r3
 801248c:	3710      	adds	r7, #16
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b088      	sub	sp, #32
 8012496:	af04      	add	r7, sp, #16
 8012498:	60f8      	str	r0, [r7, #12]
 801249a:	60b9      	str	r1, [r7, #8]
 801249c:	4611      	mov	r1, r2
 801249e:	461a      	mov	r2, r3
 80124a0:	460b      	mov	r3, r1
 80124a2:	80fb      	strh	r3, [r7, #6]
 80124a4:	4613      	mov	r3, r2
 80124a6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d001      	beq.n	80124b6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80124b2:	2300      	movs	r3, #0
 80124b4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80124b6:	7979      	ldrb	r1, [r7, #5]
 80124b8:	7e3b      	ldrb	r3, [r7, #24]
 80124ba:	9303      	str	r3, [sp, #12]
 80124bc:	88fb      	ldrh	r3, [r7, #6]
 80124be:	9302      	str	r3, [sp, #8]
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	9301      	str	r3, [sp, #4]
 80124c4:	2301      	movs	r3, #1
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	2302      	movs	r3, #2
 80124ca:	2200      	movs	r2, #0
 80124cc:	68f8      	ldr	r0, [r7, #12]
 80124ce:	f000 fe84 	bl	80131da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80124d2:	2300      	movs	r3, #0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b088      	sub	sp, #32
 80124e0:	af04      	add	r7, sp, #16
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	4611      	mov	r1, r2
 80124e8:	461a      	mov	r2, r3
 80124ea:	460b      	mov	r3, r1
 80124ec:	80fb      	strh	r3, [r7, #6]
 80124ee:	4613      	mov	r3, r2
 80124f0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80124f2:	7979      	ldrb	r1, [r7, #5]
 80124f4:	2300      	movs	r3, #0
 80124f6:	9303      	str	r3, [sp, #12]
 80124f8:	88fb      	ldrh	r3, [r7, #6]
 80124fa:	9302      	str	r3, [sp, #8]
 80124fc:	68bb      	ldr	r3, [r7, #8]
 80124fe:	9301      	str	r3, [sp, #4]
 8012500:	2301      	movs	r3, #1
 8012502:	9300      	str	r3, [sp, #0]
 8012504:	2302      	movs	r3, #2
 8012506:	2201      	movs	r2, #1
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	f000 fe66 	bl	80131da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801250e:	2300      	movs	r3, #0
}
 8012510:	4618      	mov	r0, r3
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af04      	add	r7, sp, #16
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	4608      	mov	r0, r1
 8012522:	4611      	mov	r1, r2
 8012524:	461a      	mov	r2, r3
 8012526:	4603      	mov	r3, r0
 8012528:	70fb      	strb	r3, [r7, #3]
 801252a:	460b      	mov	r3, r1
 801252c:	70bb      	strb	r3, [r7, #2]
 801252e:	4613      	mov	r3, r2
 8012530:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8012532:	7878      	ldrb	r0, [r7, #1]
 8012534:	78ba      	ldrb	r2, [r7, #2]
 8012536:	78f9      	ldrb	r1, [r7, #3]
 8012538:	8b3b      	ldrh	r3, [r7, #24]
 801253a:	9302      	str	r3, [sp, #8]
 801253c:	7d3b      	ldrb	r3, [r7, #20]
 801253e:	9301      	str	r3, [sp, #4]
 8012540:	7c3b      	ldrb	r3, [r7, #16]
 8012542:	9300      	str	r3, [sp, #0]
 8012544:	4603      	mov	r3, r0
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f000 fe0b 	bl	8013162 <USBH_LL_OpenPipe>

  return USBH_OK;
 801254c:	2300      	movs	r3, #0
}
 801254e:	4618      	mov	r0, r3
 8012550:	3708      	adds	r7, #8
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8012556:	b580      	push	{r7, lr}
 8012558:	b082      	sub	sp, #8
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	460b      	mov	r3, r1
 8012560:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8012562:	78fb      	ldrb	r3, [r7, #3]
 8012564:	4619      	mov	r1, r3
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f000 fe2a 	bl	80131c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 801256c:	2300      	movs	r3, #0
}
 801256e:	4618      	mov	r0, r3
 8012570:	3708      	adds	r7, #8
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8012576:	b580      	push	{r7, lr}
 8012578:	b084      	sub	sp, #16
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	460b      	mov	r3, r1
 8012580:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 f836 	bl	80125f4 <USBH_GetFreePipe>
 8012588:	4603      	mov	r3, r0
 801258a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801258c:	89fb      	ldrh	r3, [r7, #14]
 801258e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012592:	4293      	cmp	r3, r2
 8012594:	d00a      	beq.n	80125ac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8012596:	78fa      	ldrb	r2, [r7, #3]
 8012598:	89fb      	ldrh	r3, [r7, #14]
 801259a:	f003 030f 	and.w	r3, r3, #15
 801259e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80125a2:	6879      	ldr	r1, [r7, #4]
 80125a4:	33e0      	adds	r3, #224	@ 0xe0
 80125a6:	009b      	lsls	r3, r3, #2
 80125a8:	440b      	add	r3, r1
 80125aa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80125ac:	89fb      	ldrh	r3, [r7, #14]
 80125ae:	b2db      	uxtb	r3, r3
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3710      	adds	r7, #16
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b083      	sub	sp, #12
 80125bc:	af00      	add	r7, sp, #0
 80125be:	6078      	str	r0, [r7, #4]
 80125c0:	460b      	mov	r3, r1
 80125c2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80125c4:	78fb      	ldrb	r3, [r7, #3]
 80125c6:	2b0f      	cmp	r3, #15
 80125c8:	d80d      	bhi.n	80125e6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80125ca:	78fb      	ldrb	r3, [r7, #3]
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	33e0      	adds	r3, #224	@ 0xe0
 80125d0:	009b      	lsls	r3, r3, #2
 80125d2:	4413      	add	r3, r2
 80125d4:	685a      	ldr	r2, [r3, #4]
 80125d6:	78fb      	ldrb	r3, [r7, #3]
 80125d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80125dc:	6879      	ldr	r1, [r7, #4]
 80125de:	33e0      	adds	r3, #224	@ 0xe0
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	440b      	add	r3, r1
 80125e4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80125e6:	2300      	movs	r3, #0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	370c      	adds	r7, #12
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80125f4:	b480      	push	{r7}
 80125f6:	b085      	sub	sp, #20
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80125fc:	2300      	movs	r3, #0
 80125fe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012600:	2300      	movs	r3, #0
 8012602:	73fb      	strb	r3, [r7, #15]
 8012604:	e00f      	b.n	8012626 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8012606:	7bfb      	ldrb	r3, [r7, #15]
 8012608:	687a      	ldr	r2, [r7, #4]
 801260a:	33e0      	adds	r3, #224	@ 0xe0
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	4413      	add	r3, r2
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012616:	2b00      	cmp	r3, #0
 8012618:	d102      	bne.n	8012620 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801261a:	7bfb      	ldrb	r3, [r7, #15]
 801261c:	b29b      	uxth	r3, r3
 801261e:	e007      	b.n	8012630 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8012620:	7bfb      	ldrb	r3, [r7, #15]
 8012622:	3301      	adds	r3, #1
 8012624:	73fb      	strb	r3, [r7, #15]
 8012626:	7bfb      	ldrb	r3, [r7, #15]
 8012628:	2b0f      	cmp	r3, #15
 801262a:	d9ec      	bls.n	8012606 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801262c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8012630:	4618      	mov	r0, r3
 8012632:	3714      	adds	r7, #20
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 801263c:	b590      	push	{r4, r7, lr}
 801263e:	b089      	sub	sp, #36	@ 0x24
 8012640:	af04      	add	r7, sp, #16
 8012642:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8012644:	2301      	movs	r3, #1
 8012646:	2202      	movs	r2, #2
 8012648:	2102      	movs	r1, #2
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7fe faef 	bl	8010c2e <USBH_FindInterface>
 8012650:	4603      	mov	r3, r0
 8012652:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012654:	7bfb      	ldrb	r3, [r7, #15]
 8012656:	2bff      	cmp	r3, #255	@ 0xff
 8012658:	d002      	beq.n	8012660 <USBH_CDC_InterfaceInit+0x24>
 801265a:	7bfb      	ldrb	r3, [r7, #15]
 801265c:	2b01      	cmp	r3, #1
 801265e:	d901      	bls.n	8012664 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012660:	2302      	movs	r3, #2
 8012662:	e13d      	b.n	80128e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012664:	7bfb      	ldrb	r3, [r7, #15]
 8012666:	4619      	mov	r1, r3
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7fe fac4 	bl	8010bf6 <USBH_SelectInterface>
 801266e:	4603      	mov	r3, r0
 8012670:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8012672:	7bbb      	ldrb	r3, [r7, #14]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d001      	beq.n	801267c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8012678:	2302      	movs	r3, #2
 801267a:	e131      	b.n	80128e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8012682:	2050      	movs	r0, #80	@ 0x50
 8012684:	f001 f830 	bl	80136e8 <malloc>
 8012688:	4603      	mov	r3, r0
 801268a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012692:	69db      	ldr	r3, [r3, #28]
 8012694:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d101      	bne.n	80126a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 801269c:	2302      	movs	r3, #2
 801269e:	e11f      	b.n	80128e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80126a0:	2250      	movs	r2, #80	@ 0x50
 80126a2:	2100      	movs	r1, #0
 80126a4:	68b8      	ldr	r0, [r7, #8]
 80126a6:	f001 f8dd 	bl	8013864 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80126aa:	7bfb      	ldrb	r3, [r7, #15]
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	211a      	movs	r1, #26
 80126b0:	fb01 f303 	mul.w	r3, r1, r3
 80126b4:	4413      	add	r3, r2
 80126b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	b25b      	sxtb	r3, r3
 80126be:	2b00      	cmp	r3, #0
 80126c0:	da15      	bge.n	80126ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80126c2:	7bfb      	ldrb	r3, [r7, #15]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	211a      	movs	r1, #26
 80126c8:	fb01 f303 	mul.w	r3, r1, r3
 80126cc:	4413      	add	r3, r2
 80126ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80126d2:	781a      	ldrb	r2, [r3, #0]
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80126d8:	7bfb      	ldrb	r3, [r7, #15]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	211a      	movs	r1, #26
 80126de:	fb01 f303 	mul.w	r3, r1, r3
 80126e2:	4413      	add	r3, r2
 80126e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80126e8:	881a      	ldrh	r2, [r3, #0]
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	785b      	ldrb	r3, [r3, #1]
 80126f2:	4619      	mov	r1, r3
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7ff ff3e 	bl	8012576 <USBH_AllocPipe>
 80126fa:	4603      	mov	r3, r0
 80126fc:	461a      	mov	r2, r3
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	7819      	ldrb	r1, [r3, #0]
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	7858      	ldrb	r0, [r3, #1]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012716:	68ba      	ldr	r2, [r7, #8]
 8012718:	8952      	ldrh	r2, [r2, #10]
 801271a:	9202      	str	r2, [sp, #8]
 801271c:	2203      	movs	r2, #3
 801271e:	9201      	str	r2, [sp, #4]
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	4623      	mov	r3, r4
 8012724:	4602      	mov	r2, r0
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7ff fef6 	bl	8012518 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	2200      	movs	r2, #0
 8012732:	4619      	mov	r1, r3
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 fdab 	bl	8013290 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 801273a:	2300      	movs	r3, #0
 801273c:	2200      	movs	r2, #0
 801273e:	210a      	movs	r1, #10
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7fe fa74 	bl	8010c2e <USBH_FindInterface>
 8012746:	4603      	mov	r3, r0
 8012748:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 801274a:	7bfb      	ldrb	r3, [r7, #15]
 801274c:	2bff      	cmp	r3, #255	@ 0xff
 801274e:	d002      	beq.n	8012756 <USBH_CDC_InterfaceInit+0x11a>
 8012750:	7bfb      	ldrb	r3, [r7, #15]
 8012752:	2b01      	cmp	r3, #1
 8012754:	d901      	bls.n	801275a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012756:	2302      	movs	r3, #2
 8012758:	e0c2      	b.n	80128e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801275a:	7bfb      	ldrb	r3, [r7, #15]
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	211a      	movs	r1, #26
 8012760:	fb01 f303 	mul.w	r3, r1, r3
 8012764:	4413      	add	r3, r2
 8012766:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	b25b      	sxtb	r3, r3
 801276e:	2b00      	cmp	r3, #0
 8012770:	da16      	bge.n	80127a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012772:	7bfb      	ldrb	r3, [r7, #15]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	211a      	movs	r1, #26
 8012778:	fb01 f303 	mul.w	r3, r1, r3
 801277c:	4413      	add	r3, r2
 801277e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012782:	781a      	ldrb	r2, [r3, #0]
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012788:	7bfb      	ldrb	r3, [r7, #15]
 801278a:	687a      	ldr	r2, [r7, #4]
 801278c:	211a      	movs	r1, #26
 801278e:	fb01 f303 	mul.w	r3, r1, r3
 8012792:	4413      	add	r3, r2
 8012794:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8012798:	881a      	ldrh	r2, [r3, #0]
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	835a      	strh	r2, [r3, #26]
 801279e:	e015      	b.n	80127cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80127a0:	7bfb      	ldrb	r3, [r7, #15]
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	211a      	movs	r1, #26
 80127a6:	fb01 f303 	mul.w	r3, r1, r3
 80127aa:	4413      	add	r3, r2
 80127ac:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80127b0:	781a      	ldrb	r2, [r3, #0]
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80127b6:	7bfb      	ldrb	r3, [r7, #15]
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	211a      	movs	r1, #26
 80127bc:	fb01 f303 	mul.w	r3, r1, r3
 80127c0:	4413      	add	r3, r2
 80127c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80127c6:	881a      	ldrh	r2, [r3, #0]
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80127cc:	7bfb      	ldrb	r3, [r7, #15]
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	211a      	movs	r1, #26
 80127d2:	fb01 f303 	mul.w	r3, r1, r3
 80127d6:	4413      	add	r3, r2
 80127d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	b25b      	sxtb	r3, r3
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	da16      	bge.n	8012812 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80127e4:	7bfb      	ldrb	r3, [r7, #15]
 80127e6:	687a      	ldr	r2, [r7, #4]
 80127e8:	211a      	movs	r1, #26
 80127ea:	fb01 f303 	mul.w	r3, r1, r3
 80127ee:	4413      	add	r3, r2
 80127f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80127f4:	781a      	ldrb	r2, [r3, #0]
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80127fa:	7bfb      	ldrb	r3, [r7, #15]
 80127fc:	687a      	ldr	r2, [r7, #4]
 80127fe:	211a      	movs	r1, #26
 8012800:	fb01 f303 	mul.w	r3, r1, r3
 8012804:	4413      	add	r3, r2
 8012806:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 801280a:	881a      	ldrh	r2, [r3, #0]
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	835a      	strh	r2, [r3, #26]
 8012810:	e015      	b.n	801283e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012812:	7bfb      	ldrb	r3, [r7, #15]
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	211a      	movs	r1, #26
 8012818:	fb01 f303 	mul.w	r3, r1, r3
 801281c:	4413      	add	r3, r2
 801281e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012822:	781a      	ldrb	r2, [r3, #0]
 8012824:	68bb      	ldr	r3, [r7, #8]
 8012826:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012828:	7bfb      	ldrb	r3, [r7, #15]
 801282a:	687a      	ldr	r2, [r7, #4]
 801282c:	211a      	movs	r1, #26
 801282e:	fb01 f303 	mul.w	r3, r1, r3
 8012832:	4413      	add	r3, r2
 8012834:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012838:	881a      	ldrh	r2, [r3, #0]
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	7b9b      	ldrb	r3, [r3, #14]
 8012842:	4619      	mov	r1, r3
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7ff fe96 	bl	8012576 <USBH_AllocPipe>
 801284a:	4603      	mov	r3, r0
 801284c:	461a      	mov	r2, r3
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	7bdb      	ldrb	r3, [r3, #15]
 8012856:	4619      	mov	r1, r3
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7ff fe8c 	bl	8012576 <USBH_AllocPipe>
 801285e:	4603      	mov	r3, r0
 8012860:	461a      	mov	r2, r3
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	7b59      	ldrb	r1, [r3, #13]
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	7b98      	ldrb	r0, [r3, #14]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801287a:	68ba      	ldr	r2, [r7, #8]
 801287c:	8b12      	ldrh	r2, [r2, #24]
 801287e:	9202      	str	r2, [sp, #8]
 8012880:	2202      	movs	r2, #2
 8012882:	9201      	str	r2, [sp, #4]
 8012884:	9300      	str	r3, [sp, #0]
 8012886:	4623      	mov	r3, r4
 8012888:	4602      	mov	r2, r0
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7ff fe44 	bl	8012518 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	7b19      	ldrb	r1, [r3, #12]
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	7bd8      	ldrb	r0, [r3, #15]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80128a4:	68ba      	ldr	r2, [r7, #8]
 80128a6:	8b52      	ldrh	r2, [r2, #26]
 80128a8:	9202      	str	r2, [sp, #8]
 80128aa:	2202      	movs	r2, #2
 80128ac:	9201      	str	r2, [sp, #4]
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	4623      	mov	r3, r4
 80128b2:	4602      	mov	r2, r0
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f7ff fe2f 	bl	8012518 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	2200      	movs	r2, #0
 80128be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	7b5b      	ldrb	r3, [r3, #13]
 80128c6:	2200      	movs	r2, #0
 80128c8:	4619      	mov	r1, r3
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 fce0 	bl	8013290 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	7b1b      	ldrb	r3, [r3, #12]
 80128d4:	2200      	movs	r2, #0
 80128d6:	4619      	mov	r1, r3
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 fcd9 	bl	8013290 <USBH_LL_SetToggle>

  return USBH_OK;
 80128de:	2300      	movs	r3, #0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3714      	adds	r7, #20
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd90      	pop	{r4, r7, pc}

080128e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80128f6:	69db      	ldr	r3, [r3, #28]
 80128f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d00e      	beq.n	8012920 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	4619      	mov	r1, r3
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f7ff fe24 	bl	8012556 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	4619      	mov	r1, r3
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f7ff fe4f 	bl	80125b8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	2200      	movs	r2, #0
 801291e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	7b1b      	ldrb	r3, [r3, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d00e      	beq.n	8012946 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	7b1b      	ldrb	r3, [r3, #12]
 801292c:	4619      	mov	r1, r3
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7ff fe11 	bl	8012556 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	7b1b      	ldrb	r3, [r3, #12]
 8012938:	4619      	mov	r1, r3
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f7ff fe3c 	bl	80125b8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2200      	movs	r2, #0
 8012944:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	7b5b      	ldrb	r3, [r3, #13]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d00e      	beq.n	801296c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	7b5b      	ldrb	r3, [r3, #13]
 8012952:	4619      	mov	r1, r3
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7ff fdfe 	bl	8012556 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	7b5b      	ldrb	r3, [r3, #13]
 801295e:	4619      	mov	r1, r3
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7ff fe29 	bl	80125b8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012972:	69db      	ldr	r3, [r3, #28]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d00b      	beq.n	8012990 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801297e:	69db      	ldr	r3, [r3, #28]
 8012980:	4618      	mov	r0, r3
 8012982:	f000 feb9 	bl	80136f8 <free>
    phost->pActiveClass->pData = 0U;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801298c:	2200      	movs	r2, #0
 801298e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	3710      	adds	r7, #16
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b084      	sub	sp, #16
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80129a8:	69db      	ldr	r3, [r3, #28]
 80129aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	3340      	adds	r3, #64	@ 0x40
 80129b0:	4619      	mov	r1, r3
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f000 f8b1 	bl	8012b1a <GetLineCoding>
 80129b8:	4603      	mov	r3, r0
 80129ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80129bc:	7afb      	ldrb	r3, [r7, #11]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d105      	bne.n	80129ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80129c8:	2102      	movs	r1, #2
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80129ce:	7afb      	ldrb	r3, [r7, #11]
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3710      	adds	r7, #16
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80129e0:	2301      	movs	r3, #1
 80129e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80129e4:	2300      	movs	r3, #0
 80129e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80129ee:	69db      	ldr	r3, [r3, #28]
 80129f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80129f8:	2b04      	cmp	r3, #4
 80129fa:	d877      	bhi.n	8012aec <USBH_CDC_Process+0x114>
 80129fc:	a201      	add	r2, pc, #4	@ (adr r2, 8012a04 <USBH_CDC_Process+0x2c>)
 80129fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a02:	bf00      	nop
 8012a04:	08012a19 	.word	0x08012a19
 8012a08:	08012a1f 	.word	0x08012a1f
 8012a0c:	08012a4f 	.word	0x08012a4f
 8012a10:	08012ac3 	.word	0x08012ac3
 8012a14:	08012ad1 	.word	0x08012ad1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8012a1c:	e06d      	b.n	8012afa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a22:	4619      	mov	r1, r3
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f000 f897 	bl	8012b58 <SetLineCoding>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012a2e:	7bbb      	ldrb	r3, [r7, #14]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d104      	bne.n	8012a3e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	2202      	movs	r2, #2
 8012a38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012a3c:	e058      	b.n	8012af0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8012a3e:	7bbb      	ldrb	r3, [r7, #14]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d055      	beq.n	8012af0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	2204      	movs	r2, #4
 8012a48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012a4c:	e050      	b.n	8012af0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	3340      	adds	r3, #64	@ 0x40
 8012a52:	4619      	mov	r1, r3
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f000 f860 	bl	8012b1a <GetLineCoding>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012a5e:	7bbb      	ldrb	r3, [r7, #14]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d126      	bne.n	8012ab2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	2200      	movs	r2, #0
 8012a68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a76:	791b      	ldrb	r3, [r3, #4]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d13b      	bne.n	8012af4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012a7c:	68bb      	ldr	r3, [r7, #8]
 8012a7e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a86:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d133      	bne.n	8012af4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a96:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d12b      	bne.n	8012af4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012aa4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d124      	bne.n	8012af4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f000 f96a 	bl	8012d84 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012ab0:	e020      	b.n	8012af4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8012ab2:	7bbb      	ldrb	r3, [r7, #14]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d01d      	beq.n	8012af4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	2204      	movs	r2, #4
 8012abc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012ac0:	e018      	b.n	8012af4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f000 f867 	bl	8012b96 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 f8e6 	bl	8012c9a <CDC_ProcessReception>
      break;
 8012ace:	e014      	b.n	8012afa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7fe ff31 	bl	801193a <USBH_ClrFeature>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012adc:	7bbb      	ldrb	r3, [r7, #14]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d10a      	bne.n	8012af8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8012aea:	e005      	b.n	8012af8 <USBH_CDC_Process+0x120>

    default:
      break;
 8012aec:	bf00      	nop
 8012aee:	e004      	b.n	8012afa <USBH_CDC_Process+0x122>
      break;
 8012af0:	bf00      	nop
 8012af2:	e002      	b.n	8012afa <USBH_CDC_Process+0x122>
      break;
 8012af4:	bf00      	nop
 8012af6:	e000      	b.n	8012afa <USBH_CDC_Process+0x122>
      break;
 8012af8:	bf00      	nop

  }

  return status;
 8012afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3710      	adds	r7, #16
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr

08012b1a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
 8012b22:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	22a1      	movs	r2, #161	@ 0xa1
 8012b28:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2221      	movs	r2, #33	@ 0x21
 8012b2e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2200      	movs	r2, #0
 8012b34:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2207      	movs	r2, #7
 8012b40:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	2207      	movs	r2, #7
 8012b46:	4619      	mov	r1, r3
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff fa2b 	bl	8011fa4 <USBH_CtlReq>
 8012b4e:	4603      	mov	r3, r0
}
 8012b50:	4618      	mov	r0, r3
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2221      	movs	r2, #33	@ 0x21
 8012b66:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2220      	movs	r2, #32
 8012b6c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2200      	movs	r2, #0
 8012b72:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2207      	movs	r2, #7
 8012b7e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	2207      	movs	r2, #7
 8012b84:	4619      	mov	r1, r3
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f7ff fa0c 	bl	8011fa4 <USBH_CtlReq>
 8012b8c:	4603      	mov	r3, r0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b086      	sub	sp, #24
 8012b9a:	af02      	add	r7, sp, #8
 8012b9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012ba4:	69db      	ldr	r3, [r3, #28]
 8012ba6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012ba8:	2300      	movs	r3, #0
 8012baa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d002      	beq.n	8012bbc <CDC_ProcessTransmission+0x26>
 8012bb6:	2b02      	cmp	r3, #2
 8012bb8:	d023      	beq.n	8012c02 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012bba:	e06a      	b.n	8012c92 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	8b12      	ldrh	r2, [r2, #24]
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	d90b      	bls.n	8012be0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	69d9      	ldr	r1, [r3, #28]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	8b1a      	ldrh	r2, [r3, #24]
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	7b5b      	ldrb	r3, [r3, #13]
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	9000      	str	r0, [sp, #0]
 8012bd8:	6878      	ldr	r0, [r7, #4]
 8012bda:	f7ff fc5a 	bl	8012492 <USBH_BulkSendData>
 8012bde:	e00b      	b.n	8012bf8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	7b5b      	ldrb	r3, [r3, #13]
 8012bee:	2001      	movs	r0, #1
 8012bf0:	9000      	str	r0, [sp, #0]
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7ff fc4d 	bl	8012492 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2202      	movs	r2, #2
 8012bfc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8012c00:	e047      	b.n	8012c92 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	7b5b      	ldrb	r3, [r3, #13]
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 fb17 	bl	801323c <USBH_LL_GetURBState>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012c12:	7afb      	ldrb	r3, [r7, #11]
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d12e      	bne.n	8012c76 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	8b12      	ldrh	r2, [r2, #24]
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d90e      	bls.n	8012c42 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	8b12      	ldrh	r2, [r2, #24]
 8012c2c:	1a9a      	subs	r2, r3, r2
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	69db      	ldr	r3, [r3, #28]
 8012c36:	68fa      	ldr	r2, [r7, #12]
 8012c38:	8b12      	ldrh	r2, [r2, #24]
 8012c3a:	441a      	add	r2, r3
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	61da      	str	r2, [r3, #28]
 8012c40:	e002      	b.n	8012c48 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2200      	movs	r2, #0
 8012c46:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d004      	beq.n	8012c5a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2201      	movs	r2, #1
 8012c54:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8012c58:	e006      	b.n	8012c68 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 f87a 	bl	8012d5c <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012c68:	2300      	movs	r3, #0
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	2104      	movs	r1, #4
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7fe fcee 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012c74:	e00c      	b.n	8012c90 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8012c76:	7afb      	ldrb	r3, [r7, #11]
 8012c78:	2b02      	cmp	r3, #2
 8012c7a:	d109      	bne.n	8012c90 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012c84:	2300      	movs	r3, #0
 8012c86:	2200      	movs	r2, #0
 8012c88:	2104      	movs	r1, #4
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f7fe fce0 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012c90:	bf00      	nop
  }
}
 8012c92:	bf00      	nop
 8012c94:	3710      	adds	r7, #16
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8012c9a:	b580      	push	{r7, lr}
 8012c9c:	b086      	sub	sp, #24
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012ca8:	69db      	ldr	r3, [r3, #28]
 8012caa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012cac:	2300      	movs	r3, #0
 8012cae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8012cb6:	2b03      	cmp	r3, #3
 8012cb8:	d002      	beq.n	8012cc0 <CDC_ProcessReception+0x26>
 8012cba:	2b04      	cmp	r3, #4
 8012cbc:	d00e      	beq.n	8012cdc <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8012cbe:	e049      	b.n	8012d54 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	6a19      	ldr	r1, [r3, #32]
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	8b5a      	ldrh	r2, [r3, #26]
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	7b1b      	ldrb	r3, [r3, #12]
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7ff fc05 	bl	80124dc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	2204      	movs	r2, #4
 8012cd6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8012cda:	e03b      	b.n	8012d54 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	7b1b      	ldrb	r3, [r3, #12]
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6878      	ldr	r0, [r7, #4]
 8012ce4:	f000 faaa 	bl	801323c <USBH_LL_GetURBState>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012cec:	7cfb      	ldrb	r3, [r7, #19]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d12f      	bne.n	8012d52 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	7b1b      	ldrb	r3, [r3, #12]
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	f000 fa1f 	bl	801313c <USBH_LL_GetLastXferSize>
 8012cfe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d04:	68fa      	ldr	r2, [r7, #12]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d016      	beq.n	8012d38 <CDC_ProcessReception+0x9e>
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	8b5b      	ldrh	r3, [r3, #26]
 8012d0e:	461a      	mov	r2, r3
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	4293      	cmp	r3, r2
 8012d14:	d110      	bne.n	8012d38 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	1ad2      	subs	r2, r2, r3
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	6a1a      	ldr	r2, [r3, #32]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	441a      	add	r2, r3
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	2203      	movs	r2, #3
 8012d32:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8012d36:	e006      	b.n	8012d46 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f000 f815 	bl	8012d70 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012d46:	2300      	movs	r3, #0
 8012d48:	2200      	movs	r2, #0
 8012d4a:	2104      	movs	r1, #4
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7fe fc7f 	bl	8011650 <USBH_OS_PutMessage>
      break;
 8012d52:	bf00      	nop
  }
}
 8012d54:	bf00      	nop
 8012d56:	3718      	adds	r7, #24
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012d64:	bf00      	nop
 8012d66:	370c      	adds	r7, #12
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012d78:	bf00      	nop
 8012d7a:	370c      	adds	r7, #12
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr

08012d84 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012d84:	b480      	push	{r7}
 8012d86:	b083      	sub	sp, #12
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012d8c:	bf00      	nop
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	490e      	ldr	r1, [pc, #56]	@ (8012dd8 <MX_USB_HOST_Init+0x40>)
 8012da0:	480e      	ldr	r0, [pc, #56]	@ (8012ddc <MX_USB_HOST_Init+0x44>)
 8012da2:	f7fd fe2b 	bl	80109fc <USBH_Init>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d001      	beq.n	8012db0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012dac:	f7f8 fd4e 	bl	800b84c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8012db0:	490b      	ldr	r1, [pc, #44]	@ (8012de0 <MX_USB_HOST_Init+0x48>)
 8012db2:	480a      	ldr	r0, [pc, #40]	@ (8012ddc <MX_USB_HOST_Init+0x44>)
 8012db4:	f7fd fef5 	bl	8010ba2 <USBH_RegisterClass>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d001      	beq.n	8012dc2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012dbe:	f7f8 fd45 	bl	800b84c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012dc2:	4806      	ldr	r0, [pc, #24]	@ (8012ddc <MX_USB_HOST_Init+0x44>)
 8012dc4:	f7fd ff79 	bl	8010cba <USBH_Start>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d001      	beq.n	8012dd2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012dce:	f7f8 fd3d 	bl	800b84c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012dd2:	bf00      	nop
 8012dd4:	bd80      	pop	{r7, pc}
 8012dd6:	bf00      	nop
 8012dd8:	08012de5 	.word	0x08012de5
 8012ddc:	200090e8 	.word	0x200090e8
 8012de0:	20000014 	.word	0x20000014

08012de4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	460b      	mov	r3, r1
 8012dee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012df0:	78fb      	ldrb	r3, [r7, #3]
 8012df2:	3b01      	subs	r3, #1
 8012df4:	2b04      	cmp	r3, #4
 8012df6:	d819      	bhi.n	8012e2c <USBH_UserProcess+0x48>
 8012df8:	a201      	add	r2, pc, #4	@ (adr r2, 8012e00 <USBH_UserProcess+0x1c>)
 8012dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dfe:	bf00      	nop
 8012e00:	08012e2d 	.word	0x08012e2d
 8012e04:	08012e1d 	.word	0x08012e1d
 8012e08:	08012e2d 	.word	0x08012e2d
 8012e0c:	08012e25 	.word	0x08012e25
 8012e10:	08012e15 	.word	0x08012e15
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012e14:	4b09      	ldr	r3, [pc, #36]	@ (8012e3c <USBH_UserProcess+0x58>)
 8012e16:	2203      	movs	r2, #3
 8012e18:	701a      	strb	r2, [r3, #0]
  break;
 8012e1a:	e008      	b.n	8012e2e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012e1c:	4b07      	ldr	r3, [pc, #28]	@ (8012e3c <USBH_UserProcess+0x58>)
 8012e1e:	2202      	movs	r2, #2
 8012e20:	701a      	strb	r2, [r3, #0]
  break;
 8012e22:	e004      	b.n	8012e2e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012e24:	4b05      	ldr	r3, [pc, #20]	@ (8012e3c <USBH_UserProcess+0x58>)
 8012e26:	2201      	movs	r2, #1
 8012e28:	701a      	strb	r2, [r3, #0]
  break;
 8012e2a:	e000      	b.n	8012e2e <USBH_UserProcess+0x4a>

  default:
  break;
 8012e2c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012e2e:	bf00      	nop
 8012e30:	370c      	adds	r7, #12
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop
 8012e3c:	200094cc 	.word	0x200094cc

08012e40 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b0ac      	sub	sp, #176	@ 0xb0
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	601a      	str	r2, [r3, #0]
 8012e50:	605a      	str	r2, [r3, #4]
 8012e52:	609a      	str	r2, [r3, #8]
 8012e54:	60da      	str	r2, [r3, #12]
 8012e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012e58:	f107 0318 	add.w	r3, r7, #24
 8012e5c:	2284      	movs	r2, #132	@ 0x84
 8012e5e:	2100      	movs	r1, #0
 8012e60:	4618      	mov	r0, r3
 8012e62:	f000 fcff 	bl	8013864 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012e6e:	d151      	bne.n	8012f14 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8012e70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8012e74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8012e76:	2300      	movs	r3, #0
 8012e78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012e7c:	f107 0318 	add.w	r3, r7, #24
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7f2 f9c1 	bl	8005208 <HAL_RCCEx_PeriphCLKConfig>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8012e8c:	f7f8 fcde 	bl	800b84c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e90:	4b22      	ldr	r3, [pc, #136]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012e94:	4a21      	ldr	r2, [pc, #132]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012e96:	f043 0301 	orr.w	r3, r3, #1
 8012e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8012e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ea0:	f003 0301 	and.w	r3, r3, #1
 8012ea4:	617b      	str	r3, [r7, #20]
 8012ea6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8012ea8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8012eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012eb0:	2302      	movs	r3, #2
 8012eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ebc:	2303      	movs	r3, #3
 8012ebe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012ec2:	230a      	movs	r3, #10
 8012ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ec8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8012ecc:	4619      	mov	r1, r3
 8012ece:	4814      	ldr	r0, [pc, #80]	@ (8012f20 <HAL_HCD_MspInit+0xe0>)
 8012ed0:	f7ee fcea 	bl	80018a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012ed4:	4b11      	ldr	r3, [pc, #68]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ed8:	4a10      	ldr	r2, [pc, #64]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012ede:	6353      	str	r3, [r2, #52]	@ 0x34
 8012ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012ee8:	613b      	str	r3, [r7, #16]
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	4b0b      	ldr	r3, [pc, #44]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012ef6:	6453      	str	r3, [r2, #68]	@ 0x44
 8012ef8:	4b08      	ldr	r3, [pc, #32]	@ (8012f1c <HAL_HCD_MspInit+0xdc>)
 8012efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012f00:	60fb      	str	r3, [r7, #12]
 8012f02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012f04:	2200      	movs	r2, #0
 8012f06:	2105      	movs	r1, #5
 8012f08:	2043      	movs	r0, #67	@ 0x43
 8012f0a:	f7ed fd63 	bl	80009d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012f0e:	2043      	movs	r0, #67	@ 0x43
 8012f10:	f7ed fd7c 	bl	8000a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012f14:	bf00      	nop
 8012f16:	37b0      	adds	r7, #176	@ 0xb0
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	40023800 	.word	0x40023800
 8012f20:	40020000 	.word	0x40020000

08012f24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7fe faf9 	bl	801152a <USBH_LL_IncTimer>
}
 8012f38:	bf00      	nop
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fe fb39 	bl	80115c6 <USBH_LL_Connect>
}
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fe fb46 	bl	80115fc <USBH_LL_Disconnect>
}
 8012f70:	bf00      	nop
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
 8012f84:	4613      	mov	r3, r2
 8012f86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe fb9a 	bl	80116c8 <USBH_LL_NotifyURBChange>
#endif
}
 8012f94:	bf00      	nop
 8012f96:	3708      	adds	r7, #8
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7fe fae7 	bl	801157e <USBH_LL_PortEnabled>
}
 8012fb0:	bf00      	nop
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7fe faeb 	bl	80115a2 <USBH_LL_PortDisabled>
}
 8012fcc:	bf00      	nop
 8012fce:	3708      	adds	r7, #8
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}

08012fd4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b082      	sub	sp, #8
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d12a      	bne.n	801303c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012fe6:	4a18      	ldr	r2, [pc, #96]	@ (8013048 <USBH_LL_Init+0x74>)
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	4a15      	ldr	r2, [pc, #84]	@ (8013048 <USBH_LL_Init+0x74>)
 8012ff2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012ff6:	4b14      	ldr	r3, [pc, #80]	@ (8013048 <USBH_LL_Init+0x74>)
 8012ff8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012ffc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012ffe:	4b12      	ldr	r3, [pc, #72]	@ (8013048 <USBH_LL_Init+0x74>)
 8013000:	2208      	movs	r2, #8
 8013002:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8013004:	4b10      	ldr	r3, [pc, #64]	@ (8013048 <USBH_LL_Init+0x74>)
 8013006:	2201      	movs	r2, #1
 8013008:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801300a:	4b0f      	ldr	r3, [pc, #60]	@ (8013048 <USBH_LL_Init+0x74>)
 801300c:	2200      	movs	r2, #0
 801300e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8013010:	4b0d      	ldr	r3, [pc, #52]	@ (8013048 <USBH_LL_Init+0x74>)
 8013012:	2202      	movs	r2, #2
 8013014:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013016:	4b0c      	ldr	r3, [pc, #48]	@ (8013048 <USBH_LL_Init+0x74>)
 8013018:	2200      	movs	r2, #0
 801301a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801301c:	480a      	ldr	r0, [pc, #40]	@ (8013048 <USBH_LL_Init+0x74>)
 801301e:	f7ee fe20 	bl	8001c62 <HAL_HCD_Init>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d001      	beq.n	801302c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8013028:	f7f8 fc10 	bl	800b84c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801302c:	4806      	ldr	r0, [pc, #24]	@ (8013048 <USBH_LL_Init+0x74>)
 801302e:	f7ef fa5d 	bl	80024ec <HAL_HCD_GetCurrentFrame>
 8013032:	4603      	mov	r3, r0
 8013034:	4619      	mov	r1, r3
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7fe fa68 	bl	801150c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3708      	adds	r7, #8
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	200094d0 	.word	0x200094d0

0801304c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b084      	sub	sp, #16
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013054:	2300      	movs	r3, #0
 8013056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013058:	2300      	movs	r3, #0
 801305a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013062:	4618      	mov	r0, r3
 8013064:	f7ef f9ca 	bl	80023fc <HAL_HCD_Start>
 8013068:	4603      	mov	r3, r0
 801306a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801306c:	7bfb      	ldrb	r3, [r7, #15]
 801306e:	4618      	mov	r0, r3
 8013070:	f000 f94c 	bl	801330c <USBH_Get_USB_Status>
 8013074:	4603      	mov	r3, r0
 8013076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013078:	7bbb      	ldrb	r3, [r7, #14]
}
 801307a:	4618      	mov	r0, r3
 801307c:	3710      	adds	r7, #16
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b084      	sub	sp, #16
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801308a:	2300      	movs	r3, #0
 801308c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801308e:	2300      	movs	r3, #0
 8013090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013098:	4618      	mov	r0, r3
 801309a:	f7ef f9d2 	bl	8002442 <HAL_HCD_Stop>
 801309e:	4603      	mov	r3, r0
 80130a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80130a2:	7bfb      	ldrb	r3, [r7, #15]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f000 f931 	bl	801330c <USBH_Get_USB_Status>
 80130aa:	4603      	mov	r3, r0
 80130ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3710      	adds	r7, #16
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}

080130b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b084      	sub	sp, #16
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80130c0:	2301      	movs	r3, #1
 80130c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7ef fa1c 	bl	8002508 <HAL_HCD_GetCurrentSpeed>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b02      	cmp	r3, #2
 80130d4:	d00c      	beq.n	80130f0 <USBH_LL_GetSpeed+0x38>
 80130d6:	2b02      	cmp	r3, #2
 80130d8:	d80d      	bhi.n	80130f6 <USBH_LL_GetSpeed+0x3e>
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d002      	beq.n	80130e4 <USBH_LL_GetSpeed+0x2c>
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d003      	beq.n	80130ea <USBH_LL_GetSpeed+0x32>
 80130e2:	e008      	b.n	80130f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80130e4:	2300      	movs	r3, #0
 80130e6:	73fb      	strb	r3, [r7, #15]
    break;
 80130e8:	e008      	b.n	80130fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80130ea:	2301      	movs	r3, #1
 80130ec:	73fb      	strb	r3, [r7, #15]
    break;
 80130ee:	e005      	b.n	80130fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80130f0:	2302      	movs	r3, #2
 80130f2:	73fb      	strb	r3, [r7, #15]
    break;
 80130f4:	e002      	b.n	80130fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80130f6:	2301      	movs	r3, #1
 80130f8:	73fb      	strb	r3, [r7, #15]
    break;
 80130fa:	bf00      	nop
  }
  return  speed;
 80130fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3710      	adds	r7, #16
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8013106:	b580      	push	{r7, lr}
 8013108:	b084      	sub	sp, #16
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801310e:	2300      	movs	r3, #0
 8013110:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013112:	2300      	movs	r3, #0
 8013114:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801311c:	4618      	mov	r0, r3
 801311e:	f7ef f9ad 	bl	800247c <HAL_HCD_ResetPort>
 8013122:	4603      	mov	r3, r0
 8013124:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8013126:	7bfb      	ldrb	r3, [r7, #15]
 8013128:	4618      	mov	r0, r3
 801312a:	f000 f8ef 	bl	801330c <USBH_Get_USB_Status>
 801312e:	4603      	mov	r3, r0
 8013130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013132:	7bbb      	ldrb	r3, [r7, #14]
}
 8013134:	4618      	mov	r0, r3
 8013136:	3710      	adds	r7, #16
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	460b      	mov	r3, r1
 8013146:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801314e:	78fa      	ldrb	r2, [r7, #3]
 8013150:	4611      	mov	r1, r2
 8013152:	4618      	mov	r0, r3
 8013154:	f7ef f9b5 	bl	80024c2 <HAL_HCD_HC_GetXferCount>
 8013158:	4603      	mov	r3, r0
}
 801315a:	4618      	mov	r0, r3
 801315c:	3708      	adds	r7, #8
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}

08013162 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 8013162:	b590      	push	{r4, r7, lr}
 8013164:	b089      	sub	sp, #36	@ 0x24
 8013166:	af04      	add	r7, sp, #16
 8013168:	6078      	str	r0, [r7, #4]
 801316a:	4608      	mov	r0, r1
 801316c:	4611      	mov	r1, r2
 801316e:	461a      	mov	r2, r3
 8013170:	4603      	mov	r3, r0
 8013172:	70fb      	strb	r3, [r7, #3]
 8013174:	460b      	mov	r3, r1
 8013176:	70bb      	strb	r3, [r7, #2]
 8013178:	4613      	mov	r3, r2
 801317a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801317c:	2300      	movs	r3, #0
 801317e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013180:	2300      	movs	r3, #0
 8013182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801318a:	787c      	ldrb	r4, [r7, #1]
 801318c:	78ba      	ldrb	r2, [r7, #2]
 801318e:	78f9      	ldrb	r1, [r7, #3]
 8013190:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013192:	9302      	str	r3, [sp, #8]
 8013194:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013198:	9301      	str	r3, [sp, #4]
 801319a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801319e:	9300      	str	r3, [sp, #0]
 80131a0:	4623      	mov	r3, r4
 80131a2:	f7ee fdc5 	bl	8001d30 <HAL_HCD_HC_Init>
 80131a6:	4603      	mov	r3, r0
 80131a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80131aa:	7bfb      	ldrb	r3, [r7, #15]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f000 f8ad 	bl	801330c <USBH_Get_USB_Status>
 80131b2:	4603      	mov	r3, r0
 80131b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80131b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3714      	adds	r7, #20
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd90      	pop	{r4, r7, pc}

080131c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80131c0:	b480      	push	{r7}
 80131c2:	b083      	sub	sp, #12
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
 80131c8:	460b      	mov	r3, r1
 80131ca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 80131cc:	2300      	movs	r3, #0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	370c      	adds	r7, #12
 80131d2:	46bd      	mov	sp, r7
 80131d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d8:	4770      	bx	lr

080131da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80131da:	b590      	push	{r4, r7, lr}
 80131dc:	b089      	sub	sp, #36	@ 0x24
 80131de:	af04      	add	r7, sp, #16
 80131e0:	6078      	str	r0, [r7, #4]
 80131e2:	4608      	mov	r0, r1
 80131e4:	4611      	mov	r1, r2
 80131e6:	461a      	mov	r2, r3
 80131e8:	4603      	mov	r3, r0
 80131ea:	70fb      	strb	r3, [r7, #3]
 80131ec:	460b      	mov	r3, r1
 80131ee:	70bb      	strb	r3, [r7, #2]
 80131f0:	4613      	mov	r3, r2
 80131f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80131f4:	2300      	movs	r3, #0
 80131f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80131f8:	2300      	movs	r3, #0
 80131fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8013202:	787c      	ldrb	r4, [r7, #1]
 8013204:	78ba      	ldrb	r2, [r7, #2]
 8013206:	78f9      	ldrb	r1, [r7, #3]
 8013208:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801320c:	9303      	str	r3, [sp, #12]
 801320e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013210:	9302      	str	r3, [sp, #8]
 8013212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013214:	9301      	str	r3, [sp, #4]
 8013216:	f897 3020 	ldrb.w	r3, [r7, #32]
 801321a:	9300      	str	r3, [sp, #0]
 801321c:	4623      	mov	r3, r4
 801321e:	f7ee fe3f 	bl	8001ea0 <HAL_HCD_HC_SubmitRequest>
 8013222:	4603      	mov	r3, r0
 8013224:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8013226:	7bfb      	ldrb	r3, [r7, #15]
 8013228:	4618      	mov	r0, r3
 801322a:	f000 f86f 	bl	801330c <USBH_Get_USB_Status>
 801322e:	4603      	mov	r3, r0
 8013230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013232:	7bbb      	ldrb	r3, [r7, #14]
}
 8013234:	4618      	mov	r0, r3
 8013236:	3714      	adds	r7, #20
 8013238:	46bd      	mov	sp, r7
 801323a:	bd90      	pop	{r4, r7, pc}

0801323c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b082      	sub	sp, #8
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	460b      	mov	r3, r1
 8013246:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801324e:	78fa      	ldrb	r2, [r7, #3]
 8013250:	4611      	mov	r1, r2
 8013252:	4618      	mov	r0, r3
 8013254:	f7ef f920 	bl	8002498 <HAL_HCD_HC_GetURBState>
 8013258:	4603      	mov	r3, r0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3708      	adds	r7, #8
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}

08013262 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8013262:	b580      	push	{r7, lr}
 8013264:	b082      	sub	sp, #8
 8013266:	af00      	add	r7, sp, #0
 8013268:	6078      	str	r0, [r7, #4]
 801326a:	460b      	mov	r3, r1
 801326c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8013274:	2b01      	cmp	r3, #1
 8013276:	d103      	bne.n	8013280 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8013278:	78fb      	ldrb	r3, [r7, #3]
 801327a:	4618      	mov	r0, r3
 801327c:	f000 f872 	bl	8013364 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8013280:	20c8      	movs	r0, #200	@ 0xc8
 8013282:	f7ed f833 	bl	80002ec <HAL_Delay>
  return USBH_OK;
 8013286:	2300      	movs	r3, #0
}
 8013288:	4618      	mov	r0, r3
 801328a:	3708      	adds	r7, #8
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013290:	b480      	push	{r7}
 8013292:	b085      	sub	sp, #20
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	460b      	mov	r3, r1
 801329a:	70fb      	strb	r3, [r7, #3]
 801329c:	4613      	mov	r3, r2
 801329e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80132a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80132a8:	78fa      	ldrb	r2, [r7, #3]
 80132aa:	68f9      	ldr	r1, [r7, #12]
 80132ac:	4613      	mov	r3, r2
 80132ae:	011b      	lsls	r3, r3, #4
 80132b0:	1a9b      	subs	r3, r3, r2
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	440b      	add	r3, r1
 80132b6:	3317      	adds	r3, #23
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d00a      	beq.n	80132d4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80132be:	78fa      	ldrb	r2, [r7, #3]
 80132c0:	68f9      	ldr	r1, [r7, #12]
 80132c2:	4613      	mov	r3, r2
 80132c4:	011b      	lsls	r3, r3, #4
 80132c6:	1a9b      	subs	r3, r3, r2
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	440b      	add	r3, r1
 80132cc:	333c      	adds	r3, #60	@ 0x3c
 80132ce:	78ba      	ldrb	r2, [r7, #2]
 80132d0:	701a      	strb	r2, [r3, #0]
 80132d2:	e009      	b.n	80132e8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80132d4:	78fa      	ldrb	r2, [r7, #3]
 80132d6:	68f9      	ldr	r1, [r7, #12]
 80132d8:	4613      	mov	r3, r2
 80132da:	011b      	lsls	r3, r3, #4
 80132dc:	1a9b      	subs	r3, r3, r2
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	440b      	add	r3, r1
 80132e2:	333d      	adds	r3, #61	@ 0x3d
 80132e4:	78ba      	ldrb	r2, [r7, #2]
 80132e6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3714      	adds	r7, #20
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr

080132f6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80132f6:	b580      	push	{r7, lr}
 80132f8:	b082      	sub	sp, #8
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f7ec fff4 	bl	80002ec <HAL_Delay>
}
 8013304:	bf00      	nop
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801330c:	b480      	push	{r7}
 801330e:	b085      	sub	sp, #20
 8013310:	af00      	add	r7, sp, #0
 8013312:	4603      	mov	r3, r0
 8013314:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013316:	2300      	movs	r3, #0
 8013318:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801331a:	79fb      	ldrb	r3, [r7, #7]
 801331c:	2b03      	cmp	r3, #3
 801331e:	d817      	bhi.n	8013350 <USBH_Get_USB_Status+0x44>
 8013320:	a201      	add	r2, pc, #4	@ (adr r2, 8013328 <USBH_Get_USB_Status+0x1c>)
 8013322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013326:	bf00      	nop
 8013328:	08013339 	.word	0x08013339
 801332c:	0801333f 	.word	0x0801333f
 8013330:	08013345 	.word	0x08013345
 8013334:	0801334b 	.word	0x0801334b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013338:	2300      	movs	r3, #0
 801333a:	73fb      	strb	r3, [r7, #15]
    break;
 801333c:	e00b      	b.n	8013356 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801333e:	2302      	movs	r3, #2
 8013340:	73fb      	strb	r3, [r7, #15]
    break;
 8013342:	e008      	b.n	8013356 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013344:	2301      	movs	r3, #1
 8013346:	73fb      	strb	r3, [r7, #15]
    break;
 8013348:	e005      	b.n	8013356 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801334a:	2302      	movs	r3, #2
 801334c:	73fb      	strb	r3, [r7, #15]
    break;
 801334e:	e002      	b.n	8013356 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013350:	2302      	movs	r3, #2
 8013352:	73fb      	strb	r3, [r7, #15]
    break;
 8013354:	bf00      	nop
  }
  return usb_status;
 8013356:	7bfb      	ldrb	r3, [r7, #15]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3714      	adds	r7, #20
 801335c:	46bd      	mov	sp, r7
 801335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013362:	4770      	bx	lr

08013364 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b084      	sub	sp, #16
 8013368:	af00      	add	r7, sp, #0
 801336a:	4603      	mov	r3, r0
 801336c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801336e:	79fb      	ldrb	r3, [r7, #7]
 8013370:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013372:	79fb      	ldrb	r3, [r7, #7]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d102      	bne.n	801337e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8013378:	2300      	movs	r3, #0
 801337a:	73fb      	strb	r3, [r7, #15]
 801337c:	e001      	b.n	8013382 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801337e:	2301      	movs	r3, #1
 8013380:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8013382:	7bfb      	ldrb	r3, [r7, #15]
 8013384:	461a      	mov	r2, r3
 8013386:	2120      	movs	r1, #32
 8013388:	4803      	ldr	r0, [pc, #12]	@ (8013398 <MX_DriverVbusFS+0x34>)
 801338a:	f7ee fc51 	bl	8001c30 <HAL_GPIO_WritePin>
}
 801338e:	bf00      	nop
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop
 8013398:	40020c00 	.word	0x40020c00

0801339c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801339c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80133d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80133a0:	f7f8 f8c0 	bl	800b524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80133a4:	480c      	ldr	r0, [pc, #48]	@ (80133d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80133a6:	490d      	ldr	r1, [pc, #52]	@ (80133dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80133a8:	4a0d      	ldr	r2, [pc, #52]	@ (80133e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80133aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80133ac:	e002      	b.n	80133b4 <LoopCopyDataInit>

080133ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80133ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80133b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80133b2:	3304      	adds	r3, #4

080133b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80133b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80133b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80133b8:	d3f9      	bcc.n	80133ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80133ba:	4a0a      	ldr	r2, [pc, #40]	@ (80133e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80133bc:	4c0a      	ldr	r4, [pc, #40]	@ (80133e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80133be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80133c0:	e001      	b.n	80133c6 <LoopFillZerobss>

080133c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80133c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80133c4:	3204      	adds	r2, #4

080133c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80133c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80133c8:	d3fb      	bcc.n	80133c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80133ca:	f000 fa63 	bl	8013894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80133ce:	f7f8 f959 	bl	800b684 <main>
  bx  lr    
 80133d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80133d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80133d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80133dc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80133e0:	08013a7c 	.word	0x08013a7c
  ldr r2, =_sbss
 80133e4:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80133e8:	200099fc 	.word	0x200099fc

080133ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80133ec:	e7fe      	b.n	80133ec <ADC_IRQHandler>
	...

080133f0 <__udivmoddi4>:
 80133f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133f4:	9d08      	ldr	r5, [sp, #32]
 80133f6:	460f      	mov	r7, r1
 80133f8:	4604      	mov	r4, r0
 80133fa:	468c      	mov	ip, r1
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d148      	bne.n	8013492 <__udivmoddi4+0xa2>
 8013400:	428a      	cmp	r2, r1
 8013402:	4616      	mov	r6, r2
 8013404:	d961      	bls.n	80134ca <__udivmoddi4+0xda>
 8013406:	fab2 f382 	clz	r3, r2
 801340a:	b14b      	cbz	r3, 8013420 <__udivmoddi4+0x30>
 801340c:	f1c3 0220 	rsb	r2, r3, #32
 8013410:	fa01 fc03 	lsl.w	ip, r1, r3
 8013414:	fa20 f202 	lsr.w	r2, r0, r2
 8013418:	409e      	lsls	r6, r3
 801341a:	ea42 0c0c 	orr.w	ip, r2, ip
 801341e:	409c      	lsls	r4, r3
 8013420:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8013424:	b2b7      	uxth	r7, r6
 8013426:	fbbc f1fe 	udiv	r1, ip, lr
 801342a:	0c22      	lsrs	r2, r4, #16
 801342c:	fb0e cc11 	mls	ip, lr, r1, ip
 8013430:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8013434:	fb01 f007 	mul.w	r0, r1, r7
 8013438:	4290      	cmp	r0, r2
 801343a:	d909      	bls.n	8013450 <__udivmoddi4+0x60>
 801343c:	18b2      	adds	r2, r6, r2
 801343e:	f101 3cff 	add.w	ip, r1, #4294967295
 8013442:	f080 80ee 	bcs.w	8013622 <__udivmoddi4+0x232>
 8013446:	4290      	cmp	r0, r2
 8013448:	f240 80eb 	bls.w	8013622 <__udivmoddi4+0x232>
 801344c:	3902      	subs	r1, #2
 801344e:	4432      	add	r2, r6
 8013450:	1a12      	subs	r2, r2, r0
 8013452:	b2a4      	uxth	r4, r4
 8013454:	fbb2 f0fe 	udiv	r0, r2, lr
 8013458:	fb0e 2210 	mls	r2, lr, r0, r2
 801345c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013460:	fb00 f707 	mul.w	r7, r0, r7
 8013464:	42a7      	cmp	r7, r4
 8013466:	d909      	bls.n	801347c <__udivmoddi4+0x8c>
 8013468:	1934      	adds	r4, r6, r4
 801346a:	f100 32ff 	add.w	r2, r0, #4294967295
 801346e:	f080 80da 	bcs.w	8013626 <__udivmoddi4+0x236>
 8013472:	42a7      	cmp	r7, r4
 8013474:	f240 80d7 	bls.w	8013626 <__udivmoddi4+0x236>
 8013478:	4434      	add	r4, r6
 801347a:	3802      	subs	r0, #2
 801347c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8013480:	1be4      	subs	r4, r4, r7
 8013482:	2100      	movs	r1, #0
 8013484:	b11d      	cbz	r5, 801348e <__udivmoddi4+0x9e>
 8013486:	40dc      	lsrs	r4, r3
 8013488:	2300      	movs	r3, #0
 801348a:	e9c5 4300 	strd	r4, r3, [r5]
 801348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013492:	428b      	cmp	r3, r1
 8013494:	d906      	bls.n	80134a4 <__udivmoddi4+0xb4>
 8013496:	b10d      	cbz	r5, 801349c <__udivmoddi4+0xac>
 8013498:	e9c5 0100 	strd	r0, r1, [r5]
 801349c:	2100      	movs	r1, #0
 801349e:	4608      	mov	r0, r1
 80134a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a4:	fab3 f183 	clz	r1, r3
 80134a8:	2900      	cmp	r1, #0
 80134aa:	d148      	bne.n	801353e <__udivmoddi4+0x14e>
 80134ac:	42bb      	cmp	r3, r7
 80134ae:	d302      	bcc.n	80134b6 <__udivmoddi4+0xc6>
 80134b0:	4282      	cmp	r2, r0
 80134b2:	f200 8107 	bhi.w	80136c4 <__udivmoddi4+0x2d4>
 80134b6:	1a84      	subs	r4, r0, r2
 80134b8:	eb67 0203 	sbc.w	r2, r7, r3
 80134bc:	2001      	movs	r0, #1
 80134be:	4694      	mov	ip, r2
 80134c0:	2d00      	cmp	r5, #0
 80134c2:	d0e4      	beq.n	801348e <__udivmoddi4+0x9e>
 80134c4:	e9c5 4c00 	strd	r4, ip, [r5]
 80134c8:	e7e1      	b.n	801348e <__udivmoddi4+0x9e>
 80134ca:	2a00      	cmp	r2, #0
 80134cc:	f000 8092 	beq.w	80135f4 <__udivmoddi4+0x204>
 80134d0:	fab2 f382 	clz	r3, r2
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f040 80a8 	bne.w	801362a <__udivmoddi4+0x23a>
 80134da:	1a8a      	subs	r2, r1, r2
 80134dc:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80134e0:	fa1f fc86 	uxth.w	ip, r6
 80134e4:	2101      	movs	r1, #1
 80134e6:	0c20      	lsrs	r0, r4, #16
 80134e8:	fbb2 f7fe 	udiv	r7, r2, lr
 80134ec:	fb0e 2217 	mls	r2, lr, r7, r2
 80134f0:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80134f4:	fb0c f007 	mul.w	r0, ip, r7
 80134f8:	4290      	cmp	r0, r2
 80134fa:	d907      	bls.n	801350c <__udivmoddi4+0x11c>
 80134fc:	18b2      	adds	r2, r6, r2
 80134fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8013502:	d202      	bcs.n	801350a <__udivmoddi4+0x11a>
 8013504:	4290      	cmp	r0, r2
 8013506:	f200 80e2 	bhi.w	80136ce <__udivmoddi4+0x2de>
 801350a:	4647      	mov	r7, r8
 801350c:	1a12      	subs	r2, r2, r0
 801350e:	b2a4      	uxth	r4, r4
 8013510:	fbb2 f0fe 	udiv	r0, r2, lr
 8013514:	fb0e 2210 	mls	r2, lr, r0, r2
 8013518:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801351c:	fb0c fc00 	mul.w	ip, ip, r0
 8013520:	45a4      	cmp	ip, r4
 8013522:	d907      	bls.n	8013534 <__udivmoddi4+0x144>
 8013524:	1934      	adds	r4, r6, r4
 8013526:	f100 32ff 	add.w	r2, r0, #4294967295
 801352a:	d202      	bcs.n	8013532 <__udivmoddi4+0x142>
 801352c:	45a4      	cmp	ip, r4
 801352e:	f200 80cb 	bhi.w	80136c8 <__udivmoddi4+0x2d8>
 8013532:	4610      	mov	r0, r2
 8013534:	eba4 040c 	sub.w	r4, r4, ip
 8013538:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801353c:	e7a2      	b.n	8013484 <__udivmoddi4+0x94>
 801353e:	f1c1 0620 	rsb	r6, r1, #32
 8013542:	408b      	lsls	r3, r1
 8013544:	fa22 fc06 	lsr.w	ip, r2, r6
 8013548:	ea4c 0c03 	orr.w	ip, ip, r3
 801354c:	fa07 f401 	lsl.w	r4, r7, r1
 8013550:	fa20 f306 	lsr.w	r3, r0, r6
 8013554:	40f7      	lsrs	r7, r6
 8013556:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801355a:	4323      	orrs	r3, r4
 801355c:	fa00 f801 	lsl.w	r8, r0, r1
 8013560:	fa1f fe8c 	uxth.w	lr, ip
 8013564:	fbb7 f0f9 	udiv	r0, r7, r9
 8013568:	0c1c      	lsrs	r4, r3, #16
 801356a:	fb09 7710 	mls	r7, r9, r0, r7
 801356e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8013572:	fb00 f70e 	mul.w	r7, r0, lr
 8013576:	42a7      	cmp	r7, r4
 8013578:	fa02 f201 	lsl.w	r2, r2, r1
 801357c:	d90a      	bls.n	8013594 <__udivmoddi4+0x1a4>
 801357e:	eb1c 0404 	adds.w	r4, ip, r4
 8013582:	f100 3aff 	add.w	sl, r0, #4294967295
 8013586:	f080 809b 	bcs.w	80136c0 <__udivmoddi4+0x2d0>
 801358a:	42a7      	cmp	r7, r4
 801358c:	f240 8098 	bls.w	80136c0 <__udivmoddi4+0x2d0>
 8013590:	3802      	subs	r0, #2
 8013592:	4464      	add	r4, ip
 8013594:	1be4      	subs	r4, r4, r7
 8013596:	b29f      	uxth	r7, r3
 8013598:	fbb4 f3f9 	udiv	r3, r4, r9
 801359c:	fb09 4413 	mls	r4, r9, r3, r4
 80135a0:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 80135a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80135a8:	45a6      	cmp	lr, r4
 80135aa:	d909      	bls.n	80135c0 <__udivmoddi4+0x1d0>
 80135ac:	eb1c 0404 	adds.w	r4, ip, r4
 80135b0:	f103 37ff 	add.w	r7, r3, #4294967295
 80135b4:	f080 8082 	bcs.w	80136bc <__udivmoddi4+0x2cc>
 80135b8:	45a6      	cmp	lr, r4
 80135ba:	d97f      	bls.n	80136bc <__udivmoddi4+0x2cc>
 80135bc:	3b02      	subs	r3, #2
 80135be:	4464      	add	r4, ip
 80135c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80135c4:	eba4 040e 	sub.w	r4, r4, lr
 80135c8:	fba0 e702 	umull	lr, r7, r0, r2
 80135cc:	42bc      	cmp	r4, r7
 80135ce:	4673      	mov	r3, lr
 80135d0:	46b9      	mov	r9, r7
 80135d2:	d363      	bcc.n	801369c <__udivmoddi4+0x2ac>
 80135d4:	d060      	beq.n	8013698 <__udivmoddi4+0x2a8>
 80135d6:	b15d      	cbz	r5, 80135f0 <__udivmoddi4+0x200>
 80135d8:	ebb8 0203 	subs.w	r2, r8, r3
 80135dc:	eb64 0409 	sbc.w	r4, r4, r9
 80135e0:	fa04 f606 	lsl.w	r6, r4, r6
 80135e4:	fa22 f301 	lsr.w	r3, r2, r1
 80135e8:	431e      	orrs	r6, r3
 80135ea:	40cc      	lsrs	r4, r1
 80135ec:	e9c5 6400 	strd	r6, r4, [r5]
 80135f0:	2100      	movs	r1, #0
 80135f2:	e74c      	b.n	801348e <__udivmoddi4+0x9e>
 80135f4:	0862      	lsrs	r2, r4, #1
 80135f6:	0848      	lsrs	r0, r1, #1
 80135f8:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80135fc:	0c0b      	lsrs	r3, r1, #16
 80135fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013602:	b28a      	uxth	r2, r1
 8013604:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013608:	fbb3 f1f6 	udiv	r1, r3, r6
 801360c:	07e4      	lsls	r4, r4, #31
 801360e:	46b4      	mov	ip, r6
 8013610:	4637      	mov	r7, r6
 8013612:	46b6      	mov	lr, r6
 8013614:	231f      	movs	r3, #31
 8013616:	fbb0 f0f6 	udiv	r0, r0, r6
 801361a:	1bd2      	subs	r2, r2, r7
 801361c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013620:	e761      	b.n	80134e6 <__udivmoddi4+0xf6>
 8013622:	4661      	mov	r1, ip
 8013624:	e714      	b.n	8013450 <__udivmoddi4+0x60>
 8013626:	4610      	mov	r0, r2
 8013628:	e728      	b.n	801347c <__udivmoddi4+0x8c>
 801362a:	f1c3 0120 	rsb	r1, r3, #32
 801362e:	fa20 f201 	lsr.w	r2, r0, r1
 8013632:	409e      	lsls	r6, r3
 8013634:	fa27 f101 	lsr.w	r1, r7, r1
 8013638:	409f      	lsls	r7, r3
 801363a:	433a      	orrs	r2, r7
 801363c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8013640:	fa1f fc86 	uxth.w	ip, r6
 8013644:	fbb1 f7fe 	udiv	r7, r1, lr
 8013648:	fb0e 1017 	mls	r0, lr, r7, r1
 801364c:	0c11      	lsrs	r1, r2, #16
 801364e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013652:	fb07 f80c 	mul.w	r8, r7, ip
 8013656:	4588      	cmp	r8, r1
 8013658:	fa04 f403 	lsl.w	r4, r4, r3
 801365c:	d93a      	bls.n	80136d4 <__udivmoddi4+0x2e4>
 801365e:	1871      	adds	r1, r6, r1
 8013660:	f107 30ff 	add.w	r0, r7, #4294967295
 8013664:	d201      	bcs.n	801366a <__udivmoddi4+0x27a>
 8013666:	4588      	cmp	r8, r1
 8013668:	d81f      	bhi.n	80136aa <__udivmoddi4+0x2ba>
 801366a:	eba1 0108 	sub.w	r1, r1, r8
 801366e:	fbb1 f8fe 	udiv	r8, r1, lr
 8013672:	fb08 f70c 	mul.w	r7, r8, ip
 8013676:	fb0e 1118 	mls	r1, lr, r8, r1
 801367a:	b292      	uxth	r2, r2
 801367c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013680:	42ba      	cmp	r2, r7
 8013682:	d22f      	bcs.n	80136e4 <__udivmoddi4+0x2f4>
 8013684:	18b2      	adds	r2, r6, r2
 8013686:	f108 31ff 	add.w	r1, r8, #4294967295
 801368a:	d2c6      	bcs.n	801361a <__udivmoddi4+0x22a>
 801368c:	42ba      	cmp	r2, r7
 801368e:	d2c4      	bcs.n	801361a <__udivmoddi4+0x22a>
 8013690:	f1a8 0102 	sub.w	r1, r8, #2
 8013694:	4432      	add	r2, r6
 8013696:	e7c0      	b.n	801361a <__udivmoddi4+0x22a>
 8013698:	45f0      	cmp	r8, lr
 801369a:	d29c      	bcs.n	80135d6 <__udivmoddi4+0x1e6>
 801369c:	ebbe 0302 	subs.w	r3, lr, r2
 80136a0:	eb67 070c 	sbc.w	r7, r7, ip
 80136a4:	3801      	subs	r0, #1
 80136a6:	46b9      	mov	r9, r7
 80136a8:	e795      	b.n	80135d6 <__udivmoddi4+0x1e6>
 80136aa:	eba6 0808 	sub.w	r8, r6, r8
 80136ae:	4441      	add	r1, r8
 80136b0:	1eb8      	subs	r0, r7, #2
 80136b2:	fbb1 f8fe 	udiv	r8, r1, lr
 80136b6:	fb08 f70c 	mul.w	r7, r8, ip
 80136ba:	e7dc      	b.n	8013676 <__udivmoddi4+0x286>
 80136bc:	463b      	mov	r3, r7
 80136be:	e77f      	b.n	80135c0 <__udivmoddi4+0x1d0>
 80136c0:	4650      	mov	r0, sl
 80136c2:	e767      	b.n	8013594 <__udivmoddi4+0x1a4>
 80136c4:	4608      	mov	r0, r1
 80136c6:	e6fb      	b.n	80134c0 <__udivmoddi4+0xd0>
 80136c8:	4434      	add	r4, r6
 80136ca:	3802      	subs	r0, #2
 80136cc:	e732      	b.n	8013534 <__udivmoddi4+0x144>
 80136ce:	3f02      	subs	r7, #2
 80136d0:	4432      	add	r2, r6
 80136d2:	e71b      	b.n	801350c <__udivmoddi4+0x11c>
 80136d4:	eba1 0108 	sub.w	r1, r1, r8
 80136d8:	4638      	mov	r0, r7
 80136da:	fbb1 f8fe 	udiv	r8, r1, lr
 80136de:	fb08 f70c 	mul.w	r7, r8, ip
 80136e2:	e7c8      	b.n	8013676 <__udivmoddi4+0x286>
 80136e4:	4641      	mov	r1, r8
 80136e6:	e798      	b.n	801361a <__udivmoddi4+0x22a>

080136e8 <malloc>:
 80136e8:	4b02      	ldr	r3, [pc, #8]	@ (80136f4 <malloc+0xc>)
 80136ea:	4601      	mov	r1, r0
 80136ec:	6818      	ldr	r0, [r3, #0]
 80136ee:	f000 b82d 	b.w	801374c <_malloc_r>
 80136f2:	bf00      	nop
 80136f4:	20000034 	.word	0x20000034

080136f8 <free>:
 80136f8:	4b02      	ldr	r3, [pc, #8]	@ (8013704 <free+0xc>)
 80136fa:	4601      	mov	r1, r0
 80136fc:	6818      	ldr	r0, [r3, #0]
 80136fe:	f000 b8fd 	b.w	80138fc <_free_r>
 8013702:	bf00      	nop
 8013704:	20000034 	.word	0x20000034

08013708 <sbrk_aligned>:
 8013708:	b570      	push	{r4, r5, r6, lr}
 801370a:	4e0f      	ldr	r6, [pc, #60]	@ (8013748 <sbrk_aligned+0x40>)
 801370c:	460c      	mov	r4, r1
 801370e:	6831      	ldr	r1, [r6, #0]
 8013710:	4605      	mov	r5, r0
 8013712:	b911      	cbnz	r1, 801371a <sbrk_aligned+0x12>
 8013714:	f000 f8ae 	bl	8013874 <_sbrk_r>
 8013718:	6030      	str	r0, [r6, #0]
 801371a:	4621      	mov	r1, r4
 801371c:	4628      	mov	r0, r5
 801371e:	f000 f8a9 	bl	8013874 <_sbrk_r>
 8013722:	1c43      	adds	r3, r0, #1
 8013724:	d103      	bne.n	801372e <sbrk_aligned+0x26>
 8013726:	f04f 34ff 	mov.w	r4, #4294967295
 801372a:	4620      	mov	r0, r4
 801372c:	bd70      	pop	{r4, r5, r6, pc}
 801372e:	1cc4      	adds	r4, r0, #3
 8013730:	f024 0403 	bic.w	r4, r4, #3
 8013734:	42a0      	cmp	r0, r4
 8013736:	d0f8      	beq.n	801372a <sbrk_aligned+0x22>
 8013738:	1a21      	subs	r1, r4, r0
 801373a:	4628      	mov	r0, r5
 801373c:	f000 f89a 	bl	8013874 <_sbrk_r>
 8013740:	3001      	adds	r0, #1
 8013742:	d1f2      	bne.n	801372a <sbrk_aligned+0x22>
 8013744:	e7ef      	b.n	8013726 <sbrk_aligned+0x1e>
 8013746:	bf00      	nop
 8013748:	200098b0 	.word	0x200098b0

0801374c <_malloc_r>:
 801374c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013750:	1ccd      	adds	r5, r1, #3
 8013752:	f025 0503 	bic.w	r5, r5, #3
 8013756:	3508      	adds	r5, #8
 8013758:	2d0c      	cmp	r5, #12
 801375a:	bf38      	it	cc
 801375c:	250c      	movcc	r5, #12
 801375e:	2d00      	cmp	r5, #0
 8013760:	4606      	mov	r6, r0
 8013762:	db01      	blt.n	8013768 <_malloc_r+0x1c>
 8013764:	42a9      	cmp	r1, r5
 8013766:	d904      	bls.n	8013772 <_malloc_r+0x26>
 8013768:	230c      	movs	r3, #12
 801376a:	6033      	str	r3, [r6, #0]
 801376c:	2000      	movs	r0, #0
 801376e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013848 <_malloc_r+0xfc>
 8013776:	f000 f869 	bl	801384c <__malloc_lock>
 801377a:	f8d8 3000 	ldr.w	r3, [r8]
 801377e:	461c      	mov	r4, r3
 8013780:	bb44      	cbnz	r4, 80137d4 <_malloc_r+0x88>
 8013782:	4629      	mov	r1, r5
 8013784:	4630      	mov	r0, r6
 8013786:	f7ff ffbf 	bl	8013708 <sbrk_aligned>
 801378a:	1c43      	adds	r3, r0, #1
 801378c:	4604      	mov	r4, r0
 801378e:	d158      	bne.n	8013842 <_malloc_r+0xf6>
 8013790:	f8d8 4000 	ldr.w	r4, [r8]
 8013794:	4627      	mov	r7, r4
 8013796:	2f00      	cmp	r7, #0
 8013798:	d143      	bne.n	8013822 <_malloc_r+0xd6>
 801379a:	2c00      	cmp	r4, #0
 801379c:	d04b      	beq.n	8013836 <_malloc_r+0xea>
 801379e:	6823      	ldr	r3, [r4, #0]
 80137a0:	4639      	mov	r1, r7
 80137a2:	4630      	mov	r0, r6
 80137a4:	eb04 0903 	add.w	r9, r4, r3
 80137a8:	f000 f864 	bl	8013874 <_sbrk_r>
 80137ac:	4581      	cmp	r9, r0
 80137ae:	d142      	bne.n	8013836 <_malloc_r+0xea>
 80137b0:	6821      	ldr	r1, [r4, #0]
 80137b2:	1a6d      	subs	r5, r5, r1
 80137b4:	4629      	mov	r1, r5
 80137b6:	4630      	mov	r0, r6
 80137b8:	f7ff ffa6 	bl	8013708 <sbrk_aligned>
 80137bc:	3001      	adds	r0, #1
 80137be:	d03a      	beq.n	8013836 <_malloc_r+0xea>
 80137c0:	6823      	ldr	r3, [r4, #0]
 80137c2:	442b      	add	r3, r5
 80137c4:	6023      	str	r3, [r4, #0]
 80137c6:	f8d8 3000 	ldr.w	r3, [r8]
 80137ca:	685a      	ldr	r2, [r3, #4]
 80137cc:	bb62      	cbnz	r2, 8013828 <_malloc_r+0xdc>
 80137ce:	f8c8 7000 	str.w	r7, [r8]
 80137d2:	e00f      	b.n	80137f4 <_malloc_r+0xa8>
 80137d4:	6822      	ldr	r2, [r4, #0]
 80137d6:	1b52      	subs	r2, r2, r5
 80137d8:	d420      	bmi.n	801381c <_malloc_r+0xd0>
 80137da:	2a0b      	cmp	r2, #11
 80137dc:	d917      	bls.n	801380e <_malloc_r+0xc2>
 80137de:	1961      	adds	r1, r4, r5
 80137e0:	42a3      	cmp	r3, r4
 80137e2:	6025      	str	r5, [r4, #0]
 80137e4:	bf18      	it	ne
 80137e6:	6059      	strne	r1, [r3, #4]
 80137e8:	6863      	ldr	r3, [r4, #4]
 80137ea:	bf08      	it	eq
 80137ec:	f8c8 1000 	streq.w	r1, [r8]
 80137f0:	5162      	str	r2, [r4, r5]
 80137f2:	604b      	str	r3, [r1, #4]
 80137f4:	4630      	mov	r0, r6
 80137f6:	f000 f82f 	bl	8013858 <__malloc_unlock>
 80137fa:	f104 000b 	add.w	r0, r4, #11
 80137fe:	1d23      	adds	r3, r4, #4
 8013800:	f020 0007 	bic.w	r0, r0, #7
 8013804:	1ac2      	subs	r2, r0, r3
 8013806:	bf1c      	itt	ne
 8013808:	1a1b      	subne	r3, r3, r0
 801380a:	50a3      	strne	r3, [r4, r2]
 801380c:	e7af      	b.n	801376e <_malloc_r+0x22>
 801380e:	6862      	ldr	r2, [r4, #4]
 8013810:	42a3      	cmp	r3, r4
 8013812:	bf0c      	ite	eq
 8013814:	f8c8 2000 	streq.w	r2, [r8]
 8013818:	605a      	strne	r2, [r3, #4]
 801381a:	e7eb      	b.n	80137f4 <_malloc_r+0xa8>
 801381c:	4623      	mov	r3, r4
 801381e:	6864      	ldr	r4, [r4, #4]
 8013820:	e7ae      	b.n	8013780 <_malloc_r+0x34>
 8013822:	463c      	mov	r4, r7
 8013824:	687f      	ldr	r7, [r7, #4]
 8013826:	e7b6      	b.n	8013796 <_malloc_r+0x4a>
 8013828:	461a      	mov	r2, r3
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	42a3      	cmp	r3, r4
 801382e:	d1fb      	bne.n	8013828 <_malloc_r+0xdc>
 8013830:	2300      	movs	r3, #0
 8013832:	6053      	str	r3, [r2, #4]
 8013834:	e7de      	b.n	80137f4 <_malloc_r+0xa8>
 8013836:	230c      	movs	r3, #12
 8013838:	6033      	str	r3, [r6, #0]
 801383a:	4630      	mov	r0, r6
 801383c:	f000 f80c 	bl	8013858 <__malloc_unlock>
 8013840:	e794      	b.n	801376c <_malloc_r+0x20>
 8013842:	6005      	str	r5, [r0, #0]
 8013844:	e7d6      	b.n	80137f4 <_malloc_r+0xa8>
 8013846:	bf00      	nop
 8013848:	200098b4 	.word	0x200098b4

0801384c <__malloc_lock>:
 801384c:	4801      	ldr	r0, [pc, #4]	@ (8013854 <__malloc_lock+0x8>)
 801384e:	f000 b845 	b.w	80138dc <__retarget_lock_acquire_recursive>
 8013852:	bf00      	nop
 8013854:	200099f4 	.word	0x200099f4

08013858 <__malloc_unlock>:
 8013858:	4801      	ldr	r0, [pc, #4]	@ (8013860 <__malloc_unlock+0x8>)
 801385a:	f000 b840 	b.w	80138de <__retarget_lock_release_recursive>
 801385e:	bf00      	nop
 8013860:	200099f4 	.word	0x200099f4

08013864 <memset>:
 8013864:	4402      	add	r2, r0
 8013866:	4603      	mov	r3, r0
 8013868:	4293      	cmp	r3, r2
 801386a:	d100      	bne.n	801386e <memset+0xa>
 801386c:	4770      	bx	lr
 801386e:	f803 1b01 	strb.w	r1, [r3], #1
 8013872:	e7f9      	b.n	8013868 <memset+0x4>

08013874 <_sbrk_r>:
 8013874:	b538      	push	{r3, r4, r5, lr}
 8013876:	4d06      	ldr	r5, [pc, #24]	@ (8013890 <_sbrk_r+0x1c>)
 8013878:	2300      	movs	r3, #0
 801387a:	4604      	mov	r4, r0
 801387c:	4608      	mov	r0, r1
 801387e:	602b      	str	r3, [r5, #0]
 8013880:	f000 f886 	bl	8013990 <_sbrk>
 8013884:	1c43      	adds	r3, r0, #1
 8013886:	d102      	bne.n	801388e <_sbrk_r+0x1a>
 8013888:	682b      	ldr	r3, [r5, #0]
 801388a:	b103      	cbz	r3, 801388e <_sbrk_r+0x1a>
 801388c:	6023      	str	r3, [r4, #0]
 801388e:	bd38      	pop	{r3, r4, r5, pc}
 8013890:	200099f0 	.word	0x200099f0

08013894 <__libc_init_array>:
 8013894:	b570      	push	{r4, r5, r6, lr}
 8013896:	4b0d      	ldr	r3, [pc, #52]	@ (80138cc <__libc_init_array+0x38>)
 8013898:	4d0d      	ldr	r5, [pc, #52]	@ (80138d0 <__libc_init_array+0x3c>)
 801389a:	1b5b      	subs	r3, r3, r5
 801389c:	109c      	asrs	r4, r3, #2
 801389e:	2600      	movs	r6, #0
 80138a0:	42a6      	cmp	r6, r4
 80138a2:	d109      	bne.n	80138b8 <__libc_init_array+0x24>
 80138a4:	f000 f882 	bl	80139ac <_init>
 80138a8:	4d0a      	ldr	r5, [pc, #40]	@ (80138d4 <__libc_init_array+0x40>)
 80138aa:	4b0b      	ldr	r3, [pc, #44]	@ (80138d8 <__libc_init_array+0x44>)
 80138ac:	1b5b      	subs	r3, r3, r5
 80138ae:	109c      	asrs	r4, r3, #2
 80138b0:	2600      	movs	r6, #0
 80138b2:	42a6      	cmp	r6, r4
 80138b4:	d105      	bne.n	80138c2 <__libc_init_array+0x2e>
 80138b6:	bd70      	pop	{r4, r5, r6, pc}
 80138b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80138bc:	4798      	blx	r3
 80138be:	3601      	adds	r6, #1
 80138c0:	e7ee      	b.n	80138a0 <__libc_init_array+0xc>
 80138c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80138c6:	4798      	blx	r3
 80138c8:	3601      	adds	r6, #1
 80138ca:	e7f2      	b.n	80138b2 <__libc_init_array+0x1e>
 80138cc:	08013a74 	.word	0x08013a74
 80138d0:	08013a74 	.word	0x08013a74
 80138d4:	08013a74 	.word	0x08013a74
 80138d8:	08013a78 	.word	0x08013a78

080138dc <__retarget_lock_acquire_recursive>:
 80138dc:	4770      	bx	lr

080138de <__retarget_lock_release_recursive>:
 80138de:	4770      	bx	lr

080138e0 <memcpy>:
 80138e0:	440a      	add	r2, r1
 80138e2:	4291      	cmp	r1, r2
 80138e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80138e8:	d100      	bne.n	80138ec <memcpy+0xc>
 80138ea:	4770      	bx	lr
 80138ec:	b510      	push	{r4, lr}
 80138ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138f6:	4291      	cmp	r1, r2
 80138f8:	d1f9      	bne.n	80138ee <memcpy+0xe>
 80138fa:	bd10      	pop	{r4, pc}

080138fc <_free_r>:
 80138fc:	b538      	push	{r3, r4, r5, lr}
 80138fe:	4605      	mov	r5, r0
 8013900:	2900      	cmp	r1, #0
 8013902:	d041      	beq.n	8013988 <_free_r+0x8c>
 8013904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013908:	1f0c      	subs	r4, r1, #4
 801390a:	2b00      	cmp	r3, #0
 801390c:	bfb8      	it	lt
 801390e:	18e4      	addlt	r4, r4, r3
 8013910:	f7ff ff9c 	bl	801384c <__malloc_lock>
 8013914:	4a1d      	ldr	r2, [pc, #116]	@ (801398c <_free_r+0x90>)
 8013916:	6813      	ldr	r3, [r2, #0]
 8013918:	b933      	cbnz	r3, 8013928 <_free_r+0x2c>
 801391a:	6063      	str	r3, [r4, #4]
 801391c:	6014      	str	r4, [r2, #0]
 801391e:	4628      	mov	r0, r5
 8013920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013924:	f7ff bf98 	b.w	8013858 <__malloc_unlock>
 8013928:	42a3      	cmp	r3, r4
 801392a:	d908      	bls.n	801393e <_free_r+0x42>
 801392c:	6820      	ldr	r0, [r4, #0]
 801392e:	1821      	adds	r1, r4, r0
 8013930:	428b      	cmp	r3, r1
 8013932:	bf01      	itttt	eq
 8013934:	6819      	ldreq	r1, [r3, #0]
 8013936:	685b      	ldreq	r3, [r3, #4]
 8013938:	1809      	addeq	r1, r1, r0
 801393a:	6021      	streq	r1, [r4, #0]
 801393c:	e7ed      	b.n	801391a <_free_r+0x1e>
 801393e:	461a      	mov	r2, r3
 8013940:	685b      	ldr	r3, [r3, #4]
 8013942:	b10b      	cbz	r3, 8013948 <_free_r+0x4c>
 8013944:	42a3      	cmp	r3, r4
 8013946:	d9fa      	bls.n	801393e <_free_r+0x42>
 8013948:	6811      	ldr	r1, [r2, #0]
 801394a:	1850      	adds	r0, r2, r1
 801394c:	42a0      	cmp	r0, r4
 801394e:	d10b      	bne.n	8013968 <_free_r+0x6c>
 8013950:	6820      	ldr	r0, [r4, #0]
 8013952:	4401      	add	r1, r0
 8013954:	1850      	adds	r0, r2, r1
 8013956:	4283      	cmp	r3, r0
 8013958:	6011      	str	r1, [r2, #0]
 801395a:	d1e0      	bne.n	801391e <_free_r+0x22>
 801395c:	6818      	ldr	r0, [r3, #0]
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	6053      	str	r3, [r2, #4]
 8013962:	4408      	add	r0, r1
 8013964:	6010      	str	r0, [r2, #0]
 8013966:	e7da      	b.n	801391e <_free_r+0x22>
 8013968:	d902      	bls.n	8013970 <_free_r+0x74>
 801396a:	230c      	movs	r3, #12
 801396c:	602b      	str	r3, [r5, #0]
 801396e:	e7d6      	b.n	801391e <_free_r+0x22>
 8013970:	6820      	ldr	r0, [r4, #0]
 8013972:	1821      	adds	r1, r4, r0
 8013974:	428b      	cmp	r3, r1
 8013976:	bf04      	itt	eq
 8013978:	6819      	ldreq	r1, [r3, #0]
 801397a:	685b      	ldreq	r3, [r3, #4]
 801397c:	6063      	str	r3, [r4, #4]
 801397e:	bf04      	itt	eq
 8013980:	1809      	addeq	r1, r1, r0
 8013982:	6021      	streq	r1, [r4, #0]
 8013984:	6054      	str	r4, [r2, #4]
 8013986:	e7ca      	b.n	801391e <_free_r+0x22>
 8013988:	bd38      	pop	{r3, r4, r5, pc}
 801398a:	bf00      	nop
 801398c:	200098b4 	.word	0x200098b4

08013990 <_sbrk>:
 8013990:	4a04      	ldr	r2, [pc, #16]	@ (80139a4 <_sbrk+0x14>)
 8013992:	4905      	ldr	r1, [pc, #20]	@ (80139a8 <_sbrk+0x18>)
 8013994:	6813      	ldr	r3, [r2, #0]
 8013996:	2b00      	cmp	r3, #0
 8013998:	bf08      	it	eq
 801399a:	460b      	moveq	r3, r1
 801399c:	4418      	add	r0, r3
 801399e:	6010      	str	r0, [r2, #0]
 80139a0:	4618      	mov	r0, r3
 80139a2:	4770      	bx	lr
 80139a4:	200099f8 	.word	0x200099f8
 80139a8:	20009a00 	.word	0x20009a00

080139ac <_init>:
 80139ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ae:	bf00      	nop
 80139b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139b2:	bc08      	pop	{r3}
 80139b4:	469e      	mov	lr, r3
 80139b6:	4770      	bx	lr

080139b8 <_fini>:
 80139b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ba:	bf00      	nop
 80139bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139be:	bc08      	pop	{r3}
 80139c0:	469e      	mov	lr, r3
 80139c2:	4770      	bx	lr
